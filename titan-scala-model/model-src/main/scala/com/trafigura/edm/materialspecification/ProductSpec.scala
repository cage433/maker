/**
 * WARNING: This file was automatically generated by the Trading Hub tooling version 2.15.
 * Any manual changes may be overwritten and lost!
 */


// Generated from model_object_scala.erb

package com.trafigura.edm.materialspecification





import com.trafigura.tradinghub.support._
import scala.collection.JavaConversions._




 class ProductSpec extends com.trafigura.edm.materialspecification.MaterialSpec  {
  


  
    

var dutyPaid:Boolean = false
    
    





  override def equals(o: Any) = o match {
    case r: AnyRef =>
        if (o.isInstanceOf[com.trafigura.edm.materialspecification.ProductSpec]) {
            val that = r.asInstanceOf[com.trafigura.edm.materialspecification.ProductSpec]
            that.canEqual(this) && this.comments == that.comments && this.dutyPaid == that.dutyPaid &&  true
        }
        else false
    case _ => false
  }

  override def canEqual(that : Any) = that.isInstanceOf[com.trafigura.edm.materialspecification.ProductSpec]

  override def hashCode = {
    (41 * (41 *  1
    ) +
         (if (comments == null) 0 else comments.hashCode) 
    ) +
         dutyPaid.hashCode
        
    
  }

  override def toString = {
    "{com.trafigura.edm.materialspecification.ProductSpec: " + "" + "comments = " + comments + ", " + "dutyPaid = " + dutyPaid +  "}"
  }


  
        override def toJson() : org.codehaus.jettison.json.JSONObject = {
      toJson(new SerialisationHelper)
    }

    override def toJson(differentiator: SerialisationHelper) : org.codehaus.jettison.json.JSONObject = {
        var result = super.toJson(differentiator);

        result.put("_node", differentiator.idFor(this))

        result.put("Type", "EDM.MaterialSpecification.ProductSpec@1@1.0")
        
          
          
          
          
            result.putOpt("DutyPaid", this.dutyPaid);
          
        
        return result;
    }

    override def loadJson(jobj : org.codehaus.jettison.json.JSONObject, cache: DeserialisationHelper) = {
        
            super.loadJson(jobj, cache);
        
        
          
              dutyPaid = JSONConversions.optional[Boolean](jobj.opt("DutyPaid"), false)
          
        
    }

  
}

object ProductSpec {
  def version = ModelVersion("1")
  def wireFormatVersion = ModelVersion("1.0")

  
        val jsonTypeName = "EDM.MaterialSpecification.ProductSpec"

    def fromJson(jobj : org.codehaus.jettison.json.JSONObject, cache: DeserialisationHelper = new DeserialisationHelper) : com.trafigura.edm.materialspecification.ProductSpec = {
      val v = TypeHolder(jobj.optString("Type"))

      v.assertModelVersion(version, "com.trafigura.edm.materialspecification.ProductSpec")
      v.assertWireFormatVersion(wireFormatVersion, "com.trafigura.edm.materialspecification.ProductSpec")

      
        
              v.typeName match {
              
                case "EDM.MaterialSpecification.CommoditySpec" =>
                  
                     val result = new com.trafigura.edm.materialspecification.CommoditySpec()
                     result.loadJson(jobj, cache)
                     result
                  
              
                case "EDM.MaterialSpecification.RefinedMetalSpec" =>
                  
                     val result = new com.trafigura.edm.materialspecification.RefinedMetalSpec()
                     result.loadJson(jobj, cache)
                     result
                  
              
                case _ =>
                  
                     val result = new com.trafigura.edm.materialspecification.ProductSpec()
                     result.loadJson(jobj, cache)
                     result
                  
            }
        
      
    }

  

  

  
    def apply(dutyPaid: Boolean = false) = {
      val res = new com.trafigura.edm.materialspecification.ProductSpec
      
        res.dutyPaid = dutyPaid
      
      res
    }
  
}
