/**
 * WARNING: This file was automatically generated by the Trading Hub tooling version 2.15.
 * Any manual changes may be overwritten and lost!
 */


// Generated from model_object_scala.erb

package com.trafigura.edm.pricingschedules





import com.trafigura.tradinghub.support._
import scala.collection.JavaConversions._




 abstract class PricingSchedule extends com.trafigura.tradinghub.support.ModelObject  {
  


  
    

var oid:Int = 0
    
    





  override def equals(o: Any) = o match {
    case r: AnyRef =>
        if (o.isInstanceOf[com.trafigura.edm.pricingschedules.PricingSchedule]) {
            val that = r.asInstanceOf[com.trafigura.edm.pricingschedules.PricingSchedule]
            that.canEqual(this) && this.oid == that.oid &&  true
        }
        else false
    case _ => false
  }

  override def canEqual(that : Any) = that.isInstanceOf[com.trafigura.edm.pricingschedules.PricingSchedule]

  override def hashCode = {
    (41 *  1
    ) +
         oid.hashCode
        
    
  }

  override def toString = {
    "{com.trafigura.edm.pricingschedules.PricingSchedule: " + "" + "oid = " + oid +  "}"
  }


  
         def toJson() : org.codehaus.jettison.json.JSONObject = {
      toJson(new SerialisationHelper)
    }

     def toJson(differentiator: SerialisationHelper) : org.codehaus.jettison.json.JSONObject = {
        var result = new org.codehaus.jettison.json.JSONObject();

        result.put("_node", differentiator.idFor(this))

        result.put("Type", "EDM.PricingSchedules.PricingSchedule@1@1.0")
        
          
          
          
          
            result.putOpt("Oid", this.oid);
          
        
        return result;
    }

     def loadJson(jobj : org.codehaus.jettison.json.JSONObject, cache: DeserialisationHelper) = {
        
        
          
              oid = JSONConversions.optional[Int](jobj.opt("Oid"), 0)
          
        
    }

  
}

object PricingSchedule {
  def version = ModelVersion("1")
  def wireFormatVersion = ModelVersion("1.0")

  
        val jsonTypeName = "EDM.PricingSchedules.PricingSchedule"

    def fromJson(jobj : org.codehaus.jettison.json.JSONObject, cache: DeserialisationHelper = new DeserialisationHelper) : com.trafigura.edm.pricingschedules.PricingSchedule = {
      val v = TypeHolder(jobj.optString("Type"))

      v.assertModelVersion(version, "com.trafigura.edm.pricingschedules.PricingSchedule")
      v.assertWireFormatVersion(wireFormatVersion, "com.trafigura.edm.pricingschedules.PricingSchedule")

      
        
              v.typeName match {
              
                case "EDM.PricingSchedules.OptionalPricingSchedule" =>
                  
                     val result = new com.trafigura.edm.pricingschedules.OptionalPricingSchedule()
                     result.loadJson(jobj, cache)
                     result
                  
              
                case "EDM.PricingSchedules.NonOptionalPricingSchedule" =>
                  
                     val result = new com.trafigura.edm.pricingschedules.NonOptionalPricingSchedule()
                     result.loadJson(jobj, cache)
                     result
                  
              
                case "EDM.PricingSchedules.FixedDatesPricingSchedule" =>
                  
                     val result = new com.trafigura.edm.pricingschedules.FixedDatesPricingSchedule()
                     result.loadJson(jobj, cache)
                     result
                  
              
                case _ =>
                  
                    throw new RuntimeException("Tried to instantiate abstract class  com.trafigura.edm.pricingschedules.PricingSchedule. Type name was "+v.typeName)
                  
            }
        
      
    }

  

  

  
}
