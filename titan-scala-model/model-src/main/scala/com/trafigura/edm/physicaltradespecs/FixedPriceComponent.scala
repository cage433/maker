/**
 * WARNING: This file was automatically generated by the Trading Hub tooling version 2.15.
 * Any manual changes may be overwritten and lost!
 */


// Generated from model_object_scala.erb

package com.trafigura.edm.physicaltradespecs





import com.trafigura.tradinghub.support._
import scala.collection.JavaConversions._




 class FixedPriceComponent extends com.trafigura.tradinghub.support.ModelObject  {
  


  
    
    /**
     field 'oid',                            :integer, :identifier => true
Do we need a date field - the data always appears to have the contract date here
     */

var date:org.joda.time.LocalDate = null
    
    
    

var quantity:com.trafigura.edm.shared.types.Quantity = null
    
    
    

var price:com.trafigura.edm.shared.types.Quantity = null
    
    
    
    /**
     ultimately referring to some ref-data but for now this is unavailable so we're capturing free-form text
     */

var brand:String = null
    
    





  override def equals(o: Any) = o match {
    case r: AnyRef =>
        if (o.isInstanceOf[com.trafigura.edm.physicaltradespecs.FixedPriceComponent]) {
            val that = r.asInstanceOf[com.trafigura.edm.physicaltradespecs.FixedPriceComponent]
            that.canEqual(this) && this.brand == that.brand && this.date == that.date && this.price == that.price && this.quantity == that.quantity &&  true
        }
        else false
    case _ => false
  }

  override def canEqual(that : Any) = that.isInstanceOf[com.trafigura.edm.physicaltradespecs.FixedPriceComponent]

  override def hashCode = {
    (41 * (41 * (41 * (41 *  1
    ) +
         (if (brand == null) 0 else brand.hashCode) 
    ) +
         (if (date == null) 0 else date.hashCode) 
    ) +
         (if (price == null) 0 else price.hashCode) 
    ) +
         (if (quantity == null) 0 else quantity.hashCode) 
    
  }

  override def toString = {
    "{com.trafigura.edm.physicaltradespecs.FixedPriceComponent: " + "" + "brand = " + brand + ", " + "date = " + date + ", " + "price = " + price + ", " + "quantity = " + quantity +  "}"
  }


  
         def toJson() : org.codehaus.jettison.json.JSONObject = {
      toJson(new SerialisationHelper)
    }

     def toJson(differentiator: SerialisationHelper) : org.codehaus.jettison.json.JSONObject = {
        var result = new org.codehaus.jettison.json.JSONObject();

        result.put("_node", differentiator.idFor(this))

        result.put("Type", "EDM.PhysicalTradeSpecs.FixedPriceComponent@1@1.0")
        
          
          
          
          
            result.putOpt("Date", JSONConversions.optionalDateToJSON(this.date));
          
        
          
          
          
          
            result.putOpt("Quantity", (this.quantity) match { case null => null; case o => o.toJson(differentiator) });
          
        
          
          
          
          
            result.putOpt("Price", (this.price) match { case null => null; case o => o.toJson(differentiator) });
          
        
          
          
          
          
            result.putOpt("Brand", this.brand);
          
        
        return result;
    }

     def loadJson(jobj : org.codehaus.jettison.json.JSONObject, cache: DeserialisationHelper) = {
        
        
          
              date = JSONConversions.optionalDate(jobj.opt("Date"))
          
              quantity = (jobj.opt("Quantity")) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.edm.shared.types.Quantity.fromJson(o, cache))) }
          
              price = (jobj.opt("Price")) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.edm.shared.types.Quantity.fromJson(o, cache))) }
          
              brand = JSONConversions.optional[String](jobj.opt("Brand"), null)
          
        
    }

  
}

object FixedPriceComponent {
  def version = ModelVersion("1")
  def wireFormatVersion = ModelVersion("1.0")

  
        val jsonTypeName = "EDM.PhysicalTradeSpecs.FixedPriceComponent"

    def fromJson(jobj : org.codehaus.jettison.json.JSONObject, cache: DeserialisationHelper = new DeserialisationHelper) : com.trafigura.edm.physicaltradespecs.FixedPriceComponent = {
      val v = TypeHolder(jobj.optString("Type"))

      v.assertModelVersion(version, "com.trafigura.edm.physicaltradespecs.FixedPriceComponent")
      v.assertWireFormatVersion(wireFormatVersion, "com.trafigura.edm.physicaltradespecs.FixedPriceComponent")

      
        
            val result = new com.trafigura.edm.physicaltradespecs.FixedPriceComponent()
            result.loadJson(jobj, cache)
            result
        
      
    }

  

  
  val BrandLength = 50
  

  
    def apply(date: org.joda.time.LocalDate = null, quantity: com.trafigura.edm.shared.types.Quantity = null, price: com.trafigura.edm.shared.types.Quantity = null, brand: String = null) = {
      val res = new com.trafigura.edm.physicaltradespecs.FixedPriceComponent
      
        res.date = date
      
        res.quantity = quantity
      
        res.price = price
      
        res.brand = brand
      
      res
    }
  
}
