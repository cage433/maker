/**
 * WARNING: This file was automatically generated by the Trading Hub tooling version 2.15.
 * Any manual changes may be overwritten and lost!
 */


// Generated from model_object_scala.erb

package com.trafigura.edm.physicaltradespecs





import com.trafigura.tradinghub.support._
import scala.collection.JavaConversions._



/**
 This is the most common pricing specification. A typical
trade may be - 
  I buy 100 MT per month over 2010 at a price calculated as the
  average LME Zinc price during M + 1 plus a premium of 1.5 $/MT
 */


 class MonthAveragePricingSpecification extends com.trafigura.edm.physicaltradespecs.AveragePricingSpecification  {
  


  
    

var market:String = null
    
    
    

var qpMonth:org.joda.time.LocalDate = null
    
    
    

var premium:com.trafigura.edm.shared.types.Quantity = null
    
    





  override def equals(o: Any) = o match {
    case r: AnyRef =>
        if (o.isInstanceOf[com.trafigura.edm.physicaltradespecs.MonthAveragePricingSpecification]) {
            val that = r.asInstanceOf[com.trafigura.edm.physicaltradespecs.MonthAveragePricingSpecification]
            that.canEqual(this) && this.comments == that.comments && this.currency == that.currency && this.fixations == that.fixations && this.fxOverrides == that.fxOverrides && this.index == that.index && this.market == that.market && this.ordinal == that.ordinal && this.premium == that.premium && this.qpMonth == that.qpMonth && this.quantity == that.quantity &&  true
        }
        else false
    case _ => false
  }

  override def canEqual(that : Any) = that.isInstanceOf[com.trafigura.edm.physicaltradespecs.MonthAveragePricingSpecification]

  override def hashCode = {
    (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 *  1
    ) +
         (if (comments == null) 0 else comments.hashCode) 
    ) +
         (if (currency == null) 0 else currency.hashCode) 
    ) +
         (if (fixations == null) 0 else fixations.hashCode) 
    ) +
         (if (fxOverrides == null) 0 else fxOverrides.hashCode) 
    ) +
         (if (index == null) 0 else index.hashCode) 
    ) +
         (if (market == null) 0 else market.hashCode) 
    ) +
         ordinal.hashCode
        
    ) +
         (if (premium == null) 0 else premium.hashCode) 
    ) +
         (if (qpMonth == null) 0 else qpMonth.hashCode) 
    ) +
         (if (quantity == null) 0 else quantity.hashCode) 
    
  }

  override def toString = {
    "{com.trafigura.edm.physicaltradespecs.MonthAveragePricingSpecification: " + "" + "comments = " + comments + ", " + "currency = " + currency + ", " + "fixations = " + fixations + ", " + "fxOverrides = " + fxOverrides + ", " + "index = " + index + ", " + "market = " + market + ", " + "ordinal = " + ordinal + ", " + "premium = " + premium + ", " + "qpMonth = " + qpMonth + ", " + "quantity = " + quantity +  "}"
  }


  
        override def toJson() : org.codehaus.jettison.json.JSONObject = {
      toJson(new SerialisationHelper)
    }

    override def toJson(differentiator: SerialisationHelper) : org.codehaus.jettison.json.JSONObject = {
        var result = super.toJson(differentiator);

        result.put("_node", differentiator.idFor(this))

        result.put("Type", "EDM.PhysicalTradeSpecs.MonthAveragePricingSpecification@1@1.0")
        
          
          
          
          
            result.putOpt("Market", this.market);
          
        
          
          
          
          
            result.putOpt("QpMonth", JSONConversions.optionalDateToJSON(this.qpMonth));
          
        
          
          
          
          
            result.putOpt("Premium", (this.premium) match { case null => null; case o => o.toJson(differentiator) });
          
        
        return result;
    }

    override def loadJson(jobj : org.codehaus.jettison.json.JSONObject, cache: DeserialisationHelper) = {
        
            super.loadJson(jobj, cache);
        
        
          
              market = JSONConversions.optional[String](jobj.opt("Market"), null)
          
              qpMonth = JSONConversions.optionalDate(jobj.opt("QpMonth"))
          
              premium = (jobj.opt("Premium")) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.edm.shared.types.Quantity.fromJson(o, cache))) }
          
        
    }

  
}

object MonthAveragePricingSpecification {
  def version = ModelVersion("1")
  def wireFormatVersion = ModelVersion("1.0")

  
        val jsonTypeName = "EDM.PhysicalTradeSpecs.MonthAveragePricingSpecification"

    def fromJson(jobj : org.codehaus.jettison.json.JSONObject, cache: DeserialisationHelper = new DeserialisationHelper) : com.trafigura.edm.physicaltradespecs.MonthAveragePricingSpecification = {
      val v = TypeHolder(jobj.optString("Type"))

      v.assertModelVersion(version, "com.trafigura.edm.physicaltradespecs.MonthAveragePricingSpecification")
      v.assertWireFormatVersion(wireFormatVersion, "com.trafigura.edm.physicaltradespecs.MonthAveragePricingSpecification")

      
        
              v.typeName match {
              
                case _ =>
                  
                     val result = new com.trafigura.edm.physicaltradespecs.MonthAveragePricingSpecification()
                     result.loadJson(jobj, cache)
                     result
                  
            }
        
      
    }

  

  

  
    def apply(market: String = null, qpMonth: org.joda.time.LocalDate = null, premium: com.trafigura.edm.shared.types.Quantity = null) = {
      val res = new com.trafigura.edm.physicaltradespecs.MonthAveragePricingSpecification
      
        res.market = market
      
        res.qpMonth = qpMonth
      
        res.premium = premium
      
      res
    }
  
}
