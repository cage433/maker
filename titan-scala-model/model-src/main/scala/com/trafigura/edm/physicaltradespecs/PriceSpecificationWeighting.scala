/**
 * WARNING: This file was automatically generated by the Trading Hub tooling version 2.15.
 * Any manual changes may be overwritten and lost!
 */


// Generated from model_object_scala.erb

package com.trafigura.edm.physicaltradespecs





import com.trafigura.tradinghub.support._
import scala.collection.JavaConversions._



/**
 A pricing specification formed from the weighted average of other pricing
specifications. 
 */


 class PriceSpecificationWeighting extends com.trafigura.tradinghub.support.ModelObject  {
  


  
    

var weight:Double = 0.0
    
    
    

var pricingSpec:com.trafigura.edm.physicaltradespecs.PricingSpecification = null
    
    





  override def equals(o: Any) = o match {
    case r: AnyRef =>
        if (o.isInstanceOf[com.trafigura.edm.physicaltradespecs.PriceSpecificationWeighting]) {
            val that = r.asInstanceOf[com.trafigura.edm.physicaltradespecs.PriceSpecificationWeighting]
            that.canEqual(this) && this.pricingSpec == that.pricingSpec && this.weight == that.weight &&  true
        }
        else false
    case _ => false
  }

  override def canEqual(that : Any) = that.isInstanceOf[com.trafigura.edm.physicaltradespecs.PriceSpecificationWeighting]

  override def hashCode = {
    (41 * (41 *  1
    ) +
         (if (pricingSpec == null) 0 else pricingSpec.hashCode) 
    ) +
         weight.hashCode
        
    
  }

  override def toString = {
    "{com.trafigura.edm.physicaltradespecs.PriceSpecificationWeighting: " + "" + "pricingSpec = " + pricingSpec + ", " + "weight = " + weight +  "}"
  }


  
         def toJson() : org.codehaus.jettison.json.JSONObject = {
      toJson(new SerialisationHelper)
    }

     def toJson(differentiator: SerialisationHelper) : org.codehaus.jettison.json.JSONObject = {
        var result = new org.codehaus.jettison.json.JSONObject();

        result.put("_node", differentiator.idFor(this))

        result.put("Type", "EDM.PhysicalTradeSpecs.PriceSpecificationWeighting@1@1.0")
        
          
          
          
          
            result.putOpt("Weight", this.weight);
          
        
          
          
          
          
            result.putOpt("PricingSpec", (this.pricingSpec) match { case null => null; case o => o.toJson(differentiator) });
          
        
        return result;
    }

     def loadJson(jobj : org.codehaus.jettison.json.JSONObject, cache: DeserialisationHelper) = {
        
        
          
              weight = JSONConversions.optionalReal(jobj.opt("Weight"))
          
              pricingSpec = (jobj.opt("PricingSpec")) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.edm.physicaltradespecs.PricingSpecification.fromJson(o, cache))) }
          
        
    }

  
}

object PriceSpecificationWeighting {
  def version = ModelVersion("1")
  def wireFormatVersion = ModelVersion("1.0")

  
        val jsonTypeName = "EDM.PhysicalTradeSpecs.PriceSpecificationWeighting"

    def fromJson(jobj : org.codehaus.jettison.json.JSONObject, cache: DeserialisationHelper = new DeserialisationHelper) : com.trafigura.edm.physicaltradespecs.PriceSpecificationWeighting = {
      val v = TypeHolder(jobj.optString("Type"))

      v.assertModelVersion(version, "com.trafigura.edm.physicaltradespecs.PriceSpecificationWeighting")
      v.assertWireFormatVersion(wireFormatVersion, "com.trafigura.edm.physicaltradespecs.PriceSpecificationWeighting")

      
        
            val result = new com.trafigura.edm.physicaltradespecs.PriceSpecificationWeighting()
            result.loadJson(jobj, cache)
            result
        
      
    }

  

  

  
    def apply(weight: Double = 0.0, pricingSpec: com.trafigura.edm.physicaltradespecs.PricingSpecification = null) = {
      val res = new com.trafigura.edm.physicaltradespecs.PriceSpecificationWeighting
      
        res.weight = weight
      
        res.pricingSpec = pricingSpec
      
      res
    }
  
}
