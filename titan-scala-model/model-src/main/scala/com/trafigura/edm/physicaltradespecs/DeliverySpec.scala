/**
 * WARNING: This file was automatically generated by the Trading Hub tooling version 2.15.
 * Any manual changes may be overwritten and lost!
 */


// Generated from model_object_scala.erb

package com.trafigura.edm.physicaltradespecs





import com.trafigura.tradinghub.support._
import scala.collection.JavaConversions._




 class DeliverySpec extends com.trafigura.tradinghub.support.ModelObject  {
  


  
    

var quantity:com.trafigura.edm.shared.types.Quantity = null
    
    
    

var tolerance:com.trafigura.edm.shared.types.Tolerance = null
    
    
    

var schedule:com.trafigura.edm.shared.types.DateSpec = null
    
    
    

var deliveryLocations:List[com.trafigura.edm.physicaltradespecs.DeliveryLocation] = null
    
    
    
    /**
     this is the initial 'best guess' as to where the materials will go
     */

var destinationLocation:GUID = null
    
    
    

var materialSpec:com.trafigura.edm.materialspecification.MaterialSpec = null
    
    





  override def equals(o: Any) = o match {
    case r: AnyRef =>
        if (o.isInstanceOf[com.trafigura.edm.physicaltradespecs.DeliverySpec]) {
            val that = r.asInstanceOf[com.trafigura.edm.physicaltradespecs.DeliverySpec]
            that.canEqual(this) && this.deliveryLocations == that.deliveryLocations && this.destinationLocation == that.destinationLocation && this.materialSpec == that.materialSpec && this.quantity == that.quantity && this.schedule == that.schedule && this.tolerance == that.tolerance &&  true
        }
        else false
    case _ => false
  }

  override def canEqual(that : Any) = that.isInstanceOf[com.trafigura.edm.physicaltradespecs.DeliverySpec]

  override def hashCode = {
    (41 * (41 * (41 * (41 * (41 * (41 *  1
    ) +
         (if (deliveryLocations == null) 0 else deliveryLocations.hashCode) 
    ) +
         (if (destinationLocation == null) 0 else destinationLocation.hashCode) 
    ) +
         (if (materialSpec == null) 0 else materialSpec.hashCode) 
    ) +
         (if (quantity == null) 0 else quantity.hashCode) 
    ) +
         (if (schedule == null) 0 else schedule.hashCode) 
    ) +
         (if (tolerance == null) 0 else tolerance.hashCode) 
    
  }

  override def toString = {
    "{com.trafigura.edm.physicaltradespecs.DeliverySpec: " + "" + "deliveryLocations = " + deliveryLocations + ", " + "destinationLocation = " + destinationLocation + ", " + "materialSpec = " + materialSpec + ", " + "quantity = " + quantity + ", " + "schedule = " + schedule + ", " + "tolerance = " + tolerance +  "}"
  }


  
         def toJson() : org.codehaus.jettison.json.JSONObject = {
      toJson(new SerialisationHelper)
    }

     def toJson(differentiator: SerialisationHelper) : org.codehaus.jettison.json.JSONObject = {
        var result = new org.codehaus.jettison.json.JSONObject();

        result.put("_node", differentiator.idFor(this))

        result.put("Type", "EDM.PhysicalTradeSpecs.DeliverySpec@1@1.0")
        
          
          
          
          
            result.putOpt("Quantity", (this.quantity) match { case null => null; case o => o.toJson(differentiator) });
          
        
          
          
          
          
            result.putOpt("Tolerance", (this.tolerance) match { case null => null; case o => o.toJson(differentiator) });
          
        
          
          
          
          
            result.putOpt("Schedule", (this.schedule) match { case null => null; case o => o.toJson(differentiator) });
          
        
          
          
          
          
            result.putOpt("DeliveryLocations", new org.codehaus.jettison.json.JSONArray(if(this.deliveryLocations == null) new java.util.ArrayList() else java.util.Arrays.asList(this.deliveryLocations.map(t => (t) match { case null => null; case o => o.toJson(differentiator) }).toArray: _*)));
          
        
          
          
          
          
            result.putOpt("DestinationLocation", if (this.destinationLocation == null) null else this.destinationLocation.toJson);
          
        
          
          
          
          
            result.putOpt("MaterialSpec", (this.materialSpec) match { case null => null; case o => o.toJson(differentiator) });
          
        
        return result;
    }

     def loadJson(jobj : org.codehaus.jettison.json.JSONObject, cache: DeserialisationHelper) = {
        
        
          
              quantity = (jobj.opt("Quantity")) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.edm.shared.types.Quantity.fromJson(o, cache))) }
          
              tolerance = (jobj.opt("Tolerance")) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.edm.shared.types.Tolerance.fromJson(o, cache))) }
          
              schedule = (jobj.opt("Schedule")) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.edm.shared.types.DateSpec.fromJson(o, cache))) }
          
              deliveryLocations = JSONConversions.optionalList(jobj.opt("DeliveryLocations"), x => (x) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.edm.physicaltradespecs.DeliveryLocation.fromJson(o, cache))) })
          
              destinationLocation = if (jobj.opt("DestinationLocation") == null) null else GUID(JSONConversions.optional[String](jobj.opt("DestinationLocation"), null))
          
              materialSpec = (jobj.opt("MaterialSpec")) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.edm.materialspecification.MaterialSpec.fromJson(o, cache))) }
          
        
    }

  
}

object DeliverySpec {
  def version = ModelVersion("1")
  def wireFormatVersion = ModelVersion("1.0")

  
        val jsonTypeName = "EDM.PhysicalTradeSpecs.DeliverySpec"

    def fromJson(jobj : org.codehaus.jettison.json.JSONObject, cache: DeserialisationHelper = new DeserialisationHelper) : com.trafigura.edm.physicaltradespecs.DeliverySpec = {
      val v = TypeHolder(jobj.optString("Type"))

      v.assertModelVersion(version, "com.trafigura.edm.physicaltradespecs.DeliverySpec")
      v.assertWireFormatVersion(wireFormatVersion, "com.trafigura.edm.physicaltradespecs.DeliverySpec")

      
        
            val result = new com.trafigura.edm.physicaltradespecs.DeliverySpec()
            result.loadJson(jobj, cache)
            result
        
      
    }

  

  

  
    def apply(quantity: com.trafigura.edm.shared.types.Quantity = null, tolerance: com.trafigura.edm.shared.types.Tolerance = null, schedule: com.trafigura.edm.shared.types.DateSpec = null, deliveryLocations: List[com.trafigura.edm.physicaltradespecs.DeliveryLocation] = null, destinationLocation: GUID = null, materialSpec: com.trafigura.edm.materialspecification.MaterialSpec = null) = {
      val res = new com.trafigura.edm.physicaltradespecs.DeliverySpec
      
        res.quantity = quantity
      
        res.tolerance = tolerance
      
        res.schedule = schedule
      
        res.deliveryLocations = deliveryLocations
      
        res.destinationLocation = destinationLocation
      
        res.materialSpec = materialSpec
      
      res
    }
  
}
