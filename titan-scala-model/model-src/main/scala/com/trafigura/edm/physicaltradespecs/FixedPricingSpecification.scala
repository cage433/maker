/**
 * WARNING: This file was automatically generated by the Trading Hub tooling version 2.15.
 * Any manual changes may be overwritten and lost!
 */


// Generated from model_object_scala.erb

package com.trafigura.edm.physicaltradespecs





import com.trafigura.tradinghub.support._
import scala.collection.JavaConversions._



/**
 A single quota may be broken into components, each of a different brand
As to why this is the only pricing spec with hedge requests... That is an open question
 */


 class FixedPricingSpecification extends com.trafigura.edm.physicaltradespecs.PricingSpecification  {
  


  
    

var comps:List[com.trafigura.edm.physicaltradespecs.FixedPriceComponent] = null
    
    
    

var hedges:List[com.trafigura.edm.physicaltradespecs.EDMHedgeRequest] = null
    
    
    

var premium:com.trafigura.edm.shared.types.Quantity = null
    
    





  override def equals(o: Any) = o match {
    case r: AnyRef =>
        if (o.isInstanceOf[com.trafigura.edm.physicaltradespecs.FixedPricingSpecification]) {
            val that = r.asInstanceOf[com.trafigura.edm.physicaltradespecs.FixedPricingSpecification]
            that.canEqual(this) && this.comments == that.comments && this.comps == that.comps && this.currency == that.currency && this.fxOverrides == that.fxOverrides && this.hedges == that.hedges && this.ordinal == that.ordinal && this.premium == that.premium && this.quantity == that.quantity &&  true
        }
        else false
    case _ => false
  }

  override def canEqual(that : Any) = that.isInstanceOf[com.trafigura.edm.physicaltradespecs.FixedPricingSpecification]

  override def hashCode = {
    (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 *  1
    ) +
         (if (comments == null) 0 else comments.hashCode) 
    ) +
         (if (comps == null) 0 else comps.hashCode) 
    ) +
         (if (currency == null) 0 else currency.hashCode) 
    ) +
         (if (fxOverrides == null) 0 else fxOverrides.hashCode) 
    ) +
         (if (hedges == null) 0 else hedges.hashCode) 
    ) +
         ordinal.hashCode
        
    ) +
         (if (premium == null) 0 else premium.hashCode) 
    ) +
         (if (quantity == null) 0 else quantity.hashCode) 
    
  }

  override def toString = {
    "{com.trafigura.edm.physicaltradespecs.FixedPricingSpecification: " + "" + "comments = " + comments + ", " + "comps = " + comps + ", " + "currency = " + currency + ", " + "fxOverrides = " + fxOverrides + ", " + "hedges = " + hedges + ", " + "ordinal = " + ordinal + ", " + "premium = " + premium + ", " + "quantity = " + quantity +  "}"
  }


  
        override def toJson() : org.codehaus.jettison.json.JSONObject = {
      toJson(new SerialisationHelper)
    }

    override def toJson(differentiator: SerialisationHelper) : org.codehaus.jettison.json.JSONObject = {
        var result = super.toJson(differentiator);

        result.put("_node", differentiator.idFor(this))

        result.put("Type", "EDM.PhysicalTradeSpecs.FixedPricingSpecification@1@1.0")
        
          
          
          
          
            result.putOpt("Comps", new org.codehaus.jettison.json.JSONArray(if(this.comps == null) new java.util.ArrayList() else java.util.Arrays.asList(this.comps.map(t => (t) match { case null => null; case o => o.toJson(differentiator) }).toArray: _*)));
          
        
          
          
          
          
            result.putOpt("Hedges", new org.codehaus.jettison.json.JSONArray(if(this.hedges == null) new java.util.ArrayList() else java.util.Arrays.asList(this.hedges.map(t => (t) match { case null => null; case o => o.toJson(differentiator) }).toArray: _*)));
          
        
          
          
          
          
            result.putOpt("Premium", (this.premium) match { case null => null; case o => o.toJson(differentiator) });
          
        
        return result;
    }

    override def loadJson(jobj : org.codehaus.jettison.json.JSONObject, cache: DeserialisationHelper) = {
        
            super.loadJson(jobj, cache);
        
        
          
              comps = JSONConversions.optionalList(jobj.opt("Comps"), x => (x) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.edm.physicaltradespecs.FixedPriceComponent.fromJson(o, cache))) })
          
              hedges = JSONConversions.optionalList(jobj.opt("Hedges"), x => (x) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.edm.physicaltradespecs.EDMHedgeRequest.fromJson(o, cache))) })
          
              premium = (jobj.opt("Premium")) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.edm.shared.types.Quantity.fromJson(o, cache))) }
          
        
    }

  
}

object FixedPricingSpecification {
  def version = ModelVersion("1")
  def wireFormatVersion = ModelVersion("1.0")

  
        val jsonTypeName = "EDM.PhysicalTradeSpecs.FixedPricingSpecification"

    def fromJson(jobj : org.codehaus.jettison.json.JSONObject, cache: DeserialisationHelper = new DeserialisationHelper) : com.trafigura.edm.physicaltradespecs.FixedPricingSpecification = {
      val v = TypeHolder(jobj.optString("Type"))

      v.assertModelVersion(version, "com.trafigura.edm.physicaltradespecs.FixedPricingSpecification")
      v.assertWireFormatVersion(wireFormatVersion, "com.trafigura.edm.physicaltradespecs.FixedPricingSpecification")

      
        
              v.typeName match {
              
                case _ =>
                  
                     val result = new com.trafigura.edm.physicaltradespecs.FixedPricingSpecification()
                     result.loadJson(jobj, cache)
                     result
                  
            }
        
      
    }

  

  

  
    def apply(comps: List[com.trafigura.edm.physicaltradespecs.FixedPriceComponent] = null, hedges: List[com.trafigura.edm.physicaltradespecs.EDMHedgeRequest] = null, premium: com.trafigura.edm.shared.types.Quantity = null) = {
      val res = new com.trafigura.edm.physicaltradespecs.FixedPricingSpecification
      
        res.comps = comps
      
        res.hedges = hedges
      
        res.premium = premium
      
      res
    }
  
}
