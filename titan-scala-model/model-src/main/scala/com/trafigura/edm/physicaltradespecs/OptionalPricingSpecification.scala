/**
 * WARNING: This file was automatically generated by the Trading Hub tooling version 2.15.
 * Any manual changes may be overwritten and lost!
 */


// Generated from model_object_scala.erb

package com.trafigura.edm.physicaltradespecs





import com.trafigura.tradinghub.support._
import scala.collection.JavaConversions._



/**
 Represents the case where one party has the right to choose from a number
of different pricing specifications by some decision day.
Until the exercise is done pricing will use the first element in 'choices'. 
 */


 class OptionalPricingSpecification extends com.trafigura.tradinghub.support.ModelObject  {
  


  
    
    /**
     field 'oid',                            :integer, :identifier => true
     */

var optionality:OptionalPricingSpecificationOptionalityEnum = null
    
    
    
    /**
     declarationBy might need to be a rule that maps a shipping month to a date
     */

var declarationBy:org.joda.time.LocalDate = null
    
    
    

var choices:List[com.trafigura.edm.physicaltradespecs.PricingSpecification] = null
    
    
    
    /**
     This field is populated once the choice has been made
     */

var chosenSpec:com.trafigura.edm.physicaltradespecs.PricingSpecification = null
    
    





  override def equals(o: Any) = o match {
    case r: AnyRef =>
        if (o.isInstanceOf[com.trafigura.edm.physicaltradespecs.OptionalPricingSpecification]) {
            val that = r.asInstanceOf[com.trafigura.edm.physicaltradespecs.OptionalPricingSpecification]
            that.canEqual(this) && this.choices == that.choices && this.chosenSpec == that.chosenSpec && this.declarationBy == that.declarationBy && this.optionality == that.optionality &&  true
        }
        else false
    case _ => false
  }

  override def canEqual(that : Any) = that.isInstanceOf[com.trafigura.edm.physicaltradespecs.OptionalPricingSpecification]

  override def hashCode = {
    (41 * (41 * (41 * (41 *  1
    ) +
         (if (choices == null) 0 else choices.hashCode) 
    ) +
         (if (chosenSpec == null) 0 else chosenSpec.hashCode) 
    ) +
         (if (declarationBy == null) 0 else declarationBy.hashCode) 
    ) +
         (if (optionality == null) 0 else optionality.hashCode) 
    
  }

  override def toString = {
    "{com.trafigura.edm.physicaltradespecs.OptionalPricingSpecification: " + "" + "choices = " + choices + ", " + "chosenSpec = " + chosenSpec + ", " + "declarationBy = " + declarationBy + ", " + "optionality = " + optionality +  "}"
  }


  
         def toJson() : org.codehaus.jettison.json.JSONObject = {
      toJson(new SerialisationHelper)
    }

     def toJson(differentiator: SerialisationHelper) : org.codehaus.jettison.json.JSONObject = {
        var result = new org.codehaus.jettison.json.JSONObject();

        result.put("_node", differentiator.idFor(this))

        result.put("Type", "EDM.PhysicalTradeSpecs.OptionalPricingSpecification@1@1.0")
        
          
          
          
          
            result.putOpt("Optionality", (this.optionality) match { case null => null; case o => o.toJson });
          
        
          
          
          
          
            result.putOpt("DeclarationBy", JSONConversions.optionalDateToJSON(this.declarationBy));
          
        
          
          
          
          
            result.putOpt("Choices", new org.codehaus.jettison.json.JSONArray(if(this.choices == null) new java.util.ArrayList() else java.util.Arrays.asList(this.choices.map(t => (t) match { case null => null; case o => o.toJson(differentiator) }).toArray: _*)));
          
        
          
          
          
          
            result.putOpt("ChosenSpec", (this.chosenSpec) match { case null => null; case o => o.toJson(differentiator) });
          
        
        return result;
    }

     def loadJson(jobj : org.codehaus.jettison.json.JSONObject, cache: DeserialisationHelper) = {
        
        
          
              optionality = (jobj.optString("Optionality")) match { case null => null; case s: String => OptionalPricingSpecificationOptionalityEnum.forName(s) }
          
              declarationBy = JSONConversions.optionalDate(jobj.opt("DeclarationBy"))
          
              choices = JSONConversions.optionalList(jobj.opt("Choices"), x => (x) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.edm.physicaltradespecs.PricingSpecification.fromJson(o, cache))) })
          
              chosenSpec = (jobj.opt("ChosenSpec")) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.edm.physicaltradespecs.PricingSpecification.fromJson(o, cache))) }
          
        
    }

  
}

object OptionalPricingSpecification {
  def version = ModelVersion("1")
  def wireFormatVersion = ModelVersion("1.0")

  
        val jsonTypeName = "EDM.PhysicalTradeSpecs.OptionalPricingSpecification"

    def fromJson(jobj : org.codehaus.jettison.json.JSONObject, cache: DeserialisationHelper = new DeserialisationHelper) : com.trafigura.edm.physicaltradespecs.OptionalPricingSpecification = {
      val v = TypeHolder(jobj.optString("Type"))

      v.assertModelVersion(version, "com.trafigura.edm.physicaltradespecs.OptionalPricingSpecification")
      v.assertWireFormatVersion(wireFormatVersion, "com.trafigura.edm.physicaltradespecs.OptionalPricingSpecification")

      
        
            val result = new com.trafigura.edm.physicaltradespecs.OptionalPricingSpecification()
            result.loadJson(jobj, cache)
            result
        
      
    }

  

  

  
    def apply(optionality: OptionalPricingSpecificationOptionalityEnum = null, declarationBy: org.joda.time.LocalDate = null, choices: List[com.trafigura.edm.physicaltradespecs.PricingSpecification] = null, chosenSpec: com.trafigura.edm.physicaltradespecs.PricingSpecification = null) = {
      val res = new com.trafigura.edm.physicaltradespecs.OptionalPricingSpecification
      
        res.optionality = optionality
      
        res.declarationBy = declarationBy
      
        res.choices = choices
      
        res.chosenSpec = chosenSpec
      
      res
    }
  
}
