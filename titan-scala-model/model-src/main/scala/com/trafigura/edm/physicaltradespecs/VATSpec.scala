/**
 * WARNING: This file was automatically generated by the Trading Hub tooling version 2.15.
 * Any manual changes may be overwritten and lost!
 */


// Generated from model_object_scala.erb

package com.trafigura.edm.physicaltradespecs





import com.trafigura.tradinghub.support._
import scala.collection.JavaConversions._




 class VATSpec extends com.trafigura.tradinghub.support.ModelObject  {
  


  
    

var invoiceDate:org.joda.time.LocalDate = null
    
    
    

var invoiceType:VATSpecInvoiceTypeEnum = null
    
    





  override def equals(o: Any) = o match {
    case r: AnyRef =>
        if (o.isInstanceOf[com.trafigura.edm.physicaltradespecs.VATSpec]) {
            val that = r.asInstanceOf[com.trafigura.edm.physicaltradespecs.VATSpec]
            that.canEqual(this) && this.invoiceDate == that.invoiceDate && this.invoiceType == that.invoiceType &&  true
        }
        else false
    case _ => false
  }

  override def canEqual(that : Any) = that.isInstanceOf[com.trafigura.edm.physicaltradespecs.VATSpec]

  override def hashCode = {
    (41 * (41 *  1
    ) +
         (if (invoiceDate == null) 0 else invoiceDate.hashCode) 
    ) +
         (if (invoiceType == null) 0 else invoiceType.hashCode) 
    
  }

  override def toString = {
    "{com.trafigura.edm.physicaltradespecs.VATSpec: " + "" + "invoiceDate = " + invoiceDate + ", " + "invoiceType = " + invoiceType +  "}"
  }


  
         def toJson() : org.codehaus.jettison.json.JSONObject = {
      toJson(new SerialisationHelper)
    }

     def toJson(differentiator: SerialisationHelper) : org.codehaus.jettison.json.JSONObject = {
        var result = new org.codehaus.jettison.json.JSONObject();

        result.put("_node", differentiator.idFor(this))

        result.put("Type", "EDM.PhysicalTradeSpecs.VATSpec@1@1.0")
        
          
          
          
          
            result.putOpt("InvoiceDate", JSONConversions.optionalDateToJSON(this.invoiceDate));
          
        
          
          
          
          
            result.putOpt("InvoiceType", (this.invoiceType) match { case null => null; case o => o.toJson });
          
        
        return result;
    }

     def loadJson(jobj : org.codehaus.jettison.json.JSONObject, cache: DeserialisationHelper) = {
        
        
          
              invoiceDate = JSONConversions.optionalDate(jobj.opt("InvoiceDate"))
          
              invoiceType = (jobj.optString("InvoiceType")) match { case null => null; case s: String => VATSpecInvoiceTypeEnum.forName(s) }
          
        
    }

  
}

object VATSpec {
  def version = ModelVersion("1")
  def wireFormatVersion = ModelVersion("1.0")

  
        val jsonTypeName = "EDM.PhysicalTradeSpecs.VATSpec"

    def fromJson(jobj : org.codehaus.jettison.json.JSONObject, cache: DeserialisationHelper = new DeserialisationHelper) : com.trafigura.edm.physicaltradespecs.VATSpec = {
      val v = TypeHolder(jobj.optString("Type"))

      v.assertModelVersion(version, "com.trafigura.edm.physicaltradespecs.VATSpec")
      v.assertWireFormatVersion(wireFormatVersion, "com.trafigura.edm.physicaltradespecs.VATSpec")

      
        
            val result = new com.trafigura.edm.physicaltradespecs.VATSpec()
            result.loadJson(jobj, cache)
            result
        
      
    }

  

  

  
    def apply(invoiceDate: org.joda.time.LocalDate = null, invoiceType: VATSpecInvoiceTypeEnum = null) = {
      val res = new com.trafigura.edm.physicaltradespecs.VATSpec
      
        res.invoiceDate = invoiceDate
      
        res.invoiceType = invoiceType
      
      res
    }
  
}
