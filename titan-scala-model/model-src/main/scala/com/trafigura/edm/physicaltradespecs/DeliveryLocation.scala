/**
 * WARNING: This file was automatically generated by the Trading Hub tooling version 2.15.
 * Any manual changes may be overwritten and lost!
 */


// Generated from model_object_scala.erb

package com.trafigura.edm.physicaltradespecs





import com.trafigura.tradinghub.support._
import scala.collection.JavaConversions._




 class DeliveryLocation extends com.trafigura.tradinghub.support.ModelObject  {
  


  
    

var location:GUID = null
    
    
    

var incoterm:String = null
    
    
    

var dutyPaid:Boolean = false
    
    





  override def equals(o: Any) = o match {
    case r: AnyRef =>
        if (o.isInstanceOf[com.trafigura.edm.physicaltradespecs.DeliveryLocation]) {
            val that = r.asInstanceOf[com.trafigura.edm.physicaltradespecs.DeliveryLocation]
            that.canEqual(this) && this.dutyPaid == that.dutyPaid && this.incoterm == that.incoterm && this.location == that.location &&  true
        }
        else false
    case _ => false
  }

  override def canEqual(that : Any) = that.isInstanceOf[com.trafigura.edm.physicaltradespecs.DeliveryLocation]

  override def hashCode = {
    (41 * (41 * (41 *  1
    ) +
         dutyPaid.hashCode
        
    ) +
         (if (incoterm == null) 0 else incoterm.hashCode) 
    ) +
         (if (location == null) 0 else location.hashCode) 
    
  }

  override def toString = {
    "{com.trafigura.edm.physicaltradespecs.DeliveryLocation: " + "" + "dutyPaid = " + dutyPaid + ", " + "incoterm = " + incoterm + ", " + "location = " + location +  "}"
  }


  
         def toJson() : org.codehaus.jettison.json.JSONObject = {
      toJson(new SerialisationHelper)
    }

     def toJson(differentiator: SerialisationHelper) : org.codehaus.jettison.json.JSONObject = {
        var result = new org.codehaus.jettison.json.JSONObject();

        result.put("_node", differentiator.idFor(this))

        result.put("Type", "EDM.PhysicalTradeSpecs.DeliveryLocation@1@1.0")
        
          
          
          
          
            result.putOpt("Location", if (this.location == null) null else this.location.toJson);
          
        
          
          
          
          
            result.putOpt("Incoterm", this.incoterm);
          
        
          
          
          
          
            result.putOpt("DutyPaid", this.dutyPaid);
          
        
        return result;
    }

     def loadJson(jobj : org.codehaus.jettison.json.JSONObject, cache: DeserialisationHelper) = {
        
        
          
              location = if (jobj.opt("Location") == null) null else GUID(JSONConversions.optional[String](jobj.opt("Location"), null))
          
              incoterm = JSONConversions.optional[String](jobj.opt("Incoterm"), null)
          
              dutyPaid = JSONConversions.optional[Boolean](jobj.opt("DutyPaid"), false)
          
        
    }

  
}

object DeliveryLocation {
  def version = ModelVersion("1")
  def wireFormatVersion = ModelVersion("1.0")

  
        val jsonTypeName = "EDM.PhysicalTradeSpecs.DeliveryLocation"

    def fromJson(jobj : org.codehaus.jettison.json.JSONObject, cache: DeserialisationHelper = new DeserialisationHelper) : com.trafigura.edm.physicaltradespecs.DeliveryLocation = {
      val v = TypeHolder(jobj.optString("Type"))

      v.assertModelVersion(version, "com.trafigura.edm.physicaltradespecs.DeliveryLocation")
      v.assertWireFormatVersion(wireFormatVersion, "com.trafigura.edm.physicaltradespecs.DeliveryLocation")

      
        
            val result = new com.trafigura.edm.physicaltradespecs.DeliveryLocation()
            result.loadJson(jobj, cache)
            result
        
      
    }

  

  

  
    def apply(location: GUID = null, incoterm: String = null, dutyPaid: Boolean = false) = {
      val res = new com.trafigura.edm.physicaltradespecs.DeliveryLocation
      
        res.location = location
      
        res.incoterm = incoterm
      
        res.dutyPaid = dutyPaid
      
      res
    }
  
}
