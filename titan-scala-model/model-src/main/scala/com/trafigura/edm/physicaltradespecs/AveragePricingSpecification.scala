/**
 * WARNING: This file was automatically generated by the Trading Hub tooling version 2.15.
 * Any manual changes may be overwritten and lost!
 */


// Generated from model_object_scala.erb

package com.trafigura.edm.physicaltradespecs





import com.trafigura.tradinghub.support._
import scala.collection.JavaConversions._




 class AveragePricingSpecification extends com.trafigura.edm.physicaltradespecs.PricingSpecification  {
  


  
    

var fixations:List[com.trafigura.edm.physicaltradespecs.AveragePricingFixation] = null
    
    
    

var index:AveragePricingSpecificationIndexEnum = null
    
    





  override def equals(o: Any) = o match {
    case r: AnyRef =>
        if (o.isInstanceOf[com.trafigura.edm.physicaltradespecs.AveragePricingSpecification]) {
            val that = r.asInstanceOf[com.trafigura.edm.physicaltradespecs.AveragePricingSpecification]
            that.canEqual(this) && this.comments == that.comments && this.currency == that.currency && this.fixations == that.fixations && this.fxOverrides == that.fxOverrides && this.index == that.index && this.ordinal == that.ordinal && this.quantity == that.quantity &&  true
        }
        else false
    case _ => false
  }

  override def canEqual(that : Any) = that.isInstanceOf[com.trafigura.edm.physicaltradespecs.AveragePricingSpecification]

  override def hashCode = {
    (41 * (41 * (41 * (41 * (41 * (41 * (41 *  1
    ) +
         (if (comments == null) 0 else comments.hashCode) 
    ) +
         (if (currency == null) 0 else currency.hashCode) 
    ) +
         (if (fixations == null) 0 else fixations.hashCode) 
    ) +
         (if (fxOverrides == null) 0 else fxOverrides.hashCode) 
    ) +
         (if (index == null) 0 else index.hashCode) 
    ) +
         ordinal.hashCode
        
    ) +
         (if (quantity == null) 0 else quantity.hashCode) 
    
  }

  override def toString = {
    "{com.trafigura.edm.physicaltradespecs.AveragePricingSpecification: " + "" + "comments = " + comments + ", " + "currency = " + currency + ", " + "fixations = " + fixations + ", " + "fxOverrides = " + fxOverrides + ", " + "index = " + index + ", " + "ordinal = " + ordinal + ", " + "quantity = " + quantity +  "}"
  }


  
        override def toJson() : org.codehaus.jettison.json.JSONObject = {
      toJson(new SerialisationHelper)
    }

    override def toJson(differentiator: SerialisationHelper) : org.codehaus.jettison.json.JSONObject = {
        var result = super.toJson(differentiator);

        result.put("_node", differentiator.idFor(this))

        result.put("Type", "EDM.PhysicalTradeSpecs.AveragePricingSpecification@1@1.0")
        
          
          
          
          
            result.putOpt("Fixations", new org.codehaus.jettison.json.JSONArray(if(this.fixations == null) new java.util.ArrayList() else java.util.Arrays.asList(this.fixations.map(t => (t) match { case null => null; case o => o.toJson(differentiator) }).toArray: _*)));
          
        
          
          
          
          
            result.putOpt("Index", (this.index) match { case null => null; case o => o.toJson });
          
        
        return result;
    }

    override def loadJson(jobj : org.codehaus.jettison.json.JSONObject, cache: DeserialisationHelper) = {
        
            super.loadJson(jobj, cache);
        
        
          
              fixations = JSONConversions.optionalList(jobj.opt("Fixations"), x => (x) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.edm.physicaltradespecs.AveragePricingFixation.fromJson(o, cache))) })
          
              index = (jobj.optString("Index")) match { case null => null; case s: String => AveragePricingSpecificationIndexEnum.forName(s) }
          
        
    }

  
}

object AveragePricingSpecification {
  def version = ModelVersion("1")
  def wireFormatVersion = ModelVersion("1.0")

  
        val jsonTypeName = "EDM.PhysicalTradeSpecs.AveragePricingSpecification"

    def fromJson(jobj : org.codehaus.jettison.json.JSONObject, cache: DeserialisationHelper = new DeserialisationHelper) : com.trafigura.edm.physicaltradespecs.AveragePricingSpecification = {
      val v = TypeHolder(jobj.optString("Type"))

      v.assertModelVersion(version, "com.trafigura.edm.physicaltradespecs.AveragePricingSpecification")
      v.assertWireFormatVersion(wireFormatVersion, "com.trafigura.edm.physicaltradespecs.AveragePricingSpecification")

      
        
              v.typeName match {
              
                case "EDM.PhysicalTradeSpecs.MonthAveragePricingSpecification" =>
                  
                     val result = new com.trafigura.edm.physicaltradespecs.MonthAveragePricingSpecification()
                     result.loadJson(jobj, cache)
                     result
                  
              
                case "EDM.PhysicalTradeSpecs.PartialAveragePricingSpecification" =>
                  
                     val result = new com.trafigura.edm.physicaltradespecs.PartialAveragePricingSpecification()
                     result.loadJson(jobj, cache)
                     result
                  
              
                case _ =>
                  
                     val result = new com.trafigura.edm.physicaltradespecs.AveragePricingSpecification()
                     result.loadJson(jobj, cache)
                     result
                  
            }
        
      
    }

  

  

  
    def apply(fixations: List[com.trafigura.edm.physicaltradespecs.AveragePricingFixation] = null, index: AveragePricingSpecificationIndexEnum = null) = {
      val res = new com.trafigura.edm.physicaltradespecs.AveragePricingSpecification
      
        res.fixations = fixations
      
        res.index = index
      
      res
    }
  
}
