/**
 * WARNING: This file was automatically generated by the Trading Hub tooling version 2.15.
 * Any manual changes may be overwritten and lost!
 */


// Generated from model_object_scala.erb

package com.trafigura.edm.physicaltradespecs





import com.trafigura.tradinghub.support._
import scala.collection.JavaConversions._



/**
 Pricing specs with an FX component may use a rate other than that day's ECB fixing
 */


 class FxOverride extends com.trafigura.tradinghub.support.ModelObject  {
  


  
    

var date:org.joda.time.LocalDate = null
    
    
    

var rate:com.trafigura.edm.shared.types.Quantity = null
    
    





  override def equals(o: Any) = o match {
    case r: AnyRef =>
        if (o.isInstanceOf[com.trafigura.edm.physicaltradespecs.FxOverride]) {
            val that = r.asInstanceOf[com.trafigura.edm.physicaltradespecs.FxOverride]
            that.canEqual(this) && this.date == that.date && this.rate == that.rate &&  true
        }
        else false
    case _ => false
  }

  override def canEqual(that : Any) = that.isInstanceOf[com.trafigura.edm.physicaltradespecs.FxOverride]

  override def hashCode = {
    (41 * (41 *  1
    ) +
         (if (date == null) 0 else date.hashCode) 
    ) +
         (if (rate == null) 0 else rate.hashCode) 
    
  }

  override def toString = {
    "{com.trafigura.edm.physicaltradespecs.FxOverride: " + "" + "date = " + date + ", " + "rate = " + rate +  "}"
  }


  
         def toJson() : org.codehaus.jettison.json.JSONObject = {
      toJson(new SerialisationHelper)
    }

     def toJson(differentiator: SerialisationHelper) : org.codehaus.jettison.json.JSONObject = {
        var result = new org.codehaus.jettison.json.JSONObject();

        result.put("_node", differentiator.idFor(this))

        result.put("Type", "EDM.PhysicalTradeSpecs.FxOverride@1@1.0")
        
          
          
          
          
            result.putOpt("Date", JSONConversions.optionalDateToJSON(this.date));
          
        
          
          
          
          
            result.putOpt("Rate", (this.rate) match { case null => null; case o => o.toJson(differentiator) });
          
        
        return result;
    }

     def loadJson(jobj : org.codehaus.jettison.json.JSONObject, cache: DeserialisationHelper) = {
        
        
          
              date = JSONConversions.optionalDate(jobj.opt("Date"))
          
              rate = (jobj.opt("Rate")) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.edm.shared.types.Quantity.fromJson(o, cache))) }
          
        
    }

  
}

object FxOverride {
  def version = ModelVersion("1")
  def wireFormatVersion = ModelVersion("1.0")

  
        val jsonTypeName = "EDM.PhysicalTradeSpecs.FxOverride"

    def fromJson(jobj : org.codehaus.jettison.json.JSONObject, cache: DeserialisationHelper = new DeserialisationHelper) : com.trafigura.edm.physicaltradespecs.FxOverride = {
      val v = TypeHolder(jobj.optString("Type"))

      v.assertModelVersion(version, "com.trafigura.edm.physicaltradespecs.FxOverride")
      v.assertWireFormatVersion(wireFormatVersion, "com.trafigura.edm.physicaltradespecs.FxOverride")

      
        
            val result = new com.trafigura.edm.physicaltradespecs.FxOverride()
            result.loadJson(jobj, cache)
            result
        
      
    }

  

  

  
    def apply(date: org.joda.time.LocalDate = null, rate: com.trafigura.edm.shared.types.Quantity = null) = {
      val res = new com.trafigura.edm.physicaltradespecs.FxOverride
      
        res.date = date
      
        res.rate = rate
      
      res
    }
  
}
