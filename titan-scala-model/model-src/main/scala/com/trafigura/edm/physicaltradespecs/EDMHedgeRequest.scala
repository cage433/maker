/**
 * WARNING: This file was automatically generated by the Trading Hub tooling version 2.15.
 * Any manual changes may be overwritten and lost!
 */


// Generated from model_object_scala.erb

package com.trafigura.edm.physicaltradespecs





import com.trafigura.tradinghub.support._
import scala.collection.JavaConversions._



/**
 EDM model for initial FPC implementation
Initial fragment of the EDM namespace for the Titan 1.3 FPC implementation
Represents a single hedge request element
 */


 abstract class EDMHedgeRequest extends com.trafigura.tradinghub.support.ModelObject  {
  


  
    

var ordinal:Int = 0
    
    
    

var contractMonthName:String = null
    
    
    

var hedgePrice:com.trafigura.edm.shared.types.Quantity = null
    
    
    
    /**
     This is currently just exchange - this will change (tactically) to an index, e.g. LME PB 3 mth bid, until
we get the proper structure from SRD
     */

var market:String = null
    
    
    

var direction:String = null
    
    





  override def equals(o: Any) = o match {
    case r: AnyRef =>
        if (o.isInstanceOf[com.trafigura.edm.physicaltradespecs.EDMHedgeRequest]) {
            val that = r.asInstanceOf[com.trafigura.edm.physicaltradespecs.EDMHedgeRequest]
            that.canEqual(this) && this.contractMonthName == that.contractMonthName && this.direction == that.direction && this.hedgePrice == that.hedgePrice && this.market == that.market && this.ordinal == that.ordinal &&  true
        }
        else false
    case _ => false
  }

  override def canEqual(that : Any) = that.isInstanceOf[com.trafigura.edm.physicaltradespecs.EDMHedgeRequest]

  override def hashCode = {
    (41 * (41 * (41 * (41 * (41 *  1
    ) +
         (if (contractMonthName == null) 0 else contractMonthName.hashCode) 
    ) +
         (if (direction == null) 0 else direction.hashCode) 
    ) +
         (if (hedgePrice == null) 0 else hedgePrice.hashCode) 
    ) +
         (if (market == null) 0 else market.hashCode) 
    ) +
         ordinal.hashCode
        
    
  }

  override def toString = {
    "{com.trafigura.edm.physicaltradespecs.EDMHedgeRequest: " + "" + "contractMonthName = " + contractMonthName + ", " + "direction = " + direction + ", " + "hedgePrice = " + hedgePrice + ", " + "market = " + market + ", " + "ordinal = " + ordinal +  "}"
  }


  
         def toJson() : org.codehaus.jettison.json.JSONObject = {
      toJson(new SerialisationHelper)
    }

     def toJson(differentiator: SerialisationHelper) : org.codehaus.jettison.json.JSONObject = {
        var result = new org.codehaus.jettison.json.JSONObject();

        result.put("_node", differentiator.idFor(this))

        result.put("Type", "EDM.PhysicalTradeSpecs.EDMHedgeRequest@1@1.0")
        
          
          
          
          
            result.putOpt("Ordinal", this.ordinal);
          
        
          
          
          
          
            result.putOpt("ContractMonthName", this.contractMonthName);
          
        
          
          
          
          
            result.putOpt("HedgePrice", (this.hedgePrice) match { case null => null; case o => o.toJson(differentiator) });
          
        
          
          
          
          
            result.putOpt("Market", this.market);
          
        
          
          
          
          
            result.putOpt("Direction", this.direction);
          
        
        return result;
    }

     def loadJson(jobj : org.codehaus.jettison.json.JSONObject, cache: DeserialisationHelper) = {
        
        
          
              ordinal = JSONConversions.optional[Int](jobj.opt("Ordinal"), 0)
          
              contractMonthName = JSONConversions.optional[String](jobj.opt("ContractMonthName"), null)
          
              hedgePrice = (jobj.opt("HedgePrice")) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.edm.shared.types.Quantity.fromJson(o, cache))) }
          
              market = JSONConversions.optional[String](jobj.opt("Market"), null)
          
              direction = JSONConversions.optional[String](jobj.opt("Direction"), null)
          
        
    }

  
}

object EDMHedgeRequest {
  def version = ModelVersion("1")
  def wireFormatVersion = ModelVersion("1.0")

  
        val jsonTypeName = "EDM.PhysicalTradeSpecs.EDMHedgeRequest"

    def fromJson(jobj : org.codehaus.jettison.json.JSONObject, cache: DeserialisationHelper = new DeserialisationHelper) : com.trafigura.edm.physicaltradespecs.EDMHedgeRequest = {
      val v = TypeHolder(jobj.optString("Type"))

      v.assertModelVersion(version, "com.trafigura.edm.physicaltradespecs.EDMHedgeRequest")
      v.assertWireFormatVersion(wireFormatVersion, "com.trafigura.edm.physicaltradespecs.EDMHedgeRequest")

      
        
              v.typeName match {
              
                case "EDM.PhysicalTradeSpecs.FxHedgeRequest" =>
                  
                     val result = new com.trafigura.edm.physicaltradespecs.FxHedgeRequest()
                     result.loadJson(jobj, cache)
                     result
                  
              
                case "EDM.PhysicalTradeSpecs.PhysicalHedgeRequest" =>
                  
                     val result = new com.trafigura.edm.physicaltradespecs.PhysicalHedgeRequest()
                     result.loadJson(jobj, cache)
                     result
                  
              
                case _ =>
                  
                    throw new RuntimeException("Tried to instantiate abstract class  com.trafigura.edm.physicaltradespecs.EDMHedgeRequest. Type name was "+v.typeName)
                  
            }
        
      
    }

  

  

  
}
