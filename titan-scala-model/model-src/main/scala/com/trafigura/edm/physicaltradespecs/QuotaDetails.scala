/**
 * WARNING: This file was automatically generated by the Trading Hub tooling version 2.15.
 * Any manual changes may be overwritten and lost!
 */


// Generated from model_object_scala.erb

package com.trafigura.edm.physicaltradespecs





import com.trafigura.tradinghub.support._
import scala.collection.JavaConversions._




 class QuotaDetails extends com.trafigura.tradinghub.support.ModelObject  {
  


  
    

var identifier:com.trafigura.edm.shared.types.TitanId = null
    
    
    

var comments:String = null
    
    
    

var quantityOptionality:QuotaDetailsQuantityOptionalityEnum = null
    
    
    

var tradeOptionality:QuotaDetailsTradeOptionalityEnum = null
    
    
    

var paymentSpec:com.trafigura.edm.paymentspecs.PaymentSpecification = null
    
    
    

var securityTerms:GUID = null
    
    
    
    /**
     1..*
     */

var deliverySpecs:List[com.trafigura.edm.physicaltradespecs.DeliverySpec] = null
    
    
    

var pricingSpec:com.trafigura.edm.physicaltradespecs.PricingSpecification = null
    
    
    
    /**
     This is used for pricing the corresponding sale/purchase for any unallocated part of this quota 
     */

var expectedTransferPricingSpec:com.trafigura.edm.physicaltradespecs.PricingSpecification = null
    
    
    

var vatSpec:com.trafigura.edm.physicaltradespecs.VATSpec = null
    
    
    

var benchmark:String = null
    
    
    

var expectedSales:com.trafigura.edm.shared.types.DateSpec = null
    
    





  override def equals(o: Any) = o match {
    case r: AnyRef =>
        if (o.isInstanceOf[com.trafigura.edm.physicaltradespecs.QuotaDetails]) {
            val that = r.asInstanceOf[com.trafigura.edm.physicaltradespecs.QuotaDetails]
            that.canEqual(this) && this.benchmark == that.benchmark && this.comments == that.comments && this.deliverySpecs == that.deliverySpecs && this.expectedSales == that.expectedSales && this.expectedTransferPricingSpec == that.expectedTransferPricingSpec && this.identifier == that.identifier && this.paymentSpec == that.paymentSpec && this.pricingSpec == that.pricingSpec && this.quantityOptionality == that.quantityOptionality && this.securityTerms == that.securityTerms && this.tradeOptionality == that.tradeOptionality && this.vatSpec == that.vatSpec &&  true
        }
        else false
    case _ => false
  }

  override def canEqual(that : Any) = that.isInstanceOf[com.trafigura.edm.physicaltradespecs.QuotaDetails]

  override def hashCode = {
    (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 *  1
    ) +
         (if (benchmark == null) 0 else benchmark.hashCode) 
    ) +
         (if (comments == null) 0 else comments.hashCode) 
    ) +
         (if (deliverySpecs == null) 0 else deliverySpecs.hashCode) 
    ) +
         (if (expectedSales == null) 0 else expectedSales.hashCode) 
    ) +
         (if (expectedTransferPricingSpec == null) 0 else expectedTransferPricingSpec.hashCode) 
    ) +
         (if (identifier == null) 0 else identifier.hashCode) 
    ) +
         (if (paymentSpec == null) 0 else paymentSpec.hashCode) 
    ) +
         (if (pricingSpec == null) 0 else pricingSpec.hashCode) 
    ) +
         (if (quantityOptionality == null) 0 else quantityOptionality.hashCode) 
    ) +
         (if (securityTerms == null) 0 else securityTerms.hashCode) 
    ) +
         (if (tradeOptionality == null) 0 else tradeOptionality.hashCode) 
    ) +
         (if (vatSpec == null) 0 else vatSpec.hashCode) 
    
  }

  override def toString = {
    "{com.trafigura.edm.physicaltradespecs.QuotaDetails: " + "" + "benchmark = " + benchmark + ", " + "comments = " + comments + ", " + "deliverySpecs = " + deliverySpecs + ", " + "expectedSales = " + expectedSales + ", " + "expectedTransferPricingSpec = " + expectedTransferPricingSpec + ", " + "identifier = " + identifier + ", " + "paymentSpec = " + paymentSpec + ", " + "pricingSpec = " + pricingSpec + ", " + "quantityOptionality = " + quantityOptionality + ", " + "securityTerms = " + securityTerms + ", " + "tradeOptionality = " + tradeOptionality + ", " + "vatSpec = " + vatSpec +  "}"
  }


  
         def toJson() : org.codehaus.jettison.json.JSONObject = {
      toJson(new SerialisationHelper)
    }

     def toJson(differentiator: SerialisationHelper) : org.codehaus.jettison.json.JSONObject = {
        var result = new org.codehaus.jettison.json.JSONObject();

        result.put("_node", differentiator.idFor(this))

        result.put("Type", "EDM.PhysicalTradeSpecs.QuotaDetails@1@1.0")
        
          
          
          
          
            result.putOpt("Id", (this.identifier) match { case null => null; case o => o.toJson(differentiator) });
          
        
          
          
          
          
            result.putOpt("Comments", this.comments);
          
        
          
          
          
          
            result.putOpt("QuantityOptionality", (this.quantityOptionality) match { case null => null; case o => o.toJson });
          
        
          
          
          
          
            result.putOpt("TradeOptionality", (this.tradeOptionality) match { case null => null; case o => o.toJson });
          
        
          
          
          
          
            result.putOpt("PaymentSpec", (this.paymentSpec) match { case null => null; case o => o.toJson(differentiator) });
          
        
          
          
          
          
            result.putOpt("SecurityTerms", if (this.securityTerms == null) null else this.securityTerms.toJson);
          
        
          
          
          
          
            result.putOpt("DeliverySpecs", new org.codehaus.jettison.json.JSONArray(if(this.deliverySpecs == null) new java.util.ArrayList() else java.util.Arrays.asList(this.deliverySpecs.map(t => (t) match { case null => null; case o => o.toJson(differentiator) }).toArray: _*)));
          
        
          
          
          
          
            result.putOpt("PricingSpec", (this.pricingSpec) match { case null => null; case o => o.toJson(differentiator) });
          
        
          
          
          
          
            result.putOpt("ExpectedTransferPricingSpec", (this.expectedTransferPricingSpec) match { case null => null; case o => o.toJson(differentiator) });
          
        
          
          
          
          
            result.putOpt("VatSpec", (this.vatSpec) match { case null => null; case o => o.toJson(differentiator) });
          
        
          
          
          
          
            result.putOpt("Benchmark", this.benchmark);
          
        
          
          
          
          
            result.putOpt("ExpectedSales", (this.expectedSales) match { case null => null; case o => o.toJson(differentiator) });
          
        
        return result;
    }

     def loadJson(jobj : org.codehaus.jettison.json.JSONObject, cache: DeserialisationHelper) = {
        
        
          
              identifier = (jobj.opt("Id")) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.edm.shared.types.TitanId.fromJson(o, cache))) }
          
              comments = JSONConversions.optional[String](jobj.opt("Comments"), null)
          
              quantityOptionality = (jobj.optString("QuantityOptionality")) match { case null => null; case s: String => QuotaDetailsQuantityOptionalityEnum.forName(s) }
          
              tradeOptionality = (jobj.optString("TradeOptionality")) match { case null => null; case s: String => QuotaDetailsTradeOptionalityEnum.forName(s) }
          
              paymentSpec = (jobj.opt("PaymentSpec")) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.edm.paymentspecs.PaymentSpecification.fromJson(o, cache))) }
          
              securityTerms = if (jobj.opt("SecurityTerms") == null) null else GUID(JSONConversions.optional[String](jobj.opt("SecurityTerms"), null))
          
              deliverySpecs = JSONConversions.optionalList(jobj.opt("DeliverySpecs"), x => (x) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.edm.physicaltradespecs.DeliverySpec.fromJson(o, cache))) })
          
              pricingSpec = (jobj.opt("PricingSpec")) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.edm.physicaltradespecs.PricingSpecification.fromJson(o, cache))) }
          
              expectedTransferPricingSpec = (jobj.opt("ExpectedTransferPricingSpec")) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.edm.physicaltradespecs.PricingSpecification.fromJson(o, cache))) }
          
              vatSpec = (jobj.opt("VatSpec")) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.edm.physicaltradespecs.VATSpec.fromJson(o, cache))) }
          
              benchmark = JSONConversions.optional[String](jobj.opt("Benchmark"), null)
          
              expectedSales = (jobj.opt("ExpectedSales")) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.edm.shared.types.DateSpec.fromJson(o, cache))) }
          
        
    }

  
}

object QuotaDetails {
  def version = ModelVersion("1")
  def wireFormatVersion = ModelVersion("1.0")

  
        val jsonTypeName = "EDM.PhysicalTradeSpecs.QuotaDetails"

    def fromJson(jobj : org.codehaus.jettison.json.JSONObject, cache: DeserialisationHelper = new DeserialisationHelper) : com.trafigura.edm.physicaltradespecs.QuotaDetails = {
      val v = TypeHolder(jobj.optString("Type"))

      v.assertModelVersion(version, "com.trafigura.edm.physicaltradespecs.QuotaDetails")
      v.assertWireFormatVersion(wireFormatVersion, "com.trafigura.edm.physicaltradespecs.QuotaDetails")

      
        
            val result = new com.trafigura.edm.physicaltradespecs.QuotaDetails()
            result.loadJson(jobj, cache)
            result
        
      
    }

  

  

  
    def apply(identifier: com.trafigura.edm.shared.types.TitanId = null, comments: String = null, quantityOptionality: QuotaDetailsQuantityOptionalityEnum = null, tradeOptionality: QuotaDetailsTradeOptionalityEnum = null, paymentSpec: com.trafigura.edm.paymentspecs.PaymentSpecification = null, securityTerms: GUID = null, deliverySpecs: List[com.trafigura.edm.physicaltradespecs.DeliverySpec] = null, pricingSpec: com.trafigura.edm.physicaltradespecs.PricingSpecification = null, expectedTransferPricingSpec: com.trafigura.edm.physicaltradespecs.PricingSpecification = null, vatSpec: com.trafigura.edm.physicaltradespecs.VATSpec = null, benchmark: String = null, expectedSales: com.trafigura.edm.shared.types.DateSpec = null) = {
      val res = new com.trafigura.edm.physicaltradespecs.QuotaDetails
      
        res.identifier = identifier
      
        res.comments = comments
      
        res.quantityOptionality = quantityOptionality
      
        res.tradeOptionality = tradeOptionality
      
        res.paymentSpec = paymentSpec
      
        res.securityTerms = securityTerms
      
        res.deliverySpecs = deliverySpecs
      
        res.pricingSpec = pricingSpec
      
        res.expectedTransferPricingSpec = expectedTransferPricingSpec
      
        res.vatSpec = vatSpec
      
        res.benchmark = benchmark
      
        res.expectedSales = expectedSales
      
      res
    }
  
}
