/**
 * WARNING: This file was automatically generated by the Trading Hub tooling version 2.15.
 * Any manual changes may be overwritten and lost!
 */


// Generated from model_object_scala.erb

package com.trafigura.edm.fpc





import com.trafigura.tradinghub.support._
import scala.collection.JavaConversions._



/**
 Represents a single hedge request element
 */


 abstract class HedgeRequest extends com.trafigura.tradinghub.support.ModelObject  {
  


  
    

var oid:Int = 0
    
    
    

var ordinal:Int = 0
    
    
    

var exchangeId:Int = 0
    
    
    

var contractMonthName:com.trafigura.edm.fpc.ContractMonthName = null
    
    
    

var hedgePrice:com.trafigura.edm.shared.types.EDMQuantity = null
    
    
    

var directionId:Int = 0
    
    
    

var hedgeRequestId:scala.Option[Int] = None
    
    





  override def equals(o: Any) = o match {
    case r: AnyRef =>
        if (o.isInstanceOf[com.trafigura.edm.fpc.HedgeRequest]) {
            val that = r.asInstanceOf[com.trafigura.edm.fpc.HedgeRequest]
            that.canEqual(this) && this.contractMonthName == that.contractMonthName && this.directionId == that.directionId && this.exchangeId == that.exchangeId && this.hedgePrice == that.hedgePrice && this.hedgeRequestId == that.hedgeRequestId && this.oid == that.oid && this.ordinal == that.ordinal &&  true
        }
        else false
    case _ => false
  }

  override def canEqual(that : Any) = that.isInstanceOf[com.trafigura.edm.fpc.HedgeRequest]

  override def hashCode = {
    (41 * (41 * (41 * (41 * (41 * (41 * (41 *  1
    ) +
         (if (contractMonthName == null) 0 else contractMonthName.hashCode) 
    ) +
         directionId.hashCode
        
    ) +
         exchangeId.hashCode
        
    ) +
         (if (hedgePrice == null) 0 else hedgePrice.hashCode) 
    ) +
         (if (hedgeRequestId == null) 0 else hedgeRequestId.hashCode) 
    ) +
         oid.hashCode
        
    ) +
         ordinal.hashCode
        
    
  }

  override def toString = {
    "{com.trafigura.edm.fpc.HedgeRequest: " + "" + "contractMonthName = " + contractMonthName + ", " + "directionId = " + directionId + ", " + "exchangeId = " + exchangeId + ", " + "hedgePrice = " + hedgePrice + ", " + "hedgeRequestId = " + hedgeRequestId + ", " + "oid = " + oid + ", " + "ordinal = " + ordinal +  "}"
  }


  
         def toJson() : org.codehaus.jettison.json.JSONObject = {
      toJson(new SerialisationHelper)
    }

     def toJson(differentiator: SerialisationHelper) : org.codehaus.jettison.json.JSONObject = {
        var result = new org.codehaus.jettison.json.JSONObject();

        result.put("_node", differentiator.idFor(this))

        result.put("Type", "EDM.FPC.HedgeRequest@1@1.0")
        
          
          
          
          
            result.putOpt("Oid", this.oid);
          
        
          
          
          
          
            result.putOpt("Ordinal", this.ordinal);
          
        
          
          
          
          
            result.putOpt("ExchangeId", this.exchangeId);
          
        
          
          
          
          
            result.putOpt("ContractMonthName", (this.contractMonthName) match { case null => null; case o => o.toJson(differentiator) });
          
        
          
          
          
          
            result.putOpt("HedgePrice", (this.hedgePrice) match { case null => null; case o => o.toJson(differentiator) });
          
        
          
          
          
          
            result.putOpt("DirectionId", this.directionId);
          
        
          
          
          
          
            result.putOpt("HedgeRequestId", this.hedgeRequestId.getOrElse(null));
          
        
        return result;
    }

     def loadJson(jobj : org.codehaus.jettison.json.JSONObject, cache: DeserialisationHelper) = {
        
        
          
              oid = JSONConversions.optional[Int](jobj.opt("Oid"), 0)
          
              ordinal = JSONConversions.optional[Int](jobj.opt("Ordinal"), 0)
          
              exchangeId = jobj.optInt("ExchangeId")
          
              contractMonthName = (jobj.opt("ContractMonthName")) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.edm.fpc.ContractMonthName.fromJson(o, cache))) }
          
              hedgePrice = (jobj.opt("HedgePrice")) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.edm.shared.types.EDMQuantity.fromJson(o, cache))) }
          
              directionId = jobj.optInt("DirectionId")
          
              hedgeRequestId = (jobj.opt("HedgeRequestId")) match {case null => None; case n:Number => Some(n.intValue()); case _ => None}
          
        
    }

  
}

object HedgeRequest {
  def version = ModelVersion("1")
  def wireFormatVersion = ModelVersion("1.0")

  
        val jsonTypeName = "EDM.FPC.HedgeRequest"

    def fromJson(jobj : org.codehaus.jettison.json.JSONObject, cache: DeserialisationHelper = new DeserialisationHelper) : com.trafigura.edm.fpc.HedgeRequest = {
      val v = TypeHolder(jobj.optString("Type"))

      v.assertModelVersion(version, "com.trafigura.edm.fpc.HedgeRequest")
      v.assertWireFormatVersion(wireFormatVersion, "com.trafigura.edm.fpc.HedgeRequest")

      
        
              v.typeName match {
              
                case "EDM.FPC.FxHedgeRequest" =>
                  
                     val result = new com.trafigura.edm.fpc.FxHedgeRequest()
                     result.loadJson(jobj, cache)
                     result
                  
              
                case "EDM.FPC.PhysicalHedgeRequest" =>
                  
                     val result = new com.trafigura.edm.fpc.PhysicalHedgeRequest()
                     result.loadJson(jobj, cache)
                     result
                  
              
                case _ =>
                  
                    throw new RuntimeException("Tried to instantiate abstract class  com.trafigura.edm.fpc.HedgeRequest. Type name was "+v.typeName)
                  
            }
        
      
    }

  

  

  
}
