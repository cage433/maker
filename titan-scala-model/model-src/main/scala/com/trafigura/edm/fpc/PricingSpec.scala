/**
 * WARNING: This file was automatically generated by the Trading Hub tooling version 2.15.
 * Any manual changes may be overwritten and lost!
 */


// Generated from model_object_scala.erb

package com.trafigura.edm.fpc





import com.trafigura.tradinghub.support._
import scala.collection.JavaConversions._



/**
 A pricing specification element
 */


 abstract class PricingSpec extends com.trafigura.tradinghub.support.ModelObject  {
  


  
    

var oid:Int = 0
    
    
    

var ordinal:Int = 0
    
    
    

var quantity:com.trafigura.tradecapture.internal.refinedmetal.Quantity = null
    
    
    

var currencyId:Int = 0
    
    
    

var comments:String = null
    
    
    

var premiumComments:String = null
    
    
    

var pricingFixations:List[com.trafigura.edm.fpc.PricingFixation] = null
    
    
    

var hedgeRequests:List[com.trafigura.edm.fpc.HedgeRequest] = null
    
    
    

var neptunePricingFixations:List[com.trafigura.edm.fpc.NeptunePricingFixation] = null
    
    
    

var neptuneHedgeRequests:List[com.trafigura.edm.fpc.NeptuneHedgeRequest] = null
    
    
    

var premium:com.trafigura.edm.shared.types.EDMQuantity = null
    
    





  override def equals(o: Any) = o match {
    case r: AnyRef =>
        if (o.isInstanceOf[com.trafigura.edm.fpc.PricingSpec]) {
            val that = r.asInstanceOf[com.trafigura.edm.fpc.PricingSpec]
            that.canEqual(this) && this.comments == that.comments && this.currencyId == that.currencyId && this.hedgeRequests == that.hedgeRequests && this.neptuneHedgeRequests == that.neptuneHedgeRequests && this.neptunePricingFixations == that.neptunePricingFixations && this.oid == that.oid && this.ordinal == that.ordinal && this.premium == that.premium && this.premiumComments == that.premiumComments && this.pricingFixations == that.pricingFixations && this.quantity == that.quantity &&  true
        }
        else false
    case _ => false
  }

  override def canEqual(that : Any) = that.isInstanceOf[com.trafigura.edm.fpc.PricingSpec]

  override def hashCode = {
    (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 *  1
    ) +
         (if (comments == null) 0 else comments.hashCode) 
    ) +
         currencyId.hashCode
        
    ) +
         (if (hedgeRequests == null) 0 else hedgeRequests.hashCode) 
    ) +
         (if (neptuneHedgeRequests == null) 0 else neptuneHedgeRequests.hashCode) 
    ) +
         (if (neptunePricingFixations == null) 0 else neptunePricingFixations.hashCode) 
    ) +
         oid.hashCode
        
    ) +
         ordinal.hashCode
        
    ) +
         (if (premium == null) 0 else premium.hashCode) 
    ) +
         (if (premiumComments == null) 0 else premiumComments.hashCode) 
    ) +
         (if (pricingFixations == null) 0 else pricingFixations.hashCode) 
    ) +
         (if (quantity == null) 0 else quantity.hashCode) 
    
  }

  override def toString = {
    "{com.trafigura.edm.fpc.PricingSpec: " + "" + "comments = " + comments + ", " + "currencyId = " + currencyId + ", " + "hedgeRequests = " + hedgeRequests + ", " + "neptuneHedgeRequests = " + neptuneHedgeRequests + ", " + "neptunePricingFixations = " + neptunePricingFixations + ", " + "oid = " + oid + ", " + "ordinal = " + ordinal + ", " + "premium = " + premium + ", " + "premiumComments = " + premiumComments + ", " + "pricingFixations = " + pricingFixations + ", " + "quantity = " + quantity +  "}"
  }


  
         def toJson() : org.codehaus.jettison.json.JSONObject = {
      toJson(new SerialisationHelper)
    }

     def toJson(differentiator: SerialisationHelper) : org.codehaus.jettison.json.JSONObject = {
        var result = new org.codehaus.jettison.json.JSONObject();

        result.put("_node", differentiator.idFor(this))

        result.put("Type", "EDM.FPC.PricingSpec@1@1.0")
        
          
          
          
          
            result.putOpt("Oid", this.oid);
          
        
          
          
          
          
            result.putOpt("Ordinal", this.ordinal);
          
        
          
          
          
          
            result.putOpt("Quantity", (this.quantity) match { case null => null; case o => o.toJson(differentiator) });
          
        
          
          
          
          
            result.putOpt("CurrencyId", this.currencyId);
          
        
          
          
          
          
            result.putOpt("Comments", this.comments);
          
        
          
          
          
          
            result.putOpt("PremiumComments", this.premiumComments);
          
        
          
          
          
          
            result.putOpt("PricingFixations", new org.codehaus.jettison.json.JSONArray(if(this.pricingFixations == null) new java.util.ArrayList() else java.util.Arrays.asList(this.pricingFixations.map(t => (t) match { case null => null; case o => o.toJson(differentiator) }).toArray: _*)));
          
        
          
          
          
          
            result.putOpt("HedgeRequests", new org.codehaus.jettison.json.JSONArray(if(this.hedgeRequests == null) new java.util.ArrayList() else java.util.Arrays.asList(this.hedgeRequests.map(t => (t) match { case null => null; case o => o.toJson(differentiator) }).toArray: _*)));
          
        
          
          
          
          
            result.putOpt("NeptunePricingFixations", new org.codehaus.jettison.json.JSONArray(if(this.neptunePricingFixations == null) new java.util.ArrayList() else java.util.Arrays.asList(this.neptunePricingFixations.map(t => (t) match { case null => null; case o => o.toJson(differentiator) }).toArray: _*)));
          
        
          
          
          
          
            result.putOpt("NeptuneHedgeRequests", new org.codehaus.jettison.json.JSONArray(if(this.neptuneHedgeRequests == null) new java.util.ArrayList() else java.util.Arrays.asList(this.neptuneHedgeRequests.map(t => (t) match { case null => null; case o => o.toJson(differentiator) }).toArray: _*)));
          
        
          
          
          
          
            result.putOpt("Premium", (this.premium) match { case null => null; case o => o.toJson(differentiator) });
          
        
        return result;
    }

     def loadJson(jobj : org.codehaus.jettison.json.JSONObject, cache: DeserialisationHelper) = {
        
        
          
              oid = JSONConversions.optional[Int](jobj.opt("Oid"), 0)
          
              ordinal = JSONConversions.optional[Int](jobj.opt("Ordinal"), 0)
          
              quantity = (jobj.opt("Quantity")) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.tradecapture.internal.refinedmetal.Quantity.fromJson(o, cache))) }
          
              currencyId = jobj.optInt("CurrencyId")
          
              comments = JSONConversions.optional[String](jobj.opt("Comments"), null)
          
              premiumComments = JSONConversions.optional[String](jobj.opt("PremiumComments"), null)
          
              pricingFixations = JSONConversions.optionalList(jobj.opt("PricingFixations"), x => (x) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.edm.fpc.PricingFixation.fromJson(o, cache))) })
          
              hedgeRequests = JSONConversions.optionalList(jobj.opt("HedgeRequests"), x => (x) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.edm.fpc.HedgeRequest.fromJson(o, cache))) })
          
              neptunePricingFixations = JSONConversions.optionalList(jobj.opt("NeptunePricingFixations"), x => (x) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.edm.fpc.NeptunePricingFixation.fromJson(o, cache))) })
          
              neptuneHedgeRequests = JSONConversions.optionalList(jobj.opt("NeptuneHedgeRequests"), x => (x) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.edm.fpc.NeptuneHedgeRequest.fromJson(o, cache))) })
          
              premium = (jobj.opt("Premium")) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.edm.shared.types.EDMQuantity.fromJson(o, cache))) }
          
        
    }

  
}

object PricingSpec {
  def version = ModelVersion("1")
  def wireFormatVersion = ModelVersion("1.0")

  
        val jsonTypeName = "EDM.FPC.PricingSpec"

    def fromJson(jobj : org.codehaus.jettison.json.JSONObject, cache: DeserialisationHelper = new DeserialisationHelper) : com.trafigura.edm.fpc.PricingSpec = {
      val v = TypeHolder(jobj.optString("Type"))

      v.assertModelVersion(version, "com.trafigura.edm.fpc.PricingSpec")
      v.assertWireFormatVersion(wireFormatVersion, "com.trafigura.edm.fpc.PricingSpec")

      
        
              v.typeName match {
              
                case "EDM.FPC.FixedPricing" =>
                  
                     val result = new com.trafigura.edm.fpc.FixedPricing()
                     result.loadJson(jobj, cache)
                     result
                  
              
                case "EDM.FPC.MonthAveragePricingSpec" =>
                  
                     val result = new com.trafigura.edm.fpc.MonthAveragePricingSpec()
                     result.loadJson(jobj, cache)
                     result
                  
              
                case "EDM.FPC.PartialAvePricingSpec" =>
                  
                     val result = new com.trafigura.edm.fpc.PartialAvePricingSpec()
                     result.loadJson(jobj, cache)
                     result
                  
              
                case "EDM.FPC.UnkPricingSpec" =>
                  
                     val result = new com.trafigura.edm.fpc.UnkPricingSpec()
                     result.loadJson(jobj, cache)
                     result
                  
              
                case _ =>
                  
                    throw new RuntimeException("Tried to instantiate abstract class  com.trafigura.edm.fpc.PricingSpec. Type name was "+v.typeName)
                  
            }
        
      
    }

  

  
  val CommentLength = 4000
  
  val PremiumCommentLength = 4000
  

  
}
