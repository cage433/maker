/**
 * WARNING: This file was automatically generated by the Trading Hub tooling version 2.15.
 * Any manual changes may be overwritten and lost!
 */


// Generated from model_object_scala.erb

package com.trafigura.edm.fpc





import com.trafigura.tradinghub.support._
import scala.collection.JavaConversions._




 class PartialAvePricingSpec extends com.trafigura.edm.fpc.PricingSpec  {
  


  
    

var marketId:Int = 0
    
    
    

var firstAveragingDay:org.joda.time.LocalDate = null
    
    
    

var lastAveragingDay:org.joda.time.LocalDate = null
    
    





  override def equals(o: Any) = o match {
    case r: AnyRef =>
        if (o.isInstanceOf[com.trafigura.edm.fpc.PartialAvePricingSpec]) {
            val that = r.asInstanceOf[com.trafigura.edm.fpc.PartialAvePricingSpec]
            that.canEqual(this) && this.comments == that.comments && this.currencyId == that.currencyId && this.firstAveragingDay == that.firstAveragingDay && this.hedgeRequests == that.hedgeRequests && this.lastAveragingDay == that.lastAveragingDay && this.marketId == that.marketId && this.neptuneHedgeRequests == that.neptuneHedgeRequests && this.neptunePricingFixations == that.neptunePricingFixations && this.oid == that.oid && this.ordinal == that.ordinal && this.premium == that.premium && this.premiumComments == that.premiumComments && this.pricingFixations == that.pricingFixations && this.quantity == that.quantity &&  true
        }
        else false
    case _ => false
  }

  override def canEqual(that : Any) = that.isInstanceOf[com.trafigura.edm.fpc.PartialAvePricingSpec]

  override def hashCode = {
    (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 *  1
    ) +
         (if (comments == null) 0 else comments.hashCode) 
    ) +
         currencyId.hashCode
        
    ) +
         (if (firstAveragingDay == null) 0 else firstAveragingDay.hashCode) 
    ) +
         (if (hedgeRequests == null) 0 else hedgeRequests.hashCode) 
    ) +
         (if (lastAveragingDay == null) 0 else lastAveragingDay.hashCode) 
    ) +
         marketId.hashCode
        
    ) +
         (if (neptuneHedgeRequests == null) 0 else neptuneHedgeRequests.hashCode) 
    ) +
         (if (neptunePricingFixations == null) 0 else neptunePricingFixations.hashCode) 
    ) +
         oid.hashCode
        
    ) +
         ordinal.hashCode
        
    ) +
         (if (premium == null) 0 else premium.hashCode) 
    ) +
         (if (premiumComments == null) 0 else premiumComments.hashCode) 
    ) +
         (if (pricingFixations == null) 0 else pricingFixations.hashCode) 
    ) +
         (if (quantity == null) 0 else quantity.hashCode) 
    
  }

  override def toString = {
    "{com.trafigura.edm.fpc.PartialAvePricingSpec: " + "" + "comments = " + comments + ", " + "currencyId = " + currencyId + ", " + "firstAveragingDay = " + firstAveragingDay + ", " + "hedgeRequests = " + hedgeRequests + ", " + "lastAveragingDay = " + lastAveragingDay + ", " + "marketId = " + marketId + ", " + "neptuneHedgeRequests = " + neptuneHedgeRequests + ", " + "neptunePricingFixations = " + neptunePricingFixations + ", " + "oid = " + oid + ", " + "ordinal = " + ordinal + ", " + "premium = " + premium + ", " + "premiumComments = " + premiumComments + ", " + "pricingFixations = " + pricingFixations + ", " + "quantity = " + quantity +  "}"
  }


  
        override def toJson() : org.codehaus.jettison.json.JSONObject = {
      toJson(new SerialisationHelper)
    }

    override def toJson(differentiator: SerialisationHelper) : org.codehaus.jettison.json.JSONObject = {
        var result = super.toJson(differentiator);

        result.put("_node", differentiator.idFor(this))

        result.put("Type", "EDM.FPC.PartialAvePricingSpec@1@1.0")
        
          
          
          
          
            result.putOpt("MarketId", this.marketId);
          
        
          
          
          
          
            result.putOpt("FirstAveragingDay", JSONConversions.optionalDateToJSON(this.firstAveragingDay));
          
        
          
          
          
          
            result.putOpt("LastAveragingDay", JSONConversions.optionalDateToJSON(this.lastAveragingDay));
          
        
        return result;
    }

    override def loadJson(jobj : org.codehaus.jettison.json.JSONObject, cache: DeserialisationHelper) = {
        
            super.loadJson(jobj, cache);
        
        
          
              marketId = jobj.optInt("MarketId")
          
              firstAveragingDay = JSONConversions.optionalDate(jobj.opt("FirstAveragingDay"))
          
              lastAveragingDay = JSONConversions.optionalDate(jobj.opt("LastAveragingDay"))
          
        
    }

  
}

object PartialAvePricingSpec {
  def version = ModelVersion("1")
  def wireFormatVersion = ModelVersion("1.0")

  
        val jsonTypeName = "EDM.FPC.PartialAvePricingSpec"

    def fromJson(jobj : org.codehaus.jettison.json.JSONObject, cache: DeserialisationHelper = new DeserialisationHelper) : com.trafigura.edm.fpc.PartialAvePricingSpec = {
      val v = TypeHolder(jobj.optString("Type"))

      v.assertModelVersion(version, "com.trafigura.edm.fpc.PartialAvePricingSpec")
      v.assertWireFormatVersion(wireFormatVersion, "com.trafigura.edm.fpc.PartialAvePricingSpec")

      
        
              v.typeName match {
              
                case _ =>
                  
                     val result = new com.trafigura.edm.fpc.PartialAvePricingSpec()
                     result.loadJson(jobj, cache)
                     result
                  
            }
        
      
    }

  

  

  
    def apply(marketId: Int = 0, firstAveragingDay: org.joda.time.LocalDate = null, lastAveragingDay: org.joda.time.LocalDate = null) = {
      val res = new com.trafigura.edm.fpc.PartialAvePricingSpec
      
        res.marketId = marketId
      
        res.firstAveragingDay = firstAveragingDay
      
        res.lastAveragingDay = lastAveragingDay
      
      res
    }
  
}
