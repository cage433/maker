/**
 * WARNING: This file was automatically generated by the Trading Hub tooling version 2.15.
 * Any manual changes may be overwritten and lost!
 */


// Generated from model_object_scala.erb

package com.trafigura.edm.fpc





import com.trafigura.tradinghub.support._
import scala.collection.JavaConversions._



/**
 Represents a physical hedge request (in lots)
 */


 class PhysicalHedgeRequest extends com.trafigura.edm.fpc.HedgeRequest  {
  


  
    
    /**
     number of lots as entered/displayed in the UI, converted to an actual amount/uom via ref data for use elsewhere
     */

var lots:scala.Option[Int] = None
    
    
    
    /**
     converted to/from lots by commodity and market using ref-data, use this value for actual calculations etc
     */

var amount:com.trafigura.tradecapture.internal.refinedmetal.Quantity = null
    
    





  override def equals(o: Any) = o match {
    case r: AnyRef =>
        if (o.isInstanceOf[com.trafigura.edm.fpc.PhysicalHedgeRequest]) {
            val that = r.asInstanceOf[com.trafigura.edm.fpc.PhysicalHedgeRequest]
            that.canEqual(this) && this.amount == that.amount && this.contractMonthName == that.contractMonthName && this.directionId == that.directionId && this.exchangeId == that.exchangeId && this.hedgePrice == that.hedgePrice && this.hedgeRequestId == that.hedgeRequestId && this.lots == that.lots && this.oid == that.oid && this.ordinal == that.ordinal &&  true
        }
        else false
    case _ => false
  }

  override def canEqual(that : Any) = that.isInstanceOf[com.trafigura.edm.fpc.PhysicalHedgeRequest]

  override def hashCode = {
    (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 *  1
    ) +
         (if (amount == null) 0 else amount.hashCode) 
    ) +
         (if (contractMonthName == null) 0 else contractMonthName.hashCode) 
    ) +
         directionId.hashCode
        
    ) +
         exchangeId.hashCode
        
    ) +
         (if (hedgePrice == null) 0 else hedgePrice.hashCode) 
    ) +
         (if (hedgeRequestId == null) 0 else hedgeRequestId.hashCode) 
    ) +
         (if (lots == null) 0 else lots.hashCode) 
    ) +
         oid.hashCode
        
    ) +
         ordinal.hashCode
        
    
  }

  override def toString = {
    "{com.trafigura.edm.fpc.PhysicalHedgeRequest: " + "" + "amount = " + amount + ", " + "contractMonthName = " + contractMonthName + ", " + "directionId = " + directionId + ", " + "exchangeId = " + exchangeId + ", " + "hedgePrice = " + hedgePrice + ", " + "hedgeRequestId = " + hedgeRequestId + ", " + "lots = " + lots + ", " + "oid = " + oid + ", " + "ordinal = " + ordinal +  "}"
  }


  
        override def toJson() : org.codehaus.jettison.json.JSONObject = {
      toJson(new SerialisationHelper)
    }

    override def toJson(differentiator: SerialisationHelper) : org.codehaus.jettison.json.JSONObject = {
        var result = super.toJson(differentiator);

        result.put("_node", differentiator.idFor(this))

        result.put("Type", "EDM.FPC.PhysicalHedgeRequest@1@1.0")
        
          
          
          
          
            result.putOpt("Lots", this.lots.getOrElse(null));
          
        
          
          
          
          
            result.putOpt("Amount", (this.amount) match { case null => null; case o => o.toJson(differentiator) });
          
        
        return result;
    }

    override def loadJson(jobj : org.codehaus.jettison.json.JSONObject, cache: DeserialisationHelper) = {
        
            super.loadJson(jobj, cache);
        
        
          
              lots = (jobj.opt("Lots")) match {case null => None; case n:Number => Some(n.intValue()); case _ => None}
          
              amount = (jobj.opt("Amount")) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.tradecapture.internal.refinedmetal.Quantity.fromJson(o, cache))) }
          
        
    }

  
}

object PhysicalHedgeRequest {
  def version = ModelVersion("1")
  def wireFormatVersion = ModelVersion("1.0")

  
        val jsonTypeName = "EDM.FPC.PhysicalHedgeRequest"

    def fromJson(jobj : org.codehaus.jettison.json.JSONObject, cache: DeserialisationHelper = new DeserialisationHelper) : com.trafigura.edm.fpc.PhysicalHedgeRequest = {
      val v = TypeHolder(jobj.optString("Type"))

      v.assertModelVersion(version, "com.trafigura.edm.fpc.PhysicalHedgeRequest")
      v.assertWireFormatVersion(wireFormatVersion, "com.trafigura.edm.fpc.PhysicalHedgeRequest")

      
        
              v.typeName match {
              
                case _ =>
                  
                     val result = new com.trafigura.edm.fpc.PhysicalHedgeRequest()
                     result.loadJson(jobj, cache)
                     result
                  
            }
        
      
    }

  

  

  
    def apply(lots: scala.Option[Int] = None, amount: com.trafigura.tradecapture.internal.refinedmetal.Quantity = null) = {
      val res = new com.trafigura.edm.fpc.PhysicalHedgeRequest
      
        res.lots = lots
      
        res.amount = amount
      
      res
    }
  
}
