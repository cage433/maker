/**
 * WARNING: This file was automatically generated by the Trading Hub tooling version 2.15.
 * Any manual changes may be overwritten and lost!
 */


// Generated from model_object_scala.erb

package com.trafigura.edm.tradeservice





import com.trafigura.tradinghub.support._
import scala.collection.JavaConversions._



/**
 meta info for EDM trade results. 'cached' indicates that the
// cache is populated or not. If not then the service is loading the
// cache and a retry is advisable
 */


 class TradeResults extends com.trafigura.tradinghub.support.ModelObject  {
  


  
    

var cached:Boolean = false
    
    
    

var results:List[com.trafigura.edm.tradeservice.TradeResult] = null
    
    





  override def equals(o: Any) = o match {
    case r: AnyRef =>
        if (o.isInstanceOf[com.trafigura.edm.tradeservice.TradeResults]) {
            val that = r.asInstanceOf[com.trafigura.edm.tradeservice.TradeResults]
            that.canEqual(this) && this.cached == that.cached && this.results == that.results &&  true
        }
        else false
    case _ => false
  }

  override def canEqual(that : Any) = that.isInstanceOf[com.trafigura.edm.tradeservice.TradeResults]

  override def hashCode = {
    (41 * (41 *  1
    ) +
         cached.hashCode
        
    ) +
         (if (results == null) 0 else results.hashCode) 
    
  }

  override def toString = {
    "{com.trafigura.edm.tradeservice.TradeResults: " + "" + "cached = " + cached + ", " + "results = " + results +  "}"
  }


  
         def toJson() : org.codehaus.jettison.json.JSONObject = {
      toJson(new SerialisationHelper)
    }

     def toJson(differentiator: SerialisationHelper) : org.codehaus.jettison.json.JSONObject = {
        var result = new org.codehaus.jettison.json.JSONObject();

        result.put("_node", differentiator.idFor(this))

        result.put("Type", "EDM.TradeService.TradeResults@1@1.0")
        
          
          
          
          
            result.putOpt("Cached", this.cached);
          
        
          
          
          
          
            result.putOpt("Results", new org.codehaus.jettison.json.JSONArray(if(this.results == null) new java.util.ArrayList() else java.util.Arrays.asList(this.results.map(t => (t) match { case null => null; case o => o.toJson(differentiator) }).toArray: _*)));
          
        
        return result;
    }

     def loadJson(jobj : org.codehaus.jettison.json.JSONObject, cache: DeserialisationHelper) = {
        
        
          
              cached = JSONConversions.optional[Boolean](jobj.opt("Cached"), false)
          
              results = JSONConversions.optionalList(jobj.opt("Results"), x => (x) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.edm.tradeservice.TradeResult.fromJson(o, cache))) })
          
        
    }

  
}

object TradeResults {
  def version = ModelVersion("1")
  def wireFormatVersion = ModelVersion("1.0")

  
        val jsonTypeName = "EDM.TradeService.TradeResults"

    def fromJson(jobj : org.codehaus.jettison.json.JSONObject, cache: DeserialisationHelper = new DeserialisationHelper) : com.trafigura.edm.tradeservice.TradeResults = {
      val v = TypeHolder(jobj.optString("Type"))

      v.assertModelVersion(version, "com.trafigura.edm.tradeservice.TradeResults")
      v.assertWireFormatVersion(wireFormatVersion, "com.trafigura.edm.tradeservice.TradeResults")

      
        
            val result = new com.trafigura.edm.tradeservice.TradeResults()
            result.loadJson(jobj, cache)
            result
        
      
    }

  

  

  
    def apply(cached: Boolean = false, results: List[com.trafigura.edm.tradeservice.TradeResult] = null) = {
      val res = new com.trafigura.edm.tradeservice.TradeResults
      
        res.cached = cached
      
        res.results = results
      
      res
    }
  
}
