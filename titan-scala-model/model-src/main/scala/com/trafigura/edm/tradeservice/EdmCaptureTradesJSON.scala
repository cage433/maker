/**
 * WARNING: This file was automatically generated by the Trading Hub tooling version 2.15.
 * Any manual changes may be overwritten and lost!
 */


// Generated from model_service_json.rb

package com.trafigura.edm.tradeservice

import com.trafigura.edm.tradeservice._
import com.trafigura.edm.trades._

import org.codehaus.jettison.json.JSONObject
import com.trafigura.tradinghub.support._

// JSON support for EdmCaptureTrades

object EdmCaptureTradesJSON extends JSONServiceDispatcher[EdmCaptureTrades] {
  def serviceName = "EDM.TradeService.EdmCaptureTrades"

  def decodeOperationName(jsonName:String) = {
    jsonName match {
      case "Create" => "Create"
      case "Update" => "Update"
      
    }
  }

  def parseParameters(operation:String, params: JSONObject) = {
    operation match {
      
      case "Create" =>
        
          val cache = new DeserialisationHelper
          Map("trade" -> ((params.opt("Trade")) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.edm.trades.Trade.fromJson(o, cache))) }))
        
      
      case "Update" =>
        
          val cache = new DeserialisationHelper
          Map("trade" -> ((params.opt("Trade")) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.edm.trades.Trade.fromJson(o, cache))) }))
        
      
    }
  }

  def invoke(target: EdmCaptureTrades, operation: String, params: Map[String, Any]): Any = {
    operation match {
      
      case "Create" =>
        target.create(params("trade").asInstanceOf[com.trafigura.edm.trades.Trade])
      
      case "Update" =>
        target.update(params("trade").asInstanceOf[com.trafigura.edm.trades.Trade])
      
    }
  }

  def addResponse(operation:String, jsonResponse:JSONObject, response:Any) = {
    val differentiator = new SerialisationHelper
    operation match {
      
      case "Create" =>
        jsonResponse.putOpt("result", (response.asInstanceOf[com.trafigura.edm.tradeservice.TradeSubmissionResult]) match { case null => null; case o => o.toJson(differentiator) })
      
      case "Update" =>
        jsonResponse.putOpt("result", (response.asInstanceOf[com.trafigura.edm.tradeservice.TradeSubmissionResult]) match { case null => null; case o => o.toJson(differentiator) })
      
    }
  }

  
  def serializeCreate(trade: com.trafigura.edm.trades.Trade): JSONObject = {
    val differentiator = new SerialisationHelper
    val params = new JSONObject
    
      params.putOpt("Trade", (trade) match { case null => null; case o => o.toJson(differentiator) })
    
    params
  }
  
  def serializeUpdate(trade: com.trafigura.edm.trades.Trade): JSONObject = {
    val differentiator = new SerialisationHelper
    val params = new JSONObject
    
      params.putOpt("Trade", (trade) match { case null => null; case o => o.toJson(differentiator) })
    
    params
  }
  

  class Proxy(val handler: (String, JSONObject) => JSONObject) extends EdmCaptureTrades {
  
    def create(trade: com.trafigura.edm.trades.Trade): com.trafigura.edm.tradeservice.TradeSubmissionResult = {
        val request = new JSONObject
        request.put("method", "Create")
        
        request.put("params", serializeCreate(trade))
        
        var routing = null
        val response = handler(routing, request)
        if (response == null) {
          null.asInstanceOf[com.trafigura.edm.tradeservice.TradeSubmissionResult]   // Doesn't work well with primitive types, but we should only see null in cases like discover anyway
        } else {
          val cache = new DeserialisationHelper
          (response.opt("result")) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.edm.tradeservice.TradeSubmissionResult.fromJson(o, cache))) }
        }
    }
  
    def update(trade: com.trafigura.edm.trades.Trade): com.trafigura.edm.tradeservice.TradeSubmissionResult = {
        val request = new JSONObject
        request.put("method", "Update")
        
        request.put("params", serializeUpdate(trade))
        
        var routing = null
        val response = handler(routing, request)
        if (response == null) {
          null.asInstanceOf[com.trafigura.edm.tradeservice.TradeSubmissionResult]   // Doesn't work well with primitive types, but we should only see null in cases like discover anyway
        } else {
          val cache = new DeserialisationHelper
          (response.opt("result")) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.edm.tradeservice.TradeSubmissionResult.fromJson(o, cache))) }
        }
    }
  
  }
}

