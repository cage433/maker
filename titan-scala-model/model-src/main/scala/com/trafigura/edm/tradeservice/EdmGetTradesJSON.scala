/**
 * WARNING: This file was automatically generated by the Trading Hub tooling version 2.15.
 * Any manual changes may be overwritten and lost!
 */


// Generated from model_service_json.rb

package com.trafigura.edm.tradeservice

import com.trafigura.edm.trades._
import com.trafigura.edm.tradeservice._
import com.trafigura.edm.physicaltradespecs._
import com.trafigura.edm.shared.types._

import org.codehaus.jettison.json.JSONObject
import com.trafigura.tradinghub.support._

// JSON support for EdmGetTrades

object EdmGetTradesJSON extends JSONServiceDispatcher[EdmGetTrades] {
  def serviceName = "EDM.TradeService.EdmGetTrades"

  def decodeOperationName(jsonName:String) = {
    jsonName match {
      case "GetAll" => "GetAll"
      case "GetByGuid" => "GetByGuid"
      case "GetQuota" => "GetQuota"
      case "Get" => "Get"
      
    }
  }

  def parseParameters(operation:String, params: JSONObject) = {
    operation match {
      
      case "GetAll" =>
        
          Map()
        
      
      case "GetByGuid" =>
        
          val cache = new DeserialisationHelper
          Map("guid" -> (if (params.opt("Guid") == null) null else GUID(JSONConversions.optional[String](params.opt("Guid"), null))))
        
      
      case "GetQuota" =>
        
          val cache = new DeserialisationHelper
          Map("id" -> ((params.opt("Id")) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.edm.shared.types.TitanId.fromJson(o, cache))) }))
        
      
      case "Get" =>
        
          val cache = new DeserialisationHelper
          Map("id" -> ((params.opt("Id")) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.edm.shared.types.TitanId.fromJson(o, cache))) }))
        
      
    }
  }

  def invoke(target: EdmGetTrades, operation: String, params: Map[String, Any]): Any = {
    operation match {
      
      case "GetAll" =>
        target.getAll()
      
      case "GetByGuid" =>
        target.getByGuid(params("guid").asInstanceOf[GUID])
      
      case "GetQuota" =>
        target.getQuota(params("id").asInstanceOf[com.trafigura.edm.shared.types.TitanId])
      
      case "Get" =>
        target.get(params("id").asInstanceOf[com.trafigura.edm.shared.types.TitanId])
      
    }
  }

  def addResponse(operation:String, jsonResponse:JSONObject, response:Any) = {
    val differentiator = new SerialisationHelper
    operation match {
      
      case "GetAll" =>
        jsonResponse.putOpt("result", (response.asInstanceOf[com.trafigura.edm.tradeservice.TradeResults]) match { case null => null; case o => o.toJson(differentiator) })
      
      case "GetByGuid" =>
        jsonResponse.putOpt("result", (response.asInstanceOf[com.trafigura.edm.trades.Trade]) match { case null => null; case o => o.toJson(differentiator) })
      
      case "GetQuota" =>
        jsonResponse.putOpt("result", (response.asInstanceOf[com.trafigura.edm.physicaltradespecs.PhysicalTradeQuota]) match { case null => null; case o => o.toJson(differentiator) })
      
      case "Get" =>
        jsonResponse.putOpt("result", (response.asInstanceOf[com.trafigura.edm.trades.Trade]) match { case null => null; case o => o.toJson(differentiator) })
      
    }
  }

  
  def serializeGetAll(): JSONObject = {
    val differentiator = new SerialisationHelper
    val params = new JSONObject
    
    params
  }
  
  def serializeGetByGuid(guid: GUID): JSONObject = {
    val differentiator = new SerialisationHelper
    val params = new JSONObject
    
      params.putOpt("Guid", if (guid == null) null else guid.toJson)
    
    params
  }
  
  def serializeGetQuota(identifier: com.trafigura.edm.shared.types.TitanId): JSONObject = {
    val differentiator = new SerialisationHelper
    val params = new JSONObject
    
      params.putOpt("Id", (identifier) match { case null => null; case o => o.toJson(differentiator) })
    
    params
  }
  
  def serializeGet(identifier: com.trafigura.edm.shared.types.TitanId): JSONObject = {
    val differentiator = new SerialisationHelper
    val params = new JSONObject
    
      params.putOpt("Id", (identifier) match { case null => null; case o => o.toJson(differentiator) })
    
    params
  }
  

  class Proxy(val handler: (String, JSONObject) => JSONObject) extends EdmGetTrades {
  
    def getAll(): com.trafigura.edm.tradeservice.TradeResults = {
        val request = new JSONObject
        request.put("method", "GetAll")
        
        var routing = null
        val response = handler(routing, request)
        if (response == null) {
          null.asInstanceOf[com.trafigura.edm.tradeservice.TradeResults]   // Doesn't work well with primitive types, but we should only see null in cases like discover anyway
        } else {
          val cache = new DeserialisationHelper
          (response.opt("result")) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.edm.tradeservice.TradeResults.fromJson(o, cache))) }
        }
    }
  
    def getByGuid(guid: GUID): com.trafigura.edm.trades.Trade = {
        val request = new JSONObject
        request.put("method", "GetByGuid")
        
        request.put("params", serializeGetByGuid(guid))
        
        var routing = null
        val response = handler(routing, request)
        if (response == null) {
          null.asInstanceOf[com.trafigura.edm.trades.Trade]   // Doesn't work well with primitive types, but we should only see null in cases like discover anyway
        } else {
          val cache = new DeserialisationHelper
          (response.opt("result")) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.edm.trades.Trade.fromJson(o, cache))) }
        }
    }
  
    def getQuota(identifier: com.trafigura.edm.shared.types.TitanId): com.trafigura.edm.physicaltradespecs.PhysicalTradeQuota = {
        val request = new JSONObject
        request.put("method", "GetQuota")
        
        request.put("params", serializeGetQuota(identifier))
        
        var routing = null
        val response = handler(routing, request)
        if (response == null) {
          null.asInstanceOf[com.trafigura.edm.physicaltradespecs.PhysicalTradeQuota]   // Doesn't work well with primitive types, but we should only see null in cases like discover anyway
        } else {
          val cache = new DeserialisationHelper
          (response.opt("result")) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.edm.physicaltradespecs.PhysicalTradeQuota.fromJson(o, cache))) }
        }
    }
  
    def get(identifier: com.trafigura.edm.shared.types.TitanId): com.trafigura.edm.trades.Trade = {
        val request = new JSONObject
        request.put("method", "Get")
        
        request.put("params", serializeGet(identifier))
        
        var routing = null
        val response = handler(routing, request)
        if (response == null) {
          null.asInstanceOf[com.trafigura.edm.trades.Trade]   // Doesn't work well with primitive types, but we should only see null in cases like discover anyway
        } else {
          val cache = new DeserialisationHelper
          (response.opt("result")) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.edm.trades.Trade.fromJson(o, cache))) }
        }
    }
  
  }
}

