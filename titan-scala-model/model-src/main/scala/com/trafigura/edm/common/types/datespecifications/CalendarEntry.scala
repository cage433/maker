/**
 * WARNING: This file was automatically generated by the Trading Hub tooling version 2.15.
 * Any manual changes may be overwritten and lost!
 */


// Generated from model_object_scala.erb

package com.trafigura.edm.common.types.datespecifications





import com.trafigura.tradinghub.support._
import scala.collection.JavaConversions._




 class CalendarEntry extends com.trafigura.tradinghub.support.ModelObject  {
  


  
    

var entryDate:com.trafigura.edm.common.types.datespecifications.Date = null
    
    
    

var name:String = null
    
    





  override def equals(o: Any) = o match {
    case r: AnyRef =>
        if (o.isInstanceOf[com.trafigura.edm.common.types.datespecifications.CalendarEntry]) {
            val that = r.asInstanceOf[com.trafigura.edm.common.types.datespecifications.CalendarEntry]
            that.canEqual(this) && this.entryDate == that.entryDate && this.name == that.name &&  true
        }
        else false
    case _ => false
  }

  override def canEqual(that : Any) = that.isInstanceOf[com.trafigura.edm.common.types.datespecifications.CalendarEntry]

  override def hashCode = {
    (41 * (41 *  1
    ) +
         (if (entryDate == null) 0 else entryDate.hashCode) 
    ) +
         (if (name == null) 0 else name.hashCode) 
    
  }

  override def toString = {
    "{com.trafigura.edm.common.types.datespecifications.CalendarEntry: " + "" + "entryDate = " + entryDate + ", " + "name = " + name +  "}"
  }


  
         def toJson() : org.codehaus.jettison.json.JSONObject = {
      toJson(new SerialisationHelper)
    }

     def toJson(differentiator: SerialisationHelper) : org.codehaus.jettison.json.JSONObject = {
        var result = new org.codehaus.jettison.json.JSONObject();

        result.put("_node", differentiator.idFor(this))

        result.put("Type", "EDM.Common.Types.DateSpecifications.CalendarEntry@1@1.0")
        
          
          
          
          
            result.putOpt("EntryDate", (this.entryDate) match { case null => null; case o => o.toJson(differentiator) });
          
        
          
          
          
          
            result.putOpt("Name", this.name);
          
        
        return result;
    }

     def loadJson(jobj : org.codehaus.jettison.json.JSONObject, cache: DeserialisationHelper) = {
        
        
          
              entryDate = (jobj.opt("EntryDate")) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.edm.common.types.datespecifications.Date.fromJson(o, cache))) }
          
              name = JSONConversions.optional[String](jobj.opt("Name"), null)
          
        
    }

  
}

object CalendarEntry {
  def version = ModelVersion("1")
  def wireFormatVersion = ModelVersion("1.0")

  
        val jsonTypeName = "EDM.Common.Types.DateSpecifications.CalendarEntry"

    def fromJson(jobj : org.codehaus.jettison.json.JSONObject, cache: DeserialisationHelper = new DeserialisationHelper) : com.trafigura.edm.common.types.datespecifications.CalendarEntry = {
      val v = TypeHolder(jobj.optString("Type"))

      v.assertModelVersion(version, "com.trafigura.edm.common.types.datespecifications.CalendarEntry")
      v.assertWireFormatVersion(wireFormatVersion, "com.trafigura.edm.common.types.datespecifications.CalendarEntry")

      
        
            val result = new com.trafigura.edm.common.types.datespecifications.CalendarEntry()
            result.loadJson(jobj, cache)
            result
        
      
    }

  

  

  
    def apply(entryDate: com.trafigura.edm.common.types.datespecifications.Date = null, name: String = null) = {
      val res = new com.trafigura.edm.common.types.datespecifications.CalendarEntry
      
        res.entryDate = entryDate
      
        res.name = name
      
      res
    }
  
}
