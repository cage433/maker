/**
 * WARNING: This file was automatically generated by the Trading Hub tooling version 2.15.
 * Any manual changes may be overwritten and lost!
 */


// Generated from model_object_scala.erb

package com.trafigura.edm.common.types.datespecifications





import com.trafigura.tradinghub.support._
import scala.collection.JavaConversions._



/**
 Range of dates.
 */


 class DateRange extends com.trafigura.tradinghub.support.ModelObject  {
  


  
    
    /**
     Date of start.
     */

var start:com.trafigura.edm.common.types.datespecifications.Date = null
    
    
    
    /**
     Date of finish.
     */

var finish:com.trafigura.edm.common.types.datespecifications.Date = null
    
    





  override def equals(o: Any) = o match {
    case r: AnyRef =>
        if (o.isInstanceOf[com.trafigura.edm.common.types.datespecifications.DateRange]) {
            val that = r.asInstanceOf[com.trafigura.edm.common.types.datespecifications.DateRange]
            that.canEqual(this) && this.finish == that.finish && this.start == that.start &&  true
        }
        else false
    case _ => false
  }

  override def canEqual(that : Any) = that.isInstanceOf[com.trafigura.edm.common.types.datespecifications.DateRange]

  override def hashCode = {
    (41 * (41 *  1
    ) +
         (if (finish == null) 0 else finish.hashCode) 
    ) +
         (if (start == null) 0 else start.hashCode) 
    
  }

  override def toString = {
    "{com.trafigura.edm.common.types.datespecifications.DateRange: " + "" + "finish = " + finish + ", " + "start = " + start +  "}"
  }


  
         def toJson() : org.codehaus.jettison.json.JSONObject = {
      toJson(new SerialisationHelper)
    }

     def toJson(differentiator: SerialisationHelper) : org.codehaus.jettison.json.JSONObject = {
        var result = new org.codehaus.jettison.json.JSONObject();

        result.put("_node", differentiator.idFor(this))

        result.put("Type", "EDM.Common.Types.DateSpecifications.DateRange@1@1.0")
        
          
          
          
          
            result.putOpt("Start", (this.start) match { case null => null; case o => o.toJson(differentiator) });
          
        
          
          
          
          
            result.putOpt("Finish", (this.finish) match { case null => null; case o => o.toJson(differentiator) });
          
        
        return result;
    }

     def loadJson(jobj : org.codehaus.jettison.json.JSONObject, cache: DeserialisationHelper) = {
        
        
          
              start = (jobj.opt("Start")) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.edm.common.types.datespecifications.Date.fromJson(o, cache))) }
          
              finish = (jobj.opt("Finish")) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.edm.common.types.datespecifications.Date.fromJson(o, cache))) }
          
        
    }

  
}

object DateRange {
  def version = ModelVersion("1")
  def wireFormatVersion = ModelVersion("1.0")

  
        val jsonTypeName = "EDM.Common.Types.DateSpecifications.DateRange"

    def fromJson(jobj : org.codehaus.jettison.json.JSONObject, cache: DeserialisationHelper = new DeserialisationHelper) : com.trafigura.edm.common.types.datespecifications.DateRange = {
      val v = TypeHolder(jobj.optString("Type"))

      v.assertModelVersion(version, "com.trafigura.edm.common.types.datespecifications.DateRange")
      v.assertWireFormatVersion(wireFormatVersion, "com.trafigura.edm.common.types.datespecifications.DateRange")

      
        
            val result = new com.trafigura.edm.common.types.datespecifications.DateRange()
            result.loadJson(jobj, cache)
            result
        
      
    }

  

  

  
    def apply(start: com.trafigura.edm.common.types.datespecifications.Date = null, finish: com.trafigura.edm.common.types.datespecifications.Date = null) = {
      val res = new com.trafigura.edm.common.types.datespecifications.DateRange
      
        res.start = start
      
        res.finish = finish
      
      res
    }
  
}
