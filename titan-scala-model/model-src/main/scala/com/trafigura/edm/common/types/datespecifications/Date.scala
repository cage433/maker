/**
 * WARNING: This file was automatically generated by the Trading Hub tooling version 2.15.
 * Any manual changes may be overwritten and lost!
 */


// Generated from model_object_scala.erb

package com.trafigura.edm.common.types.datespecifications





import com.trafigura.tradinghub.support._
import scala.collection.JavaConversions._



/**
 A date.
 */


 class Date extends com.trafigura.edm.common.types.datespecifications.DateSpecification  {
  


  
    
    /**
     Date itself.
     */

var dateValue:org.joda.time.LocalDate = null
    
    





  override def equals(o: Any) = o match {
    case r: AnyRef =>
        if (o.isInstanceOf[com.trafigura.edm.common.types.datespecifications.Date]) {
            val that = r.asInstanceOf[com.trafigura.edm.common.types.datespecifications.Date]
            that.canEqual(this) && this.dateValue == that.dateValue &&  true
        }
        else false
    case _ => false
  }

  override def canEqual(that : Any) = that.isInstanceOf[com.trafigura.edm.common.types.datespecifications.Date]

  override def hashCode = {
    (41 *  1
    ) +
         (if (dateValue == null) 0 else dateValue.hashCode) 
    
  }

  override def toString = {
    "{com.trafigura.edm.common.types.datespecifications.Date: " + "" + "dateValue = " + dateValue +  "}"
  }


  
        override def toJson() : org.codehaus.jettison.json.JSONObject = {
      toJson(new SerialisationHelper)
    }

    override def toJson(differentiator: SerialisationHelper) : org.codehaus.jettison.json.JSONObject = {
        var result = super.toJson(differentiator);

        result.put("_node", differentiator.idFor(this))

        result.put("Type", "EDM.Common.Types.DateSpecifications.Date@1@1.0")
        
          
          
          
          
            result.putOpt("DateValue", JSONConversions.optionalDateToJSON(this.dateValue));
          
        
        return result;
    }

    override def loadJson(jobj : org.codehaus.jettison.json.JSONObject, cache: DeserialisationHelper) = {
        
            super.loadJson(jobj, cache);
        
        
          
              dateValue = JSONConversions.optionalDate(jobj.opt("DateValue"))
          
        
    }

  
}

object Date {
  def version = ModelVersion("1")
  def wireFormatVersion = ModelVersion("1.0")

  
        val jsonTypeName = "EDM.Common.Types.DateSpecifications.Date"

    def fromJson(jobj : org.codehaus.jettison.json.JSONObject, cache: DeserialisationHelper = new DeserialisationHelper) : com.trafigura.edm.common.types.datespecifications.Date = {
      val v = TypeHolder(jobj.optString("Type"))

      v.assertModelVersion(version, "com.trafigura.edm.common.types.datespecifications.Date")
      v.assertWireFormatVersion(wireFormatVersion, "com.trafigura.edm.common.types.datespecifications.Date")

      
        
              v.typeName match {
              
                case _ =>
                  
                     val result = new com.trafigura.edm.common.types.datespecifications.Date()
                     result.loadJson(jobj, cache)
                     result
                  
            }
        
      
    }

  

  

  
    def apply(dateValue: org.joda.time.LocalDate = null) = {
      val res = new com.trafigura.edm.common.types.datespecifications.Date
      
        res.dateValue = dateValue
      
      res
    }
  
}
