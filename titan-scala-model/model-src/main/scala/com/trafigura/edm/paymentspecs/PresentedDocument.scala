/**
 * WARNING: This file was automatically generated by the Trading Hub tooling version 2.15.
 * Any manual changes may be overwritten and lost!
 */


// Generated from model_object_scala.erb

package com.trafigura.edm.paymentspecs





import com.trafigura.tradinghub.support._
import scala.collection.JavaConversions._




 class PresentedDocument extends com.trafigura.tradinghub.support.ModelObject  {
  


  
    

var oid:Int = 0
    
    
    

var documentTypeId:Int = 0
    
    
    

var description:String = null
    
    
    

var original:Boolean = false
    
    





  override def equals(o: Any) = o match {
    case r: AnyRef =>
        if (o.isInstanceOf[com.trafigura.edm.paymentspecs.PresentedDocument]) {
            val that = r.asInstanceOf[com.trafigura.edm.paymentspecs.PresentedDocument]
            that.canEqual(this) && this.description == that.description && this.documentTypeId == that.documentTypeId && this.oid == that.oid && this.original == that.original &&  true
        }
        else false
    case _ => false
  }

  override def canEqual(that : Any) = that.isInstanceOf[com.trafigura.edm.paymentspecs.PresentedDocument]

  override def hashCode = {
    (41 * (41 * (41 * (41 *  1
    ) +
         (if (description == null) 0 else description.hashCode) 
    ) +
         documentTypeId.hashCode
        
    ) +
         oid.hashCode
        
    ) +
         original.hashCode
        
    
  }

  override def toString = {
    "{com.trafigura.edm.paymentspecs.PresentedDocument: " + "" + "description = " + description + ", " + "documentTypeId = " + documentTypeId + ", " + "oid = " + oid + ", " + "original = " + original +  "}"
  }


  
         def toJson() : org.codehaus.jettison.json.JSONObject = {
      toJson(new SerialisationHelper)
    }

     def toJson(differentiator: SerialisationHelper) : org.codehaus.jettison.json.JSONObject = {
        var result = new org.codehaus.jettison.json.JSONObject();

        result.put("_node", differentiator.idFor(this))

        result.put("Type", "EDM.PaymentSpecs.PresentedDocument@1@1.0")
        
          
          
          
          
            result.putOpt("Oid", this.oid);
          
        
          
          
          
          
            result.putOpt("DocumentTypeId", this.documentTypeId);
          
        
          
          
          
          
            result.putOpt("Description", this.description);
          
        
          
          
          
          
            result.putOpt("Original", this.original);
          
        
        return result;
    }

     def loadJson(jobj : org.codehaus.jettison.json.JSONObject, cache: DeserialisationHelper) = {
        
        
          
              oid = JSONConversions.optional[Int](jobj.opt("Oid"), 0)
          
              documentTypeId = jobj.optInt("DocumentTypeId")
          
              description = JSONConversions.optional[String](jobj.opt("Description"), null)
          
              original = JSONConversions.optional[Boolean](jobj.opt("Original"), false)
          
        
    }

  
}

object PresentedDocument {
  def version = ModelVersion("1")
  def wireFormatVersion = ModelVersion("1.0")

  
        val jsonTypeName = "EDM.PaymentSpecs.PresentedDocument"

    def fromJson(jobj : org.codehaus.jettison.json.JSONObject, cache: DeserialisationHelper = new DeserialisationHelper) : com.trafigura.edm.paymentspecs.PresentedDocument = {
      val v = TypeHolder(jobj.optString("Type"))

      v.assertModelVersion(version, "com.trafigura.edm.paymentspecs.PresentedDocument")
      v.assertWireFormatVersion(wireFormatVersion, "com.trafigura.edm.paymentspecs.PresentedDocument")

      
        
            val result = new com.trafigura.edm.paymentspecs.PresentedDocument()
            result.loadJson(jobj, cache)
            result
        
      
    }

  

  

  
    def apply(oid: Int = 0, documentTypeId: Int = 0, description: String = null, original: Boolean = false) = {
      val res = new com.trafigura.edm.paymentspecs.PresentedDocument
      
        res.oid = oid
      
        res.documentTypeId = documentTypeId
      
        res.description = description
      
        res.original = original
      
      res
    }
  
}
