/**
 * WARNING: This file was automatically generated by the Trading Hub tooling version 2.15.
 * Any manual changes may be overwritten and lost!
 */


// Generated from model_object_scala.erb

package com.trafigura.edm.paymentspecs





import com.trafigura.tradinghub.support._
import scala.collection.JavaConversions._




 class CreditTerms extends com.trafigura.tradinghub.support.ModelObject  {
  


  
    

var interestRuleTillPaymentDate:com.trafigura.edm.paymentspecs.InterestRule = null
    
    
    

var interestTillPaymentDate:Double = 0.0
    
    
    

var interestRuleAfterPaymentDate:com.trafigura.edm.paymentspecs.InterestRule = null
    
    
    

var interestAfterPaymentDate:Double = 0.0
    
    
    

var maximumDays:Int = 0
    
    





  override def equals(o: Any) = o match {
    case r: AnyRef =>
        if (o.isInstanceOf[com.trafigura.edm.paymentspecs.CreditTerms]) {
            val that = r.asInstanceOf[com.trafigura.edm.paymentspecs.CreditTerms]
            that.canEqual(this) && this.interestAfterPaymentDate == that.interestAfterPaymentDate && this.interestRuleAfterPaymentDate == that.interestRuleAfterPaymentDate && this.interestRuleTillPaymentDate == that.interestRuleTillPaymentDate && this.interestTillPaymentDate == that.interestTillPaymentDate && this.maximumDays == that.maximumDays &&  true
        }
        else false
    case _ => false
  }

  override def canEqual(that : Any) = that.isInstanceOf[com.trafigura.edm.paymentspecs.CreditTerms]

  override def hashCode = {
    (41 * (41 * (41 * (41 * (41 *  1
    ) +
         interestAfterPaymentDate.hashCode
        
    ) +
         (if (interestRuleAfterPaymentDate == null) 0 else interestRuleAfterPaymentDate.hashCode) 
    ) +
         (if (interestRuleTillPaymentDate == null) 0 else interestRuleTillPaymentDate.hashCode) 
    ) +
         interestTillPaymentDate.hashCode
        
    ) +
         maximumDays.hashCode
        
    
  }

  override def toString = {
    "{com.trafigura.edm.paymentspecs.CreditTerms: " + "" + "interestAfterPaymentDate = " + interestAfterPaymentDate + ", " + "interestRuleAfterPaymentDate = " + interestRuleAfterPaymentDate + ", " + "interestRuleTillPaymentDate = " + interestRuleTillPaymentDate + ", " + "interestTillPaymentDate = " + interestTillPaymentDate + ", " + "maximumDays = " + maximumDays +  "}"
  }


  
         def toJson() : org.codehaus.jettison.json.JSONObject = {
      toJson(new SerialisationHelper)
    }

     def toJson(differentiator: SerialisationHelper) : org.codehaus.jettison.json.JSONObject = {
        var result = new org.codehaus.jettison.json.JSONObject();

        result.put("_node", differentiator.idFor(this))

        result.put("Type", "EDM.PaymentSpecs.CreditTerms@1@1.0")
        
          
          
          
          
            result.putOpt("InterestRuleTillPaymentDate", (this.interestRuleTillPaymentDate) match { case null => null; case o => o.toJson(differentiator) });
          
        
          
          
          
          
            result.putOpt("InterestTillPaymentDate", this.interestTillPaymentDate);
          
        
          
          
          
          
            result.putOpt("InterestRuleAfterPaymentDate", (this.interestRuleAfterPaymentDate) match { case null => null; case o => o.toJson(differentiator) });
          
        
          
          
          
          
            result.putOpt("InterestAfterPaymentDate", this.interestAfterPaymentDate);
          
        
          
          
          
          
            result.putOpt("MaximumDays", this.maximumDays);
          
        
        return result;
    }

     def loadJson(jobj : org.codehaus.jettison.json.JSONObject, cache: DeserialisationHelper) = {
        
        
          
              interestRuleTillPaymentDate = (jobj.opt("InterestRuleTillPaymentDate")) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.edm.paymentspecs.InterestRule.fromJson(o, cache))) }
          
              interestTillPaymentDate = JSONConversions.optionalReal(jobj.opt("InterestTillPaymentDate"))
          
              interestRuleAfterPaymentDate = (jobj.opt("InterestRuleAfterPaymentDate")) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.edm.paymentspecs.InterestRule.fromJson(o, cache))) }
          
              interestAfterPaymentDate = JSONConversions.optionalReal(jobj.opt("InterestAfterPaymentDate"))
          
              maximumDays = JSONConversions.optional[Int](jobj.opt("MaximumDays"), 0)
          
        
    }

  
}

object CreditTerms {
  def version = ModelVersion("1")
  def wireFormatVersion = ModelVersion("1.0")

  
        val jsonTypeName = "EDM.PaymentSpecs.CreditTerms"

    def fromJson(jobj : org.codehaus.jettison.json.JSONObject, cache: DeserialisationHelper = new DeserialisationHelper) : com.trafigura.edm.paymentspecs.CreditTerms = {
      val v = TypeHolder(jobj.optString("Type"))

      v.assertModelVersion(version, "com.trafigura.edm.paymentspecs.CreditTerms")
      v.assertWireFormatVersion(wireFormatVersion, "com.trafigura.edm.paymentspecs.CreditTerms")

      
        
              v.typeName match {
              
                case "EDM.PaymentSpecs.PreArrangedCreditTerms" =>
                  
                     val result = new com.trafigura.edm.paymentspecs.PreArrangedCreditTerms()
                     result.loadJson(jobj, cache)
                     result
                  
              
                case "EDM.PaymentSpecs.ExtendedCreditTerms" =>
                  
                     val result = new com.trafigura.edm.paymentspecs.ExtendedCreditTerms()
                     result.loadJson(jobj, cache)
                     result
                  
              
                case _ =>
                  
                     val result = new com.trafigura.edm.paymentspecs.CreditTerms()
                     result.loadJson(jobj, cache)
                     result
                  
            }
        
      
    }

  

  

  
    def apply(interestRuleTillPaymentDate: com.trafigura.edm.paymentspecs.InterestRule = null, interestTillPaymentDate: Double = 0.0, interestRuleAfterPaymentDate: com.trafigura.edm.paymentspecs.InterestRule = null, interestAfterPaymentDate: Double = 0.0, maximumDays: Int = 0) = {
      val res = new com.trafigura.edm.paymentspecs.CreditTerms
      
        res.interestRuleTillPaymentDate = interestRuleTillPaymentDate
      
        res.interestTillPaymentDate = interestTillPaymentDate
      
        res.interestRuleAfterPaymentDate = interestRuleAfterPaymentDate
      
        res.interestAfterPaymentDate = interestAfterPaymentDate
      
        res.maximumDays = maximumDays
      
      res
    }
  
}
