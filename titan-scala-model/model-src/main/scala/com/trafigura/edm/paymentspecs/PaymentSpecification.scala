/**
 * WARNING: This file was automatically generated by the Trading Hub tooling version 2.15.
 * Any manual changes may be overwritten and lost!
 */


// Generated from model_object_scala.erb

package com.trafigura.edm.paymentspecs





import com.trafigura.tradinghub.support._
import scala.collection.JavaConversions._




 class PaymentSpecification extends com.trafigura.tradinghub.support.ModelObject  {
  


  
    
    /**
     field 'oid',                               :integer, :identifier => true
     */

var paymentCurrency:com.trafigura.edm.shared.types.Currency = null
    
    
    

var sellerChargesRechargedToBuyer:scala.Option[Boolean] = None
    
    
    

var comments:String = null
    
    
    

var paymentMethods:List[com.trafigura.edm.paymentspecs.PaymentMethod] = null
    
    
    

var presentedDocuments:List[com.trafigura.edm.paymentspecs.PresentedDocument] = null
    
    
    

var paymentDueDates:List[com.trafigura.edm.paymentspecs.PaymentDueDate] = null
    
    
    

var riskApproval:List[com.trafigura.edm.paymentspecs.RiskApproval] = null
    
    
    

var preArrangedCreditTerms:com.trafigura.edm.paymentspecs.PreArrangedCreditTerms = null
    
    
    

var extendedCreditTerms:com.trafigura.edm.paymentspecs.ExtendedCreditTerms = null
    
    





  override def equals(o: Any) = o match {
    case r: AnyRef =>
        if (o.isInstanceOf[com.trafigura.edm.paymentspecs.PaymentSpecification]) {
            val that = r.asInstanceOf[com.trafigura.edm.paymentspecs.PaymentSpecification]
            that.canEqual(this) && this.comments == that.comments && this.extendedCreditTerms == that.extendedCreditTerms && this.paymentCurrency == that.paymentCurrency && this.paymentDueDates == that.paymentDueDates && this.paymentMethods == that.paymentMethods && this.preArrangedCreditTerms == that.preArrangedCreditTerms && this.presentedDocuments == that.presentedDocuments && this.riskApproval == that.riskApproval && this.sellerChargesRechargedToBuyer == that.sellerChargesRechargedToBuyer &&  true
        }
        else false
    case _ => false
  }

  override def canEqual(that : Any) = that.isInstanceOf[com.trafigura.edm.paymentspecs.PaymentSpecification]

  override def hashCode = {
    (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 *  1
    ) +
         (if (comments == null) 0 else comments.hashCode) 
    ) +
         (if (extendedCreditTerms == null) 0 else extendedCreditTerms.hashCode) 
    ) +
         (if (paymentCurrency == null) 0 else paymentCurrency.hashCode) 
    ) +
         (if (paymentDueDates == null) 0 else paymentDueDates.hashCode) 
    ) +
         (if (paymentMethods == null) 0 else paymentMethods.hashCode) 
    ) +
         (if (preArrangedCreditTerms == null) 0 else preArrangedCreditTerms.hashCode) 
    ) +
         (if (presentedDocuments == null) 0 else presentedDocuments.hashCode) 
    ) +
         (if (riskApproval == null) 0 else riskApproval.hashCode) 
    ) +
         (if (sellerChargesRechargedToBuyer == null) 0 else sellerChargesRechargedToBuyer.hashCode) 
    
  }

  override def toString = {
    "{com.trafigura.edm.paymentspecs.PaymentSpecification: " + "" + "comments = " + comments + ", " + "extendedCreditTerms = " + extendedCreditTerms + ", " + "paymentCurrency = " + paymentCurrency + ", " + "paymentDueDates = " + paymentDueDates + ", " + "paymentMethods = " + paymentMethods + ", " + "preArrangedCreditTerms = " + preArrangedCreditTerms + ", " + "presentedDocuments = " + presentedDocuments + ", " + "riskApproval = " + riskApproval + ", " + "sellerChargesRechargedToBuyer = " + sellerChargesRechargedToBuyer +  "}"
  }


  
         def toJson() : org.codehaus.jettison.json.JSONObject = {
      toJson(new SerialisationHelper)
    }

     def toJson(differentiator: SerialisationHelper) : org.codehaus.jettison.json.JSONObject = {
        var result = new org.codehaus.jettison.json.JSONObject();

        result.put("_node", differentiator.idFor(this))

        result.put("Type", "EDM.PaymentSpecs.PaymentSpecification@1@1.0")
        
          
          
          
          
            result.putOpt("PaymentCurrency", (this.paymentCurrency) match { case null => null; case o => o.toJson(differentiator) });
          
        
          
          
          
          if(this.sellerChargesRechargedToBuyer != None) {
            result.putOpt("SellerChargesRechargedToBuyer", this.sellerChargesRechargedToBuyer.getOrElse(null));
          }
        
          
          
          
          
            result.putOpt("Comments", this.comments);
          
        
          
          
          
          
            result.putOpt("PaymentMethods", new org.codehaus.jettison.json.JSONArray(if(this.paymentMethods == null) new java.util.ArrayList() else java.util.Arrays.asList(this.paymentMethods.map(t => (t) match { case null => null; case o => o.toJson(differentiator) }).toArray: _*)));
          
        
          
          
          
          
            result.putOpt("PresentedDocuments", new org.codehaus.jettison.json.JSONArray(if(this.presentedDocuments == null) new java.util.ArrayList() else java.util.Arrays.asList(this.presentedDocuments.map(t => (t) match { case null => null; case o => o.toJson(differentiator) }).toArray: _*)));
          
        
          
          
          
          
            result.putOpt("PaymentDueDates", new org.codehaus.jettison.json.JSONArray(if(this.paymentDueDates == null) new java.util.ArrayList() else java.util.Arrays.asList(this.paymentDueDates.map(t => (t) match { case null => null; case o => o.toJson(differentiator) }).toArray: _*)));
          
        
          
          
          
          
            result.putOpt("RiskApproval", new org.codehaus.jettison.json.JSONArray(if(this.riskApproval == null) new java.util.ArrayList() else java.util.Arrays.asList(this.riskApproval.map(t => (t) match { case null => null; case o => o.toJson(differentiator) }).toArray: _*)));
          
        
          
          
          
          
            result.putOpt("PreArrangedCreditTerms", (this.preArrangedCreditTerms) match { case null => null; case o => o.toJson(differentiator) });
          
        
          
          
          
          
            result.putOpt("ExtendedCreditTerms", (this.extendedCreditTerms) match { case null => null; case o => o.toJson(differentiator) });
          
        
        return result;
    }

     def loadJson(jobj : org.codehaus.jettison.json.JSONObject, cache: DeserialisationHelper) = {
        
        
          
              paymentCurrency = (jobj.opt("PaymentCurrency")) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.edm.shared.types.Currency.fromJson(o, cache))) }
          
              sellerChargesRechargedToBuyer = (jobj.opt("SellerChargesRechargedToBuyer")) match { case null => None; case b:java.lang.Boolean => Some(b.booleanValue()); case _ => None }
          
              comments = JSONConversions.optional[String](jobj.opt("Comments"), null)
          
              paymentMethods = JSONConversions.optionalList(jobj.opt("PaymentMethods"), x => (x) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.edm.paymentspecs.PaymentMethod.fromJson(o, cache))) })
          
              presentedDocuments = JSONConversions.optionalList(jobj.opt("PresentedDocuments"), x => (x) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.edm.paymentspecs.PresentedDocument.fromJson(o, cache))) })
          
              paymentDueDates = JSONConversions.optionalList(jobj.opt("PaymentDueDates"), x => (x) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.edm.paymentspecs.PaymentDueDate.fromJson(o, cache))) })
          
              riskApproval = JSONConversions.optionalList(jobj.opt("RiskApproval"), x => (x) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.edm.paymentspecs.RiskApproval.fromJson(o, cache))) })
          
              preArrangedCreditTerms = (jobj.opt("PreArrangedCreditTerms")) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.edm.paymentspecs.PreArrangedCreditTerms.fromJson(o, cache))) }
          
              extendedCreditTerms = (jobj.opt("ExtendedCreditTerms")) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.edm.paymentspecs.ExtendedCreditTerms.fromJson(o, cache))) }
          
        
    }

  
}

object PaymentSpecification {
  def version = ModelVersion("1")
  def wireFormatVersion = ModelVersion("1.0")

  
        val jsonTypeName = "EDM.PaymentSpecs.PaymentSpecification"

    def fromJson(jobj : org.codehaus.jettison.json.JSONObject, cache: DeserialisationHelper = new DeserialisationHelper) : com.trafigura.edm.paymentspecs.PaymentSpecification = {
      val v = TypeHolder(jobj.optString("Type"))

      v.assertModelVersion(version, "com.trafigura.edm.paymentspecs.PaymentSpecification")
      v.assertWireFormatVersion(wireFormatVersion, "com.trafigura.edm.paymentspecs.PaymentSpecification")

      
        
            val result = new com.trafigura.edm.paymentspecs.PaymentSpecification()
            result.loadJson(jobj, cache)
            result
        
      
    }

  

  
  val CommentLength = 4000
  

  
    def apply(paymentCurrency: com.trafigura.edm.shared.types.Currency = null, sellerChargesRechargedToBuyer: scala.Option[Boolean] = None, comments: String = null, paymentMethods: List[com.trafigura.edm.paymentspecs.PaymentMethod] = null, presentedDocuments: List[com.trafigura.edm.paymentspecs.PresentedDocument] = null, paymentDueDates: List[com.trafigura.edm.paymentspecs.PaymentDueDate] = null, riskApproval: List[com.trafigura.edm.paymentspecs.RiskApproval] = null, preArrangedCreditTerms: com.trafigura.edm.paymentspecs.PreArrangedCreditTerms = null, extendedCreditTerms: com.trafigura.edm.paymentspecs.ExtendedCreditTerms = null) = {
      val res = new com.trafigura.edm.paymentspecs.PaymentSpecification
      
        res.paymentCurrency = paymentCurrency
      
        res.sellerChargesRechargedToBuyer = sellerChargesRechargedToBuyer
      
        res.comments = comments
      
        res.paymentMethods = paymentMethods
      
        res.presentedDocuments = presentedDocuments
      
        res.paymentDueDates = paymentDueDates
      
        res.riskApproval = riskApproval
      
        res.preArrangedCreditTerms = preArrangedCreditTerms
      
        res.extendedCreditTerms = extendedCreditTerms
      
      res
    }
  
}
