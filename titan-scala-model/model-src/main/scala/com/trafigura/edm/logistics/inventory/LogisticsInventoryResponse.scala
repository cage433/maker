/**
 * WARNING: This file was automatically generated by the Trading Hub tooling version 2.15.
 * Any manual changes may be overwritten and lost!
 */


// Generated from model_object_scala.erb

package com.trafigura.edm.logistics.inventory





import com.trafigura.tradinghub.support._
import scala.collection.JavaConversions._




 class LogisticsInventoryResponse extends com.trafigura.tradinghub.support.ModelObject  {
  


  
    

var associatedInventory:List[com.trafigura.edm.logistics.inventory.EDMInventoryItem] = null
    
    
    

var associatedQuota:List[com.trafigura.edm.logistics.inventory.EDMLogisticsQuota] = null
    
    





  override def equals(o: Any) = o match {
    case r: AnyRef =>
        if (o.isInstanceOf[com.trafigura.edm.logistics.inventory.LogisticsInventoryResponse]) {
            val that = r.asInstanceOf[com.trafigura.edm.logistics.inventory.LogisticsInventoryResponse]
            that.canEqual(this) && this.associatedInventory == that.associatedInventory && this.associatedQuota == that.associatedQuota &&  true
        }
        else false
    case _ => false
  }

  override def canEqual(that : Any) = that.isInstanceOf[com.trafigura.edm.logistics.inventory.LogisticsInventoryResponse]

  override def hashCode = {
    (41 * (41 *  1
    ) +
         (if (associatedInventory == null) 0 else associatedInventory.hashCode) 
    ) +
         (if (associatedQuota == null) 0 else associatedQuota.hashCode) 
    
  }

  override def toString = {
    "{com.trafigura.edm.logistics.inventory.LogisticsInventoryResponse: " + "" + "associatedInventory = " + associatedInventory + ", " + "associatedQuota = " + associatedQuota +  "}"
  }


  
         def toJson() : org.codehaus.jettison.json.JSONObject = {
      toJson(new SerialisationHelper)
    }

     def toJson(differentiator: SerialisationHelper) : org.codehaus.jettison.json.JSONObject = {
        var result = new org.codehaus.jettison.json.JSONObject();

        result.put("_node", differentiator.idFor(this))

        result.put("Type", "EDM.Logistics.Inventory.LogisticsInventoryResponse@1@1.0")
        
          
          
          
          
            result.putOpt("AssociatedInventory", new org.codehaus.jettison.json.JSONArray(if(this.associatedInventory == null) new java.util.ArrayList() else java.util.Arrays.asList(this.associatedInventory.map(t => (t) match { case null => null; case o => o.toJson(differentiator) }).toArray: _*)));
          
        
          
          
          
          
            result.putOpt("AssociatedQuota", new org.codehaus.jettison.json.JSONArray(if(this.associatedQuota == null) new java.util.ArrayList() else java.util.Arrays.asList(this.associatedQuota.map(t => (t) match { case null => null; case o => o.toJson(differentiator) }).toArray: _*)));
          
        
        return result;
    }

     def loadJson(jobj : org.codehaus.jettison.json.JSONObject, cache: DeserialisationHelper) = {
        
        
          
              associatedInventory = JSONConversions.optionalList(jobj.opt("AssociatedInventory"), x => (x) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.edm.logistics.inventory.EDMInventoryItem.fromJson(o, cache))) })
          
              associatedQuota = JSONConversions.optionalList(jobj.opt("AssociatedQuota"), x => (x) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.edm.logistics.inventory.EDMLogisticsQuota.fromJson(o, cache))) })
          
        
    }

  
}

object LogisticsInventoryResponse {
  def version = ModelVersion("1")
  def wireFormatVersion = ModelVersion("1.0")

  
        val jsonTypeName = "EDM.Logistics.Inventory.LogisticsInventoryResponse"

    def fromJson(jobj : org.codehaus.jettison.json.JSONObject, cache: DeserialisationHelper = new DeserialisationHelper) : com.trafigura.edm.logistics.inventory.LogisticsInventoryResponse = {
      val v = TypeHolder(jobj.optString("Type"))

      v.assertModelVersion(version, "com.trafigura.edm.logistics.inventory.LogisticsInventoryResponse")
      v.assertWireFormatVersion(wireFormatVersion, "com.trafigura.edm.logistics.inventory.LogisticsInventoryResponse")

      
        
            val result = new com.trafigura.edm.logistics.inventory.LogisticsInventoryResponse()
            result.loadJson(jobj, cache)
            result
        
      
    }

  

  

  
    def apply(associatedInventory: List[com.trafigura.edm.logistics.inventory.EDMInventoryItem] = null, associatedQuota: List[com.trafigura.edm.logistics.inventory.EDMLogisticsQuota] = null) = {
      val res = new com.trafigura.edm.logistics.inventory.LogisticsInventoryResponse
      
        res.associatedInventory = associatedInventory
      
        res.associatedQuota = associatedQuota
      
      res
    }
  
}
