/**
 * WARNING: This file was automatically generated by the Trading Hub tooling version 2.15.
 * Any manual changes may be overwritten and lost!
 */


// Generated from model_service_json.rb

package com.trafigura.edm.logistics.inventory

import com.trafigura.edm.logistics.inventory._

import org.codehaus.jettison.json.JSONObject
import com.trafigura.tradinghub.support._

// JSON support for EdmInventoryService

object EdmInventoryServiceJSON extends JSONServiceDispatcher[EdmInventoryService] {
  def serviceName = "EDM.Logistics.Inventory.EdmInventoryService"

  def decodeOperationName(jsonName:String) = {
    jsonName match {
      case "GetInventoryById" => "GetInventoryById"
      case "GetInventoryTreeByPurchaseQuotaId" => "GetInventoryTreeByPurchaseQuotaId"
      case "GetInventoryByGroupCompanyId" => "GetInventoryByGroupCompanyId"
      
    }
  }

  def parseParameters(operation:String, params: JSONObject) = {
    operation match {
      
      case "GetInventoryById" =>
        
          val cache = new DeserialisationHelper
          Map("inventoryId" -> (JSONConversions.optional[Int](params.opt("InventoryId"), 0)))
        
      
      case "GetInventoryTreeByPurchaseQuotaId" =>
        
          val cache = new DeserialisationHelper
          Map("quotaId" -> (JSONConversions.optional[String](params.opt("QuotaId"), null)))
        
      
      case "GetInventoryByGroupCompanyId" =>
        
          val cache = new DeserialisationHelper
          Map("groupCompanyMappingCode" -> (JSONConversions.optional[String](params.opt("GroupCompanyMappingCode"), null)))
        
      
    }
  }

  def invoke(target: EdmInventoryService, operation: String, params: Map[String, Any]): Any = {
    operation match {
      
      case "GetInventoryById" =>
        target.getInventoryById(params("inventoryId").asInstanceOf[Int])
      
      case "GetInventoryTreeByPurchaseQuotaId" =>
        target.getInventoryTreeByPurchaseQuotaId(params("quotaId").asInstanceOf[String])
      
      case "GetInventoryByGroupCompanyId" =>
        target.getInventoryByGroupCompanyId(params("groupCompanyMappingCode").asInstanceOf[String])
      
    }
  }

  def addResponse(operation:String, jsonResponse:JSONObject, response:Any) = {
    val differentiator = new SerialisationHelper
    operation match {
      
      case "GetInventoryById" =>
        jsonResponse.putOpt("result", (response.asInstanceOf[com.trafigura.edm.logistics.inventory.LogisticsInventoryResponse]) match { case null => null; case o => o.toJson(differentiator) })
      
      case "GetInventoryTreeByPurchaseQuotaId" =>
        jsonResponse.putOpt("result", (response.asInstanceOf[com.trafigura.edm.logistics.inventory.LogisticsInventoryResponse]) match { case null => null; case o => o.toJson(differentiator) })
      
      case "GetInventoryByGroupCompanyId" =>
        jsonResponse.putOpt("result", (response.asInstanceOf[com.trafigura.edm.logistics.inventory.LogisticsInventoryResponse]) match { case null => null; case o => o.toJson(differentiator) })
      
    }
  }

  
  def serializeGetInventoryById(inventoryId: Int): JSONObject = {
    val differentiator = new SerialisationHelper
    val params = new JSONObject
    
      params.putOpt("InventoryId", inventoryId)
    
    params
  }
  
  def serializeGetInventoryTreeByPurchaseQuotaId(quotaId: String): JSONObject = {
    val differentiator = new SerialisationHelper
    val params = new JSONObject
    
      params.putOpt("QuotaId", quotaId)
    
    params
  }
  
  def serializeGetInventoryByGroupCompanyId(groupCompanyMappingCode: String): JSONObject = {
    val differentiator = new SerialisationHelper
    val params = new JSONObject
    
      params.putOpt("GroupCompanyMappingCode", groupCompanyMappingCode)
    
    params
  }
  

  class Proxy(val handler: (String, JSONObject) => JSONObject) extends EdmInventoryService {
  
    def getInventoryById(inventoryId: Int): com.trafigura.edm.logistics.inventory.LogisticsInventoryResponse = {
        val request = new JSONObject
        request.put("method", "GetInventoryById")
        
        request.put("params", serializeGetInventoryById(inventoryId))
        
        var routing = null
        val response = handler(routing, request)
        if (response == null) {
          null.asInstanceOf[com.trafigura.edm.logistics.inventory.LogisticsInventoryResponse]   // Doesn't work well with primitive types, but we should only see null in cases like discover anyway
        } else {
          val cache = new DeserialisationHelper
          (response.opt("result")) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.edm.logistics.inventory.LogisticsInventoryResponse.fromJson(o, cache))) }
        }
    }
  
    def getInventoryTreeByPurchaseQuotaId(quotaId: String): com.trafigura.edm.logistics.inventory.LogisticsInventoryResponse = {
        val request = new JSONObject
        request.put("method", "GetInventoryTreeByPurchaseQuotaId")
        
        request.put("params", serializeGetInventoryTreeByPurchaseQuotaId(quotaId))
        
        var routing = null
        val response = handler(routing, request)
        if (response == null) {
          null.asInstanceOf[com.trafigura.edm.logistics.inventory.LogisticsInventoryResponse]   // Doesn't work well with primitive types, but we should only see null in cases like discover anyway
        } else {
          val cache = new DeserialisationHelper
          (response.opt("result")) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.edm.logistics.inventory.LogisticsInventoryResponse.fromJson(o, cache))) }
        }
    }
  
    def getInventoryByGroupCompanyId(groupCompanyMappingCode: String): com.trafigura.edm.logistics.inventory.LogisticsInventoryResponse = {
        val request = new JSONObject
        request.put("method", "GetInventoryByGroupCompanyId")
        
        request.put("params", serializeGetInventoryByGroupCompanyId(groupCompanyMappingCode))
        
        var routing = null
        val response = handler(routing, request)
        if (response == null) {
          null.asInstanceOf[com.trafigura.edm.logistics.inventory.LogisticsInventoryResponse]   // Doesn't work well with primitive types, but we should only see null in cases like discover anyway
        } else {
          val cache = new DeserialisationHelper
          (response.opt("result")) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.edm.logistics.inventory.LogisticsInventoryResponse.fromJson(o, cache))) }
        }
    }
  
  }
}

