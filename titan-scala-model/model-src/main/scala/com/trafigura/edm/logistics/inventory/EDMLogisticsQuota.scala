/**
 * WARNING: This file was automatically generated by the Trading Hub tooling version 2.15.
 * Any manual changes may be overwritten and lost!
 */


// Generated from model_object_scala.erb

package com.trafigura.edm.logistics.inventory





import com.trafigura.tradinghub.support._
import scala.collection.JavaConversions._




 class EDMLogisticsQuota extends com.trafigura.tradinghub.support.ModelObject  {
  


  
    

var tradeId:String = null
    
    
    

var fullyAllocated:Boolean = false
    
    
    

var quotaName:String = null
    
    
    

var quotaId:Int = 0
    
    
    

var unallocatedQuantity:com.trafigura.edm.shared.types.Quantity = null
    
    
    

var allocatedQuantity:com.trafigura.edm.shared.types.Quantity = null
    
    
    

var quotaQuantity:com.trafigura.edm.shared.types.Quantity = null
    
    
    

var direction:String = null
    
    





  override def equals(o: Any) = o match {
    case r: AnyRef =>
        if (o.isInstanceOf[com.trafigura.edm.logistics.inventory.EDMLogisticsQuota]) {
            val that = r.asInstanceOf[com.trafigura.edm.logistics.inventory.EDMLogisticsQuota]
            that.canEqual(this) && this.allocatedQuantity == that.allocatedQuantity && this.direction == that.direction && this.fullyAllocated == that.fullyAllocated && this.quotaId == that.quotaId && this.quotaName == that.quotaName && this.quotaQuantity == that.quotaQuantity && this.tradeId == that.tradeId && this.unallocatedQuantity == that.unallocatedQuantity &&  true
        }
        else false
    case _ => false
  }

  override def canEqual(that : Any) = that.isInstanceOf[com.trafigura.edm.logistics.inventory.EDMLogisticsQuota]

  override def hashCode = {
    (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 *  1
    ) +
         (if (allocatedQuantity == null) 0 else allocatedQuantity.hashCode) 
    ) +
         (if (direction == null) 0 else direction.hashCode) 
    ) +
         fullyAllocated.hashCode
        
    ) +
         quotaId.hashCode
        
    ) +
         (if (quotaName == null) 0 else quotaName.hashCode) 
    ) +
         (if (quotaQuantity == null) 0 else quotaQuantity.hashCode) 
    ) +
         (if (tradeId == null) 0 else tradeId.hashCode) 
    ) +
         (if (unallocatedQuantity == null) 0 else unallocatedQuantity.hashCode) 
    
  }

  override def toString = {
    "{com.trafigura.edm.logistics.inventory.EDMLogisticsQuota: " + "" + "allocatedQuantity = " + allocatedQuantity + ", " + "direction = " + direction + ", " + "fullyAllocated = " + fullyAllocated + ", " + "quotaId = " + quotaId + ", " + "quotaName = " + quotaName + ", " + "quotaQuantity = " + quotaQuantity + ", " + "tradeId = " + tradeId + ", " + "unallocatedQuantity = " + unallocatedQuantity +  "}"
  }


  
         def toJson() : org.codehaus.jettison.json.JSONObject = {
      toJson(new SerialisationHelper)
    }

     def toJson(differentiator: SerialisationHelper) : org.codehaus.jettison.json.JSONObject = {
        var result = new org.codehaus.jettison.json.JSONObject();

        result.put("_node", differentiator.idFor(this))

        result.put("Type", "EDM.Logistics.Inventory.EDMLogisticsQuota@1@1.0")
        
          
          
          
          
            result.putOpt("TradeId", this.tradeId);
          
        
          
          
          
          
            result.putOpt("FullyAllocated", this.fullyAllocated);
          
        
          
          
          
          
            result.putOpt("QuotaName", this.quotaName);
          
        
          
          
          
          
            result.putOpt("QuotaId", this.quotaId);
          
        
          
          
          
          
            result.putOpt("UnallocatedQuantity", (this.unallocatedQuantity) match { case null => null; case o => o.toJson(differentiator) });
          
        
          
          
          
          
            result.putOpt("AllocatedQuantity", (this.allocatedQuantity) match { case null => null; case o => o.toJson(differentiator) });
          
        
          
          
          
          
            result.putOpt("QuotaQuantity", (this.quotaQuantity) match { case null => null; case o => o.toJson(differentiator) });
          
        
          
          
          
          
            result.putOpt("Direction", this.direction);
          
        
        return result;
    }

     def loadJson(jobj : org.codehaus.jettison.json.JSONObject, cache: DeserialisationHelper) = {
        
        
          
              tradeId = JSONConversions.optional[String](jobj.opt("TradeId"), null)
          
              fullyAllocated = JSONConversions.optional[Boolean](jobj.opt("FullyAllocated"), false)
          
              quotaName = JSONConversions.optional[String](jobj.opt("QuotaName"), null)
          
              quotaId = JSONConversions.optional[Int](jobj.opt("QuotaId"), 0)
          
              unallocatedQuantity = (jobj.opt("UnallocatedQuantity")) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.edm.shared.types.Quantity.fromJson(o, cache))) }
          
              allocatedQuantity = (jobj.opt("AllocatedQuantity")) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.edm.shared.types.Quantity.fromJson(o, cache))) }
          
              quotaQuantity = (jobj.opt("QuotaQuantity")) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.edm.shared.types.Quantity.fromJson(o, cache))) }
          
              direction = JSONConversions.optional[String](jobj.opt("Direction"), null)
          
        
    }

  
}

object EDMLogisticsQuota {
  def version = ModelVersion("1")
  def wireFormatVersion = ModelVersion("1.0")

  
        val jsonTypeName = "EDM.Logistics.Inventory.EDMLogisticsQuota"

    def fromJson(jobj : org.codehaus.jettison.json.JSONObject, cache: DeserialisationHelper = new DeserialisationHelper) : com.trafigura.edm.logistics.inventory.EDMLogisticsQuota = {
      val v = TypeHolder(jobj.optString("Type"))

      v.assertModelVersion(version, "com.trafigura.edm.logistics.inventory.EDMLogisticsQuota")
      v.assertWireFormatVersion(wireFormatVersion, "com.trafigura.edm.logistics.inventory.EDMLogisticsQuota")

      
        
            val result = new com.trafigura.edm.logistics.inventory.EDMLogisticsQuota()
            result.loadJson(jobj, cache)
            result
        
      
    }

  

  
  val PURCHASE = "P"
  
  val SALE = "S"
  

  
    def apply(tradeId: String = null, fullyAllocated: Boolean = false, quotaName: String = null, quotaId: Int = 0, unallocatedQuantity: com.trafigura.edm.shared.types.Quantity = null, allocatedQuantity: com.trafigura.edm.shared.types.Quantity = null, quotaQuantity: com.trafigura.edm.shared.types.Quantity = null, direction: String = null) = {
      val res = new com.trafigura.edm.logistics.inventory.EDMLogisticsQuota
      
        res.tradeId = tradeId
      
        res.fullyAllocated = fullyAllocated
      
        res.quotaName = quotaName
      
        res.quotaId = quotaId
      
        res.unallocatedQuantity = unallocatedQuantity
      
        res.allocatedQuantity = allocatedQuantity
      
        res.quotaQuantity = quotaQuantity
      
        res.direction = direction
      
      res
    }
  
}
