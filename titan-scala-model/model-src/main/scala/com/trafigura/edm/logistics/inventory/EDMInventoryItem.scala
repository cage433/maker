/**
 * WARNING: This file was automatically generated by the Trading Hub tooling version 2.15.
 * Any manual changes may be overwritten and lost!
 */


// Generated from model_object_scala.erb

package com.trafigura.edm.logistics.inventory





import com.trafigura.tradinghub.support._
import scala.collection.JavaConversions._




 class EDMInventoryItem extends com.trafigura.tradinghub.support.ModelObject  {
  


  
    

var oid:IntID = null
    
    
    

var parentId:scala.Option[Int] = None
    
    
    

var purchaseAssignment:com.trafigura.edm.logistics.inventory.EDMAssignment = null
    
    
    

var salesAssignment:com.trafigura.edm.logistics.inventory.EDMAssignment = null
    
    
    

var quantity:com.trafigura.edm.shared.types.Quantity = null
    
    
    

var status:EDMInventoryItemStatusEnum = null
    
    
    

var trafficOperatorId:Int = 0
    
    
    

var productSpec:com.trafigura.edm.materialspecification.ProductSpec = null
    
    
    

var expectedReceiptDate:org.joda.time.LocalDate = null
    
    
    

var receiptDate:org.joda.time.LocalDate = null
    
    
    

var deliveredDate:org.joda.time.LocalDate = null
    
    
    

var deleted:Boolean = false
    
    
    

var cargoStatus:com.trafigura.edm.logistics.inventory.CargoStatus = null
    
    
    

var warehouse:GUID = null
    
    





  override def equals(o: Any) = o match {
    case r: AnyRef =>
        if (o.isInstanceOf[com.trafigura.edm.logistics.inventory.EDMInventoryItem]) {
            val that = r.asInstanceOf[com.trafigura.edm.logistics.inventory.EDMInventoryItem]
            that.canEqual(this) && this.cargoStatus == that.cargoStatus && this.deleted == that.deleted && this.deliveredDate == that.deliveredDate && this.expectedReceiptDate == that.expectedReceiptDate && this.oid == that.oid && this.parentId == that.parentId && this.productSpec == that.productSpec && this.purchaseAssignment == that.purchaseAssignment && this.quantity == that.quantity && this.receiptDate == that.receiptDate && this.salesAssignment == that.salesAssignment && this.status == that.status && this.trafficOperatorId == that.trafficOperatorId && this.warehouse == that.warehouse &&  true
        }
        else false
    case _ => false
  }

  override def canEqual(that : Any) = that.isInstanceOf[com.trafigura.edm.logistics.inventory.EDMInventoryItem]

  override def hashCode = {
    (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 *  1
    ) +
         (if (cargoStatus == null) 0 else cargoStatus.hashCode) 
    ) +
         deleted.hashCode
        
    ) +
         (if (deliveredDate == null) 0 else deliveredDate.hashCode) 
    ) +
         (if (expectedReceiptDate == null) 0 else expectedReceiptDate.hashCode) 
    ) +
         (if (oid == null) 0 else oid.hashCode) 
    ) +
         (if (parentId == null) 0 else parentId.hashCode) 
    ) +
         (if (productSpec == null) 0 else productSpec.hashCode) 
    ) +
         (if (purchaseAssignment == null) 0 else purchaseAssignment.hashCode) 
    ) +
         (if (quantity == null) 0 else quantity.hashCode) 
    ) +
         (if (receiptDate == null) 0 else receiptDate.hashCode) 
    ) +
         (if (salesAssignment == null) 0 else salesAssignment.hashCode) 
    ) +
         (if (status == null) 0 else status.hashCode) 
    ) +
         trafficOperatorId.hashCode
        
    ) +
         (if (warehouse == null) 0 else warehouse.hashCode) 
    
  }

  override def toString = {
    "{com.trafigura.edm.logistics.inventory.EDMInventoryItem: " + "" + "cargoStatus = " + cargoStatus + ", " + "deleted = " + deleted + ", " + "deliveredDate = " + deliveredDate + ", " + "expectedReceiptDate = " + expectedReceiptDate + ", " + "oid = " + oid + ", " + "parentId = " + parentId + ", " + "productSpec = " + productSpec + ", " + "purchaseAssignment = " + purchaseAssignment + ", " + "quantity = " + quantity + ", " + "receiptDate = " + receiptDate + ", " + "salesAssignment = " + salesAssignment + ", " + "status = " + status + ", " + "trafficOperatorId = " + trafficOperatorId + ", " + "warehouse = " + warehouse +  "}"
  }


  
         def toJson() : org.codehaus.jettison.json.JSONObject = {
      toJson(new SerialisationHelper)
    }

     def toJson(differentiator: SerialisationHelper) : org.codehaus.jettison.json.JSONObject = {
        var result = new org.codehaus.jettison.json.JSONObject();

        result.put("_node", differentiator.idFor(this))

        result.put("Type", "EDM.Logistics.Inventory.EDMInventoryItem@1@1.0")
        
          
          
          
          
            result.putOpt("Oid", if (this.oid == null) null else this.oid.intValue());
          
        
          
          
          
          
            result.putOpt("ParentId", this.parentId.getOrElse(null));
          
        
          
          
          
          
            result.putOpt("PurchaseAssignment", (this.purchaseAssignment) match { case null => null; case o => o.toJson(differentiator) });
          
        
          
          
          
          
            result.putOpt("SalesAssignment", (this.salesAssignment) match { case null => null; case o => o.toJson(differentiator) });
          
        
          
          
          
          
            result.putOpt("Quantity", (this.quantity) match { case null => null; case o => o.toJson(differentiator) });
          
        
          
          
          
          
            result.putOpt("Status", (this.status) match { case null => null; case o => o.toJson });
          
        
          
          
          
          
            result.putOpt("TrafficOperatorId", this.trafficOperatorId);
          
        
          
          
          
          
            result.putOpt("ProductSpec", (this.productSpec) match { case null => null; case o => o.toJson(differentiator) });
          
        
          
          
          
          
            result.putOpt("ExpectedReceiptDate", JSONConversions.optionalDateToJSON(this.expectedReceiptDate));
          
        
          
          
          
          
            result.putOpt("ReceiptDate", JSONConversions.optionalDateToJSON(this.receiptDate));
          
        
          
          
          
          
            result.putOpt("DeliveredDate", JSONConversions.optionalDateToJSON(this.deliveredDate));
          
        
          
          
          
          
            result.putOpt("Deleted", this.deleted);
          
        
          
          
          
          
            result.putOpt("CargoStatus", (this.cargoStatus) match { case null => null; case o => o.toJson(differentiator) });
          
        
          
          
          
          
            result.putOpt("Warehouse", if (this.warehouse == null) null else this.warehouse.toJson);
          
        
        return result;
    }

     def loadJson(jobj : org.codehaus.jettison.json.JSONObject, cache: DeserialisationHelper) = {
        
        
          
              oid = if (jobj.opt("Oid") == null) null else IntID(JSONConversions.optional[Int](jobj.opt("Oid"), 0))
          
              parentId = (jobj.opt("ParentId")) match {case null => None; case n:Number => Some(n.intValue()); case _ => None}
          
              purchaseAssignment = (jobj.opt("PurchaseAssignment")) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.edm.logistics.inventory.EDMAssignment.fromJson(o, cache))) }
          
              salesAssignment = (jobj.opt("SalesAssignment")) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.edm.logistics.inventory.EDMAssignment.fromJson(o, cache))) }
          
              quantity = (jobj.opt("Quantity")) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.edm.shared.types.Quantity.fromJson(o, cache))) }
          
              status = (jobj.optString("Status")) match { case null => null; case s: String => EDMInventoryItemStatusEnum.forName(s) }
          
              trafficOperatorId = JSONConversions.optional[Int](jobj.opt("TrafficOperatorId"), 0)
          
              productSpec = (jobj.opt("ProductSpec")) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.edm.materialspecification.ProductSpec.fromJson(o, cache))) }
          
              expectedReceiptDate = JSONConversions.optionalDate(jobj.opt("ExpectedReceiptDate"))
          
              receiptDate = JSONConversions.optionalDate(jobj.opt("ReceiptDate"))
          
              deliveredDate = JSONConversions.optionalDate(jobj.opt("DeliveredDate"))
          
              deleted = JSONConversions.optional[Boolean](jobj.opt("Deleted"), false)
          
              cargoStatus = (jobj.opt("CargoStatus")) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.edm.logistics.inventory.CargoStatus.fromJson(o, cache))) }
          
              warehouse = if (jobj.opt("Warehouse") == null) null else GUID(JSONConversions.optional[String](jobj.opt("Warehouse"), null))
          
        
    }

  
}

object EDMInventoryItem {
  def version = ModelVersion("1")
  def wireFormatVersion = ModelVersion("1.0")

  
        val jsonTypeName = "EDM.Logistics.Inventory.EDMInventoryItem"

    def fromJson(jobj : org.codehaus.jettison.json.JSONObject, cache: DeserialisationHelper = new DeserialisationHelper) : com.trafigura.edm.logistics.inventory.EDMInventoryItem = {
      val v = TypeHolder(jobj.optString("Type"))

      v.assertModelVersion(version, "com.trafigura.edm.logistics.inventory.EDMInventoryItem")
      v.assertWireFormatVersion(wireFormatVersion, "com.trafigura.edm.logistics.inventory.EDMInventoryItem")

      
        
            val result = new com.trafigura.edm.logistics.inventory.EDMInventoryItem()
            result.loadJson(jobj, cache)
            result
        
      
    }

  

  

  
    def apply(oid: IntID = null, parentId: scala.Option[Int] = None, purchaseAssignment: com.trafigura.edm.logistics.inventory.EDMAssignment = null, salesAssignment: com.trafigura.edm.logistics.inventory.EDMAssignment = null, quantity: com.trafigura.edm.shared.types.Quantity = null, status: EDMInventoryItemStatusEnum = null, trafficOperatorId: Int = 0, productSpec: com.trafigura.edm.materialspecification.ProductSpec = null, expectedReceiptDate: org.joda.time.LocalDate = null, receiptDate: org.joda.time.LocalDate = null, deliveredDate: org.joda.time.LocalDate = null, deleted: Boolean = false, cargoStatus: com.trafigura.edm.logistics.inventory.CargoStatus = null, warehouse: GUID = null) = {
      val res = new com.trafigura.edm.logistics.inventory.EDMInventoryItem
      
        res.oid = oid
      
        res.parentId = parentId
      
        res.purchaseAssignment = purchaseAssignment
      
        res.salesAssignment = salesAssignment
      
        res.quantity = quantity
      
        res.status = status
      
        res.trafficOperatorId = trafficOperatorId
      
        res.productSpec = productSpec
      
        res.expectedReceiptDate = expectedReceiptDate
      
        res.receiptDate = receiptDate
      
        res.deliveredDate = deliveredDate
      
        res.deleted = deleted
      
        res.cargoStatus = cargoStatus
      
        res.warehouse = warehouse
      
      res
    }
  
}
