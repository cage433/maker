/**
 * WARNING: This file was automatically generated by the Trading Hub tooling version 2.15.
 * Any manual changes may be overwritten and lost!
 */


// Generated from model_object_scala.erb

package com.trafigura.edm.shared.types





import com.trafigura.tradinghub.support._
import scala.collection.JavaConversions._



/**
 EDM_Quantity - a Price and Currency / Uom type representing some amount (possibly in a a currency) per UOM
  (in EDM currency is a UOM and quantity is a amount/uom type - and in the EDM the UOM is a recursively defined structure that can be composed of 1 or more other UOMs)
   refined-metals already has a simple UOM and currency type (defined by ref-data sources)
   - so further reconciliation will be needed here in the future)
 */


 class EDMQuantity extends com.trafigura.tradinghub.support.ModelObject  {
  


  
    

var amount:scala.Option[Double] = None
    
    
    
    /**
     'Currency'
     */

var currencyId:scala.Option[Int] = None
    
    
    

var uomId:scala.Option[Int] = None
    
    





  override def equals(o: Any) = o match {
    case r: AnyRef =>
        if (o.isInstanceOf[com.trafigura.edm.shared.types.EDMQuantity]) {
            val that = r.asInstanceOf[com.trafigura.edm.shared.types.EDMQuantity]
            that.canEqual(this) && this.amount == that.amount && this.currencyId == that.currencyId && this.uomId == that.uomId &&  true
        }
        else false
    case _ => false
  }

  override def canEqual(that : Any) = that.isInstanceOf[com.trafigura.edm.shared.types.EDMQuantity]

  override def hashCode = {
    (41 * (41 * (41 *  1
    ) +
         (if (amount == null) 0 else amount.hashCode) 
    ) +
         (if (currencyId == null) 0 else currencyId.hashCode) 
    ) +
         (if (uomId == null) 0 else uomId.hashCode) 
    
  }

  override def toString = {
    "{com.trafigura.edm.shared.types.EDMQuantity: " + "" + "amount = " + amount + ", " + "currencyId = " + currencyId + ", " + "uomId = " + uomId +  "}"
  }


  
         def toJson() : org.codehaus.jettison.json.JSONObject = {
      toJson(new SerialisationHelper)
    }

     def toJson(differentiator: SerialisationHelper) : org.codehaus.jettison.json.JSONObject = {
        var result = new org.codehaus.jettison.json.JSONObject();

        result.put("_node", differentiator.idFor(this))

        result.put("Type", "EDM.shared.types.EDM_Quantity@1@1.0")
        
          
          
          
          if(this.amount != None) {
            result.putOpt("Amount", this.amount.getOrElse(null));
          }
        
          
          
          
          if(this.currencyId != None) {
            result.putOpt("CurrencyId", (this.currencyId.get));
          }
        
          
          
          
          if(this.uomId != None) {
            result.putOpt("UomId", (this.uomId.get));
          }
        
        return result;
    }

     def loadJson(jobj : org.codehaus.jettison.json.JSONObject, cache: DeserialisationHelper) = {
        
        
          
              amount = (jobj.opt("Amount")) match {case null => None; case n:Number => Some(n.doubleValue()); case _ => None}
          
              currencyId = (jobj.opt("CurrencyId")) match {case null => None; case n:Number => Some(n.intValue()); case _ => None}
          
              uomId = (jobj.opt("UomId")) match {case null => None; case n:Number => Some(n.intValue()); case _ => None}
          
        
    }

  
}

object EDMQuantity {
  def version = ModelVersion("1")
  def wireFormatVersion = ModelVersion("1.0")

  
        val jsonTypeName = "EDM.shared.types.EDM_Quantity"

    def fromJson(jobj : org.codehaus.jettison.json.JSONObject, cache: DeserialisationHelper = new DeserialisationHelper) : com.trafigura.edm.shared.types.EDMQuantity = {
      val v = TypeHolder(jobj.optString("Type"))

      v.assertModelVersion(version, "com.trafigura.edm.shared.types.EDMQuantity")
      v.assertWireFormatVersion(wireFormatVersion, "com.trafigura.edm.shared.types.EDMQuantity")

      
        
            val result = new com.trafigura.edm.shared.types.EDMQuantity()
            result.loadJson(jobj, cache)
            result
        
      
    }

  

  

  
    def apply(amount: scala.Option[Double] = None, currencyId: scala.Option[Int] = None, uomId: scala.Option[Int] = None) = {
      val res = new com.trafigura.edm.shared.types.EDMQuantity
      
        res.amount = amount
      
        res.currencyId = currencyId
      
        res.uomId = uomId
      
      res
    }
  
}
