/**
 * WARNING: This file was automatically generated by the Trading Hub tooling version 2.15.
 * Any manual changes may be overwritten and lost!
 */


// Generated from model_object_scala.erb

package com.trafigura.edm.shared.types





import com.trafigura.tradinghub.support._
import scala.collection.JavaConversions._



/**
 EDM common types
 */


 abstract class UOM extends com.trafigura.tradinghub.support.ModelObject  {
  


  
    

var name:String = null
    
    





  override def equals(o: Any) = o match {
    case r: AnyRef =>
        if (o.isInstanceOf[com.trafigura.edm.shared.types.UOM]) {
            val that = r.asInstanceOf[com.trafigura.edm.shared.types.UOM]
            that.canEqual(this) && this.name == that.name &&  true
        }
        else false
    case _ => false
  }

  override def canEqual(that : Any) = that.isInstanceOf[com.trafigura.edm.shared.types.UOM]

  override def hashCode = {
    (41 *  1
    ) +
         (if (name == null) 0 else name.hashCode) 
    
  }

  override def toString = {
    "{com.trafigura.edm.shared.types.UOM: " + "" + "name = " + name +  "}"
  }


  
         def toJson() : org.codehaus.jettison.json.JSONObject = {
      toJson(new SerialisationHelper)
    }

     def toJson(differentiator: SerialisationHelper) : org.codehaus.jettison.json.JSONObject = {
        var result = new org.codehaus.jettison.json.JSONObject();

        result.put("_node", differentiator.idFor(this))

        result.put("Type", "EDM.shared.types.UOM@1@1.0")
        
          
          
          
          
            result.putOpt("Name", this.name);
          
        
        return result;
    }

     def loadJson(jobj : org.codehaus.jettison.json.JSONObject, cache: DeserialisationHelper) = {
        
        
          
              name = JSONConversions.optional[String](jobj.opt("Name"), null)
          
        
    }

  
}

object UOM {
  def version = ModelVersion("1")
  def wireFormatVersion = ModelVersion("1.0")

  
        val jsonTypeName = "EDM.shared.types.UOM"

    def fromJson(jobj : org.codehaus.jettison.json.JSONObject, cache: DeserialisationHelper = new DeserialisationHelper) : com.trafigura.edm.shared.types.UOM = {
      val v = TypeHolder(jobj.optString("Type"))

      v.assertModelVersion(version, "com.trafigura.edm.shared.types.UOM")
      v.assertWireFormatVersion(wireFormatVersion, "com.trafigura.edm.shared.types.UOM")

      
        
              v.typeName match {
              
                case "EDM.shared.types.FundamentalUOM" =>
                  
                     val result = new com.trafigura.edm.shared.types.FundamentalUOM()
                     result.loadJson(jobj, cache)
                     result
                  
              
                case "EDM.shared.types.Currency" =>
                  
                     val result = new com.trafigura.edm.shared.types.Currency()
                     result.loadJson(jobj, cache)
                     result
                  
              
                case "EDM.shared.types.CompoundUOM" =>
                  
                     val result = new com.trafigura.edm.shared.types.CompoundUOM()
                     result.loadJson(jobj, cache)
                     result
                  
              
                case _ =>
                  
                    throw new RuntimeException("Tried to instantiate abstract class  com.trafigura.edm.shared.types.UOM. Type name was "+v.typeName)
                  
            }
        
      
    }

  

  

  
}
