/**
 * WARNING: This file was automatically generated by the Trading Hub tooling version 2.15.
 * Any manual changes may be overwritten and lost!
 */


// Generated from model_object_scala.erb

package com.trafigura.edm.shared.types





import com.trafigura.tradinghub.support._
import scala.collection.JavaConversions._



/**
 define('DateRange') {
     field 'startDate',                :date
     field 'endDate',                  :date
   }
 */


 class Percentage extends com.trafigura.tradinghub.support.ModelObject  {
  


  
    

var amount:scala.Option[Double] = None
    
    





  override def equals(o: Any) = o match {
    case r: AnyRef =>
        if (o.isInstanceOf[com.trafigura.edm.shared.types.Percentage]) {
            val that = r.asInstanceOf[com.trafigura.edm.shared.types.Percentage]
            that.canEqual(this) && this.amount == that.amount &&  true
        }
        else false
    case _ => false
  }

  override def canEqual(that : Any) = that.isInstanceOf[com.trafigura.edm.shared.types.Percentage]

  override def hashCode = {
    (41 *  1
    ) +
         (if (amount == null) 0 else amount.hashCode) 
    
  }

  override def toString = {
    "{com.trafigura.edm.shared.types.Percentage: " + "" + "amount = " + amount +  "}"
  }


  
         def toJson() : org.codehaus.jettison.json.JSONObject = {
      toJson(new SerialisationHelper)
    }

     def toJson(differentiator: SerialisationHelper) : org.codehaus.jettison.json.JSONObject = {
        var result = new org.codehaus.jettison.json.JSONObject();

        result.put("_node", differentiator.idFor(this))

        result.put("Type", "EDM.shared.types.Percentage@1@1.0")
        
          
          
          
          if(this.amount != None) {
            result.putOpt("Amount", this.amount.getOrElse(null));
          }
        
        return result;
    }

     def loadJson(jobj : org.codehaus.jettison.json.JSONObject, cache: DeserialisationHelper) = {
        
        
          
              amount = (jobj.opt("Amount")) match {case null => None; case n:Number => Some(n.doubleValue()); case _ => None}
          
        
    }

  
}

object Percentage {
  def version = ModelVersion("1")
  def wireFormatVersion = ModelVersion("1.0")

  
        val jsonTypeName = "EDM.shared.types.Percentage"

    def fromJson(jobj : org.codehaus.jettison.json.JSONObject, cache: DeserialisationHelper = new DeserialisationHelper) : com.trafigura.edm.shared.types.Percentage = {
      val v = TypeHolder(jobj.optString("Type"))

      v.assertModelVersion(version, "com.trafigura.edm.shared.types.Percentage")
      v.assertWireFormatVersion(wireFormatVersion, "com.trafigura.edm.shared.types.Percentage")

      
        
            val result = new com.trafigura.edm.shared.types.Percentage()
            result.loadJson(jobj, cache)
            result
        
      
    }

  

  

  
    def apply(amount: scala.Option[Double] = None) = {
      val res = new com.trafigura.edm.shared.types.Percentage
      
        res.amount = amount
      
      res
    }
  
}
