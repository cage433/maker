/**
 * WARNING: This file was automatically generated by the Trading Hub tooling version 2.15.
 * Any manual changes may be overwritten and lost!
 */


// Generated from model_object_scala.erb

package com.trafigura.edm.trades





import com.trafigura.tradinghub.support._
import scala.collection.JavaConversions._




 class TradeAmendmentDocLangDetails extends com.trafigura.tradinghub.support.ModelObject  {
  


  
    
    /**
     field 'oid',                 :integer, :identifier => true
     */

var languageCode:String = null
    
    
    

var version:org.joda.time.DateTime = null
    
    





  override def equals(o: Any) = o match {
    case r: AnyRef =>
        if (o.isInstanceOf[com.trafigura.edm.trades.TradeAmendmentDocLangDetails]) {
            val that = r.asInstanceOf[com.trafigura.edm.trades.TradeAmendmentDocLangDetails]
            that.canEqual(this) && this.languageCode == that.languageCode && this.version == that.version &&  true
        }
        else false
    case _ => false
  }

  override def canEqual(that : Any) = that.isInstanceOf[com.trafigura.edm.trades.TradeAmendmentDocLangDetails]

  override def hashCode = {
    (41 * (41 *  1
    ) +
         (if (languageCode == null) 0 else languageCode.hashCode) 
    ) +
         (if (version == null) 0 else version.hashCode) 
    
  }

  override def toString = {
    "{com.trafigura.edm.trades.TradeAmendmentDocLangDetails: " + "" + "languageCode = " + languageCode + ", " + "version = " + version +  "}"
  }


  
         def toJson() : org.codehaus.jettison.json.JSONObject = {
      toJson(new SerialisationHelper)
    }

     def toJson(differentiator: SerialisationHelper) : org.codehaus.jettison.json.JSONObject = {
        var result = new org.codehaus.jettison.json.JSONObject();

        result.put("_node", differentiator.idFor(this))

        result.put("Type", "EDM.Trades.TradeAmendmentDocLangDetails@1@1.0")
        
          
          
          
          
            result.putOpt("LanguageCode", this.languageCode);
          
        
          
          
          
          
            result.putOpt("Version", JSONConversions.optionalDatetimeToJSON(this.version));
          
        
        return result;
    }

     def loadJson(jobj : org.codehaus.jettison.json.JSONObject, cache: DeserialisationHelper) = {
        
        
          
              languageCode = JSONConversions.optional[String](jobj.opt("LanguageCode"), null)
          
              version = JSONConversions.optionalDatetime(jobj.opt("Version"))
          
        
    }

  
}

object TradeAmendmentDocLangDetails {
  def version = ModelVersion("1")
  def wireFormatVersion = ModelVersion("1.0")

  
        val jsonTypeName = "EDM.Trades.TradeAmendmentDocLangDetails"

    def fromJson(jobj : org.codehaus.jettison.json.JSONObject, cache: DeserialisationHelper = new DeserialisationHelper) : com.trafigura.edm.trades.TradeAmendmentDocLangDetails = {
      val v = TypeHolder(jobj.optString("Type"))

      v.assertModelVersion(version, "com.trafigura.edm.trades.TradeAmendmentDocLangDetails")
      v.assertWireFormatVersion(wireFormatVersion, "com.trafigura.edm.trades.TradeAmendmentDocLangDetails")

      
        
            val result = new com.trafigura.edm.trades.TradeAmendmentDocLangDetails()
            result.loadJson(jobj, cache)
            result
        
      
    }

  

  

  
    def apply(languageCode: String = null, version: org.joda.time.DateTime = null) = {
      val res = new com.trafigura.edm.trades.TradeAmendmentDocLangDetails
      
        res.languageCode = languageCode
      
        res.version = version
      
      res
    }
  
}
