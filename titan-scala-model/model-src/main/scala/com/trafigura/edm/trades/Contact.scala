/**
 * WARNING: This file was automatically generated by the Trading Hub tooling version 2.15.
 * Any manual changes may be overwritten and lost!
 */


// Generated from model_object_scala.erb

package com.trafigura.edm.trades





import com.trafigura.tradinghub.support._
import scala.collection.JavaConversions._




 class Contact extends com.trafigura.tradinghub.support.ModelObject  {
  


  





  override def equals(o: Any) = o match {
    case r: AnyRef =>
        if (o.isInstanceOf[com.trafigura.edm.trades.Contact]) {
            val that = r.asInstanceOf[com.trafigura.edm.trades.Contact]
            that.canEqual(this) &&  true
        }
        else false
    case _ => false
  }

  override def canEqual(that : Any) = that.isInstanceOf[com.trafigura.edm.trades.Contact]

  override def hashCode = {
     1
    
  }

  override def toString = {
    "{com.trafigura.edm.trades.Contact: " + "" +  "}"
  }


  
         def toJson() : org.codehaus.jettison.json.JSONObject = {
      toJson(new SerialisationHelper)
    }

     def toJson(differentiator: SerialisationHelper) : org.codehaus.jettison.json.JSONObject = {
        var result = new org.codehaus.jettison.json.JSONObject();

        result.put("_node", differentiator.idFor(this))

        result.put("Type", "EDM.Trades.Contact@1@1.0")
        
        return result;
    }

     def loadJson(jobj : org.codehaus.jettison.json.JSONObject, cache: DeserialisationHelper) = {
        
        
          
        
    }

  
}

object Contact {
  def version = ModelVersion("1")
  def wireFormatVersion = ModelVersion("1.0")

  
        val jsonTypeName = "EDM.Trades.Contact"

    def fromJson(jobj : org.codehaus.jettison.json.JSONObject, cache: DeserialisationHelper = new DeserialisationHelper) : com.trafigura.edm.trades.Contact = {
      val v = TypeHolder(jobj.optString("Type"))

      v.assertModelVersion(version, "com.trafigura.edm.trades.Contact")
      v.assertWireFormatVersion(wireFormatVersion, "com.trafigura.edm.trades.Contact")

      
        
            val result = new com.trafigura.edm.trades.Contact()
            result.loadJson(jobj, cache)
            result
        
      
    }

  

  

  
    def apply() = {
      val res = new com.trafigura.edm.trades.Contact
      
      res
    }
  
}
