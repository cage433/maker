/**
 * WARNING: This file was automatically generated by the Trading Hub tooling version 2.15.
 * Any manual changes may be overwritten and lost!
 */


// Generated from model_object_scala.erb

package com.trafigura.edm.trades





import com.trafigura.tradinghub.support._
import scala.collection.JavaConversions._




 class Trade extends com.trafigura.edm.trades.Transaction  {
  


  
    

var contractHandlerId:scala.Option[Int] = None
    
    
    

var groupCompany:GUID = null
    
    
    

var state:TradeStateEnum = null
    
    
    

var originatingOffice:GUID = null
    
    
    

var analystId:scala.Option[Int] = None
    
    
    

var traderId:scala.Option[Int] = None
    
    
    

var submitterId:scala.Option[Int] = None
    
    
    

var operatorId:scala.Option[Int] = None
    
    
    

var direction:String = null
    
    
    

var contractDraftedDate:org.joda.time.LocalDate = null
    
    
    

var contractReceivedDate:org.joda.time.LocalDate = null
    
    
    

var brokerContractReceivedDate:org.joda.time.LocalDate = null
    
    
    

var responseSentDate:org.joda.time.LocalDate = null
    
    
    

var contractSentDate:org.joda.time.LocalDate = null
    
    
    

var submitted:org.joda.time.DateTime = null
    
    
    

var contractFinalised:Boolean = false
    
    
    

var contractComment:String = null
    
    
    

var contractualAgreement:com.trafigura.edm.trades.ContractualAgreement = null
    
    
    

var tradeContractTerms:com.trafigura.edm.trades.TradeContractTerms = null
    
    
    

var titanId:com.trafigura.edm.shared.types.TitanId = null
    
    
    

var guid:GUID = null
    
    





  override def equals(o: Any) = o match {
    case r: AnyRef =>
        if (o.isInstanceOf[com.trafigura.edm.trades.Trade]) {
            val that = r.asInstanceOf[com.trafigura.edm.trades.Trade]
            that.canEqual(this) && this.analystId == that.analystId && this.book == that.book && this.brokerContractReceivedDate == that.brokerContractReceivedDate && this.comments == that.comments && this.contractComment == that.contractComment && this.contractDraftedDate == that.contractDraftedDate && this.contractFinalised == that.contractFinalised && this.contractHandlerId == that.contractHandlerId && this.contractReceivedDate == that.contractReceivedDate && this.contractSentDate == that.contractSentDate && this.contractualAgreement == that.contractualAgreement && this.direction == that.direction && this.groupCompany == that.groupCompany && this.guid == that.guid && this.operatorId == that.operatorId && this.originatingOffice == that.originatingOffice && this.responseSentDate == that.responseSentDate && this.state == that.state && this.submitted == that.submitted && this.submitterId == that.submitterId && this.titanId == that.titanId && this.tradeContractTerms == that.tradeContractTerms && this.traderId == that.traderId &&  true
        }
        else false
    case _ => false
  }

  override def canEqual(that : Any) = that.isInstanceOf[com.trafigura.edm.trades.Trade]

  override def hashCode = {
    (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 *  1
    ) +
         (if (analystId == null) 0 else analystId.hashCode) 
    ) +
         (if (book == null) 0 else book.hashCode) 
    ) +
         (if (brokerContractReceivedDate == null) 0 else brokerContractReceivedDate.hashCode) 
    ) +
         (if (comments == null) 0 else comments.hashCode) 
    ) +
         (if (contractComment == null) 0 else contractComment.hashCode) 
    ) +
         (if (contractDraftedDate == null) 0 else contractDraftedDate.hashCode) 
    ) +
         contractFinalised.hashCode
        
    ) +
         (if (contractHandlerId == null) 0 else contractHandlerId.hashCode) 
    ) +
         (if (contractReceivedDate == null) 0 else contractReceivedDate.hashCode) 
    ) +
         (if (contractSentDate == null) 0 else contractSentDate.hashCode) 
    ) +
         (if (contractualAgreement == null) 0 else contractualAgreement.hashCode) 
    ) +
         (if (direction == null) 0 else direction.hashCode) 
    ) +
         (if (groupCompany == null) 0 else groupCompany.hashCode) 
    ) +
         (if (guid == null) 0 else guid.hashCode) 
    ) +
         (if (operatorId == null) 0 else operatorId.hashCode) 
    ) +
         (if (originatingOffice == null) 0 else originatingOffice.hashCode) 
    ) +
         (if (responseSentDate == null) 0 else responseSentDate.hashCode) 
    ) +
         (if (state == null) 0 else state.hashCode) 
    ) +
         (if (submitted == null) 0 else submitted.hashCode) 
    ) +
         (if (submitterId == null) 0 else submitterId.hashCode) 
    ) +
         (if (titanId == null) 0 else titanId.hashCode) 
    ) +
         (if (tradeContractTerms == null) 0 else tradeContractTerms.hashCode) 
    ) +
         (if (traderId == null) 0 else traderId.hashCode) 
    
  }

  override def toString = {
    "{com.trafigura.edm.trades.Trade: " + "" + "analystId = " + analystId + ", " + "book = " + book + ", " + "brokerContractReceivedDate = " + brokerContractReceivedDate + ", " + "comments = " + comments + ", " + "contractComment = " + contractComment + ", " + "contractDraftedDate = " + contractDraftedDate + ", " + "contractFinalised = " + contractFinalised + ", " + "contractHandlerId = " + contractHandlerId + ", " + "contractReceivedDate = " + contractReceivedDate + ", " + "contractSentDate = " + contractSentDate + ", " + "contractualAgreement = " + contractualAgreement + ", " + "direction = " + direction + ", " + "groupCompany = " + groupCompany + ", " + "guid = " + guid + ", " + "operatorId = " + operatorId + ", " + "originatingOffice = " + originatingOffice + ", " + "responseSentDate = " + responseSentDate + ", " + "state = " + state + ", " + "submitted = " + submitted + ", " + "submitterId = " + submitterId + ", " + "titanId = " + titanId + ", " + "tradeContractTerms = " + tradeContractTerms + ", " + "traderId = " + traderId +  "}"
  }


  
        override def toJson() : org.codehaus.jettison.json.JSONObject = {
      toJson(new SerialisationHelper)
    }

    override def toJson(differentiator: SerialisationHelper) : org.codehaus.jettison.json.JSONObject = {
        var result = super.toJson(differentiator);

        result.put("_node", differentiator.idFor(this))

        result.put("Type", "EDM.Trades.Trade@1@1.0")
        
          
          
          
          if(this.contractHandlerId != None) {
            result.putOpt("ContractHandlerId", (this.contractHandlerId.get));
          }
        
          
          
          
          
            result.putOpt("GroupCompany", if (this.groupCompany == null) null else this.groupCompany.toJson);
          
        
          
          
          
          
            result.putOpt("State", (this.state) match { case null => null; case o => o.toJson });
          
        
          
          
          
          
            result.putOpt("OriginatingOffice", if (this.originatingOffice == null) null else this.originatingOffice.toJson);
          
        
          
          
          
          if(this.analystId != None) {
            result.putOpt("AnalystId", (this.analystId.get));
          }
        
          
          
          
          if(this.traderId != None) {
            result.putOpt("TraderId", (this.traderId.get));
          }
        
          
          
          
          if(this.submitterId != None) {
            result.putOpt("SubmitterId", (this.submitterId.get));
          }
        
          
          
          
          if(this.operatorId != None) {
            result.putOpt("OperatorId", (this.operatorId.get));
          }
        
          
          
          
          
            result.putOpt("Direction", this.direction);
          
        
          
          
          
          
            result.putOpt("ContractDraftedDate", JSONConversions.optionalDateToJSON(this.contractDraftedDate));
          
        
          
          
          
          
            result.putOpt("ContractReceivedDate", JSONConversions.optionalDateToJSON(this.contractReceivedDate));
          
        
          
          
          
          
            result.putOpt("BrokerContractReceivedDate", JSONConversions.optionalDateToJSON(this.brokerContractReceivedDate));
          
        
          
          
          
          
            result.putOpt("ResponseSentDate", JSONConversions.optionalDateToJSON(this.responseSentDate));
          
        
          
          
          
          
            result.putOpt("ContractSentDate", JSONConversions.optionalDateToJSON(this.contractSentDate));
          
        
          
          
          
          
            result.putOpt("Submitted", JSONConversions.optionalDatetimeToJSON(this.submitted));
          
        
          
          
          
          
            result.putOpt("ContractFinalised", this.contractFinalised);
          
        
          
          
          
          
            result.putOpt("ContractComment", this.contractComment);
          
        
          
          
          
          
            result.putOpt("ContractualAgreement", (this.contractualAgreement) match { case null => null; case o => o.toJson(differentiator) });
          
        
          
          
          
          
            result.putOpt("TradeContractTerms", (this.tradeContractTerms) match { case null => null; case o => o.toJson(differentiator) });
          
        
          
          
          
          
            result.putOpt("TitanId", (this.titanId) match { case null => null; case o => o.toJson(differentiator) });
          
        
          
          
          
          
            result.putOpt("Guid", if (this.guid == null) null else this.guid.toJson);
          
        
        return result;
    }

    override def loadJson(jobj : org.codehaus.jettison.json.JSONObject, cache: DeserialisationHelper) = {
        
            super.loadJson(jobj, cache);
        
        
          
              contractHandlerId = (jobj.opt("ContractHandlerId")) match {case null => None; case n:Number => Some(n.intValue()); case _ => None}
          
              groupCompany = if (jobj.opt("GroupCompany") == null) null else GUID(JSONConversions.optional[String](jobj.opt("GroupCompany"), null))
          
              state = (jobj.optString("State")) match { case null => null; case s: String => TradeStateEnum.forName(s) }
          
              originatingOffice = if (jobj.opt("OriginatingOffice") == null) null else GUID(JSONConversions.optional[String](jobj.opt("OriginatingOffice"), null))
          
              analystId = (jobj.opt("AnalystId")) match {case null => None; case n:Number => Some(n.intValue()); case _ => None}
          
              traderId = (jobj.opt("TraderId")) match {case null => None; case n:Number => Some(n.intValue()); case _ => None}
          
              submitterId = (jobj.opt("SubmitterId")) match {case null => None; case n:Number => Some(n.intValue()); case _ => None}
          
              operatorId = (jobj.opt("OperatorId")) match {case null => None; case n:Number => Some(n.intValue()); case _ => None}
          
              direction = JSONConversions.optional[String](jobj.opt("Direction"), null)
          
              contractDraftedDate = JSONConversions.optionalDate(jobj.opt("ContractDraftedDate"))
          
              contractReceivedDate = JSONConversions.optionalDate(jobj.opt("ContractReceivedDate"))
          
              brokerContractReceivedDate = JSONConversions.optionalDate(jobj.opt("BrokerContractReceivedDate"))
          
              responseSentDate = JSONConversions.optionalDate(jobj.opt("ResponseSentDate"))
          
              contractSentDate = JSONConversions.optionalDate(jobj.opt("ContractSentDate"))
          
              submitted = JSONConversions.optionalDatetime(jobj.opt("Submitted"))
          
              contractFinalised = JSONConversions.optional[Boolean](jobj.opt("ContractFinalised"), false)
          
              contractComment = JSONConversions.optional[String](jobj.opt("ContractComment"), null)
          
              contractualAgreement = (jobj.opt("ContractualAgreement")) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.edm.trades.ContractualAgreement.fromJson(o, cache))) }
          
              tradeContractTerms = (jobj.opt("TradeContractTerms")) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.edm.trades.TradeContractTerms.fromJson(o, cache))) }
          
              titanId = (jobj.opt("TitanId")) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.edm.shared.types.TitanId.fromJson(o, cache))) }
          
              guid = if (jobj.opt("Guid") == null) null else GUID(JSONConversions.optional[String](jobj.opt("Guid"), null))
          
        
    }

  
}

object Trade {
  def version = ModelVersion("1")
  def wireFormatVersion = ModelVersion("1.0")

  
        val jsonTypeName = "EDM.Trades.Trade"

    def fromJson(jobj : org.codehaus.jettison.json.JSONObject, cache: DeserialisationHelper = new DeserialisationHelper) : com.trafigura.edm.trades.Trade = {
      val v = TypeHolder(jobj.optString("Type"))

      v.assertModelVersion(version, "com.trafigura.edm.trades.Trade")
      v.assertWireFormatVersion(wireFormatVersion, "com.trafigura.edm.trades.Trade")

      
        
              v.typeName match {
              
                case "EDM.Trades.OTCTrade" =>
                  
                     val result = new com.trafigura.edm.trades.OTCTrade()
                     result.loadJson(jobj, cache)
                     result
                  
              
                case "EDM.Trades.PhysicalTrade" =>
                  
                     val result = new com.trafigura.edm.trades.PhysicalTrade()
                     result.loadJson(jobj, cache)
                     result
                  
              
                case _ =>
                  
                     val result = new com.trafigura.edm.trades.Trade()
                     result.loadJson(jobj, cache)
                     result
                  
            }
        
      
    }

  

  
  val PURCHASE = "P"
  
  val SALE = "S"
  

  
    def apply(contractHandlerId: scala.Option[Int] = None, groupCompany: GUID = null, state: TradeStateEnum = null, originatingOffice: GUID = null, analystId: scala.Option[Int] = None, traderId: scala.Option[Int] = None, submitterId: scala.Option[Int] = None, operatorId: scala.Option[Int] = None, direction: String = null, contractDraftedDate: org.joda.time.LocalDate = null, contractReceivedDate: org.joda.time.LocalDate = null, brokerContractReceivedDate: org.joda.time.LocalDate = null, responseSentDate: org.joda.time.LocalDate = null, contractSentDate: org.joda.time.LocalDate = null, submitted: org.joda.time.DateTime = null, contractFinalised: Boolean = false, contractComment: String = null, contractualAgreement: com.trafigura.edm.trades.ContractualAgreement = null, tradeContractTerms: com.trafigura.edm.trades.TradeContractTerms = null, titanId: com.trafigura.edm.shared.types.TitanId = null, guid: GUID = null) = {
      val res = new com.trafigura.edm.trades.Trade
      
        res.contractHandlerId = contractHandlerId
      
        res.groupCompany = groupCompany
      
        res.state = state
      
        res.originatingOffice = originatingOffice
      
        res.analystId = analystId
      
        res.traderId = traderId
      
        res.submitterId = submitterId
      
        res.operatorId = operatorId
      
        res.direction = direction
      
        res.contractDraftedDate = contractDraftedDate
      
        res.contractReceivedDate = contractReceivedDate
      
        res.brokerContractReceivedDate = brokerContractReceivedDate
      
        res.responseSentDate = responseSentDate
      
        res.contractSentDate = contractSentDate
      
        res.submitted = submitted
      
        res.contractFinalised = contractFinalised
      
        res.contractComment = contractComment
      
        res.contractualAgreement = contractualAgreement
      
        res.tradeContractTerms = tradeContractTerms
      
        res.titanId = titanId
      
        res.guid = guid
      
      res
    }
  
}
