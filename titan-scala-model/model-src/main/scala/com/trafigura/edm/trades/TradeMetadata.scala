/**
 * WARNING: This file was automatically generated by the Trading Hub tooling version 2.15.
 * Any manual changes may be overwritten and lost!
 */


// Generated from model_object_scala.erb

package com.trafigura.edm.trades





import com.trafigura.tradinghub.support._
import scala.collection.JavaConversions._




 class TradeMetadata extends com.trafigura.tradinghub.support.ModelObject  {
  


  
    

var source:TradeMetadataSourceEnum = null
    
    
    

var quotas:List[com.trafigura.edm.trades.QuotaMetadata] = null
    
    
    

var docInfo:List[com.trafigura.edm.trades.TradeDocLangDetails] = null
    
    
    

var amendmentInfo:List[com.trafigura.edm.trades.TradeAmendmentDocLangDetails] = null
    
    
    

var tradeOid:Int = 0
    
    





  override def equals(o: Any) = o match {
    case r: AnyRef =>
        if (o.isInstanceOf[com.trafigura.edm.trades.TradeMetadata]) {
            val that = r.asInstanceOf[com.trafigura.edm.trades.TradeMetadata]
            that.canEqual(this) && this.amendmentInfo == that.amendmentInfo && this.docInfo == that.docInfo && this.quotas == that.quotas && this.source == that.source && this.tradeOid == that.tradeOid &&  true
        }
        else false
    case _ => false
  }

  override def canEqual(that : Any) = that.isInstanceOf[com.trafigura.edm.trades.TradeMetadata]

  override def hashCode = {
    (41 * (41 * (41 * (41 * (41 *  1
    ) +
         (if (amendmentInfo == null) 0 else amendmentInfo.hashCode) 
    ) +
         (if (docInfo == null) 0 else docInfo.hashCode) 
    ) +
         (if (quotas == null) 0 else quotas.hashCode) 
    ) +
         (if (source == null) 0 else source.hashCode) 
    ) +
         tradeOid.hashCode
        
    
  }

  override def toString = {
    "{com.trafigura.edm.trades.TradeMetadata: " + "" + "amendmentInfo = " + amendmentInfo + ", " + "docInfo = " + docInfo + ", " + "quotas = " + quotas + ", " + "source = " + source + ", " + "tradeOid = " + tradeOid +  "}"
  }


  
         def toJson() : org.codehaus.jettison.json.JSONObject = {
      toJson(new SerialisationHelper)
    }

     def toJson(differentiator: SerialisationHelper) : org.codehaus.jettison.json.JSONObject = {
        var result = new org.codehaus.jettison.json.JSONObject();

        result.put("_node", differentiator.idFor(this))

        result.put("Type", "EDM.Trades.TradeMetadata@1@1.0")
        
          
          
          
          
            result.putOpt("Source", (this.source) match { case null => null; case o => o.toJson });
          
        
          
          
          
          
            result.putOpt("Quotas", new org.codehaus.jettison.json.JSONArray(if(this.quotas == null) new java.util.ArrayList() else java.util.Arrays.asList(this.quotas.map(t => (t) match { case null => null; case o => o.toJson(differentiator) }).toArray: _*)));
          
        
          
          
          
          
            result.putOpt("DocInfo", new org.codehaus.jettison.json.JSONArray(if(this.docInfo == null) new java.util.ArrayList() else java.util.Arrays.asList(this.docInfo.map(t => (t) match { case null => null; case o => o.toJson(differentiator) }).toArray: _*)));
          
        
          
          
          
          
            result.putOpt("AmendmentInfo", new org.codehaus.jettison.json.JSONArray(if(this.amendmentInfo == null) new java.util.ArrayList() else java.util.Arrays.asList(this.amendmentInfo.map(t => (t) match { case null => null; case o => o.toJson(differentiator) }).toArray: _*)));
          
        
          
          
          
          
            result.putOpt("TradeOid", this.tradeOid);
          
        
        return result;
    }

     def loadJson(jobj : org.codehaus.jettison.json.JSONObject, cache: DeserialisationHelper) = {
        
        
          
              source = (jobj.optString("Source")) match { case null => null; case s: String => TradeMetadataSourceEnum.forName(s) }
          
              quotas = JSONConversions.optionalList(jobj.opt("Quotas"), x => (x) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.edm.trades.QuotaMetadata.fromJson(o, cache))) })
          
              docInfo = JSONConversions.optionalList(jobj.opt("DocInfo"), x => (x) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.edm.trades.TradeDocLangDetails.fromJson(o, cache))) })
          
              amendmentInfo = JSONConversions.optionalList(jobj.opt("AmendmentInfo"), x => (x) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.edm.trades.TradeAmendmentDocLangDetails.fromJson(o, cache))) })
          
              tradeOid = JSONConversions.optional[Int](jobj.opt("TradeOid"), 0)
          
        
    }

  
}

object TradeMetadata {
  def version = ModelVersion("1")
  def wireFormatVersion = ModelVersion("1.0")

  
        val jsonTypeName = "EDM.Trades.TradeMetadata"

    def fromJson(jobj : org.codehaus.jettison.json.JSONObject, cache: DeserialisationHelper = new DeserialisationHelper) : com.trafigura.edm.trades.TradeMetadata = {
      val v = TypeHolder(jobj.optString("Type"))

      v.assertModelVersion(version, "com.trafigura.edm.trades.TradeMetadata")
      v.assertWireFormatVersion(wireFormatVersion, "com.trafigura.edm.trades.TradeMetadata")

      
        
            val result = new com.trafigura.edm.trades.TradeMetadata()
            result.loadJson(jobj, cache)
            result
        
      
    }

  

  

  
    def apply(source: TradeMetadataSourceEnum = null, quotas: List[com.trafigura.edm.trades.QuotaMetadata] = null, docInfo: List[com.trafigura.edm.trades.TradeDocLangDetails] = null, amendmentInfo: List[com.trafigura.edm.trades.TradeAmendmentDocLangDetails] = null, tradeOid: Int = 0) = {
      val res = new com.trafigura.edm.trades.TradeMetadata
      
        res.source = source
      
        res.quotas = quotas
      
        res.docInfo = docInfo
      
        res.amendmentInfo = amendmentInfo
      
        res.tradeOid = tradeOid
      
      res
    }
  
}
