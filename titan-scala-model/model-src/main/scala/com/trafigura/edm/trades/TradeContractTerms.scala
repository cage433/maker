/**
 * WARNING: This file was automatically generated by the Trading Hub tooling version 2.15.
 * Any manual changes may be overwritten and lost!
 */


// Generated from model_object_scala.erb

package com.trafigura.edm.trades





import com.trafigura.tradinghub.support._
import scala.collection.JavaConversions._




 class TradeContractTerms extends com.trafigura.tradinghub.support.ModelObject  {
  


  
    

var contractDate:org.joda.time.LocalDate = null
    
    
    

var generalTermsAndConditions:String = null
    
    
    

var notes:String = null
    
    
    

var tradeSpec:com.trafigura.edm.trades.TradeSpec = null
    
    





  override def equals(o: Any) = o match {
    case r: AnyRef =>
        if (o.isInstanceOf[com.trafigura.edm.trades.TradeContractTerms]) {
            val that = r.asInstanceOf[com.trafigura.edm.trades.TradeContractTerms]
            that.canEqual(this) && this.contractDate == that.contractDate && this.generalTermsAndConditions == that.generalTermsAndConditions && this.notes == that.notes && this.tradeSpec == that.tradeSpec &&  true
        }
        else false
    case _ => false
  }

  override def canEqual(that : Any) = that.isInstanceOf[com.trafigura.edm.trades.TradeContractTerms]

  override def hashCode = {
    (41 * (41 * (41 * (41 *  1
    ) +
         (if (contractDate == null) 0 else contractDate.hashCode) 
    ) +
         (if (generalTermsAndConditions == null) 0 else generalTermsAndConditions.hashCode) 
    ) +
         (if (notes == null) 0 else notes.hashCode) 
    ) +
         (if (tradeSpec == null) 0 else tradeSpec.hashCode) 
    
  }

  override def toString = {
    "{com.trafigura.edm.trades.TradeContractTerms: " + "" + "contractDate = " + contractDate + ", " + "generalTermsAndConditions = " + generalTermsAndConditions + ", " + "notes = " + notes + ", " + "tradeSpec = " + tradeSpec +  "}"
  }


  
         def toJson() : org.codehaus.jettison.json.JSONObject = {
      toJson(new SerialisationHelper)
    }

     def toJson(differentiator: SerialisationHelper) : org.codehaus.jettison.json.JSONObject = {
        var result = new org.codehaus.jettison.json.JSONObject();

        result.put("_node", differentiator.idFor(this))

        result.put("Type", "EDM.Trades.TradeContractTerms@1@1.0")
        
          
          
          
          
            result.putOpt("ContractDate", JSONConversions.optionalDateToJSON(this.contractDate));
          
        
          
          
          
          
            result.putOpt("GeneralTermsAndConditions", this.generalTermsAndConditions);
          
        
          
          
          
          
            result.putOpt("Notes", this.notes);
          
        
          
          
          
          
            result.putOpt("TradeSpec", (this.tradeSpec) match { case null => null; case o => o.toJson(differentiator) });
          
        
        return result;
    }

     def loadJson(jobj : org.codehaus.jettison.json.JSONObject, cache: DeserialisationHelper) = {
        
        
          
              contractDate = JSONConversions.optionalDate(jobj.opt("ContractDate"))
          
              generalTermsAndConditions = JSONConversions.optional[String](jobj.opt("GeneralTermsAndConditions"), null)
          
              notes = JSONConversions.optional[String](jobj.opt("Notes"), null)
          
              tradeSpec = (jobj.opt("TradeSpec")) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.edm.trades.TradeSpec.fromJson(o, cache))) }
          
        
    }

  
}

object TradeContractTerms {
  def version = ModelVersion("1")
  def wireFormatVersion = ModelVersion("1.0")

  
        val jsonTypeName = "EDM.Trades.TradeContractTerms"

    def fromJson(jobj : org.codehaus.jettison.json.JSONObject, cache: DeserialisationHelper = new DeserialisationHelper) : com.trafigura.edm.trades.TradeContractTerms = {
      val v = TypeHolder(jobj.optString("Type"))

      v.assertModelVersion(version, "com.trafigura.edm.trades.TradeContractTerms")
      v.assertWireFormatVersion(wireFormatVersion, "com.trafigura.edm.trades.TradeContractTerms")

      
        
              v.typeName match {
              
                case "EDM.Trades.PhysicalTradeContractTerms" =>
                  
                     val result = new com.trafigura.edm.trades.PhysicalTradeContractTerms()
                     result.loadJson(jobj, cache)
                     result
                  
              
                case _ =>
                  
                     val result = new com.trafigura.edm.trades.TradeContractTerms()
                     result.loadJson(jobj, cache)
                     result
                  
            }
        
      
    }

  

  

  
    def apply(contractDate: org.joda.time.LocalDate = null, generalTermsAndConditions: String = null, notes: String = null, tradeSpec: com.trafigura.edm.trades.TradeSpec = null) = {
      val res = new com.trafigura.edm.trades.TradeContractTerms
      
        res.contractDate = contractDate
      
        res.generalTermsAndConditions = generalTermsAndConditions
      
        res.notes = notes
      
        res.tradeSpec = tradeSpec
      
      res
    }
  
}
