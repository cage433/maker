/**
 * WARNING: This file was automatically generated by the Trading Hub tooling version 2.15.
 * Any manual changes may be overwritten and lost!
 */


// Generated from model_object_scala.erb

package com.trafigura.responses





import com.trafigura.tradinghub.support._
import scala.collection.JavaConversions._



/**
 common response message to convey operation results from server to client
 */


 class Result extends com.trafigura.tradinghub.support.ModelObject  {
  


  
    
    /**
     field 'result',            :boolean
     */

var status:ResultStatusEnum = null
    
    
    

var code:ResultCodeEnum = null
    
    
    

var subCode:Int = 0
    
    
    

var message:String = null
    
    
    

var detail:String = null
    
    
    

var cause:String = null
    
    
    

var exception:Boolean = false
    
    
    

var stackTrace:String = null
    
    





  override def equals(o: Any) = o match {
    case r: AnyRef =>
        if (o.isInstanceOf[com.trafigura.responses.Result]) {
            val that = r.asInstanceOf[com.trafigura.responses.Result]
            that.canEqual(this) && this.cause == that.cause && this.code == that.code && this.detail == that.detail && this.exception == that.exception && this.message == that.message && this.stackTrace == that.stackTrace && this.status == that.status && this.subCode == that.subCode &&  true
        }
        else false
    case _ => false
  }

  override def canEqual(that : Any) = that.isInstanceOf[com.trafigura.responses.Result]

  override def hashCode = {
    (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 *  1
    ) +
         (if (cause == null) 0 else cause.hashCode) 
    ) +
         (if (code == null) 0 else code.hashCode) 
    ) +
         (if (detail == null) 0 else detail.hashCode) 
    ) +
         exception.hashCode
        
    ) +
         (if (message == null) 0 else message.hashCode) 
    ) +
         (if (stackTrace == null) 0 else stackTrace.hashCode) 
    ) +
         (if (status == null) 0 else status.hashCode) 
    ) +
         subCode.hashCode
        
    
  }

  override def toString = {
    "{com.trafigura.responses.Result: " + "" + "cause = " + cause + ", " + "code = " + code + ", " + "detail = " + detail + ", " + "exception = " + exception + ", " + "message = " + message + ", " + "stackTrace = " + stackTrace + ", " + "status = " + status + ", " + "subCode = " + subCode +  "}"
  }


  
         def toJson() : org.codehaus.jettison.json.JSONObject = {
      toJson(new SerialisationHelper)
    }

     def toJson(differentiator: SerialisationHelper) : org.codehaus.jettison.json.JSONObject = {
        var result = new org.codehaus.jettison.json.JSONObject();

        result.put("_node", differentiator.idFor(this))

        result.put("Type", "Responses.Result@1@1.0")
        
          
          
          
          
            result.putOpt("Status", (this.status) match { case null => null; case o => o.toJson });
          
        
          
          
          
          
            result.putOpt("Code", (this.code) match { case null => null; case o => o.toJson });
          
        
          
          
          
          
            result.putOpt("SubCode", this.subCode);
          
        
          
          
          
          
            result.putOpt("Message", this.message);
          
        
          
          
          
          
            result.putOpt("Detail", this.detail);
          
        
          
          
          
          
            result.putOpt("Cause", this.cause);
          
        
          
          
          
          
            result.putOpt("Exception", this.exception);
          
        
          
          
          
          
            result.putOpt("StackTrace", this.stackTrace);
          
        
        return result;
    }

     def loadJson(jobj : org.codehaus.jettison.json.JSONObject, cache: DeserialisationHelper) = {
        
        
          
              status = (jobj.optString("Status")) match { case null => null; case s: String => ResultStatusEnum.forName(s) }
          
              code = (jobj.optString("Code")) match { case null => null; case s: String => ResultCodeEnum.forName(s) }
          
              subCode = JSONConversions.optional[Int](jobj.opt("SubCode"), 0)
          
              message = JSONConversions.optional[String](jobj.opt("Message"), null)
          
              detail = JSONConversions.optional[String](jobj.opt("Detail"), null)
          
              cause = JSONConversions.optional[String](jobj.opt("Cause"), null)
          
              exception = JSONConversions.optional[Boolean](jobj.opt("Exception"), false)
          
              stackTrace = JSONConversions.optional[String](jobj.opt("StackTrace"), null)
          
        
    }

  
}

object Result {
  def version = ModelVersion("1")
  def wireFormatVersion = ModelVersion("1.0")

  
        val jsonTypeName = "Responses.Result"

    def fromJson(jobj : org.codehaus.jettison.json.JSONObject, cache: DeserialisationHelper = new DeserialisationHelper) : com.trafigura.responses.Result = {
      val v = TypeHolder(jobj.optString("Type"))

      v.assertModelVersion(version, "com.trafigura.responses.Result")
      v.assertWireFormatVersion(wireFormatVersion, "com.trafigura.responses.Result")

      
        
            val result = new com.trafigura.responses.Result()
            result.loadJson(jobj, cache)
            result
        
      
    }

  

  

  
    def apply(status: ResultStatusEnum = null, code: ResultCodeEnum = null, subCode: Int = 0, message: String = null, detail: String = null, cause: String = null, exception: Boolean = false, stackTrace: String = null) = {
      val res = new com.trafigura.responses.Result
      
        res.status = status
      
        res.code = code
      
        res.subCode = subCode
      
        res.message = message
      
        res.detail = detail
      
        res.cause = cause
      
        res.exception = exception
      
        res.stackTrace = stackTrace
      
      res
    }
  
}
