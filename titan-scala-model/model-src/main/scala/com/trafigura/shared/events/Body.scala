/**
 * WARNING: This file was automatically generated by the Trading Hub tooling version 2.15.
 * Any manual changes may be overwritten and lost!
 */


// Generated from model_object_scala.erb

package com.trafigura.shared.events





import com.trafigura.tradinghub.support._
import scala.collection.JavaConversions._




 class Body extends com.trafigura.tradinghub.support.ModelObject  {
  


  
    

var payloads:List[com.trafigura.shared.events.Payload] = null
    
    





  override def equals(o: Any) = o match {
    case r: AnyRef =>
        if (o.isInstanceOf[com.trafigura.shared.events.Body]) {
            val that = r.asInstanceOf[com.trafigura.shared.events.Body]
            that.canEqual(this) && this.payloads == that.payloads &&  true
        }
        else false
    case _ => false
  }

  override def canEqual(that : Any) = that.isInstanceOf[com.trafigura.shared.events.Body]

  override def hashCode = {
    (41 *  1
    ) +
         (if (payloads == null) 0 else payloads.hashCode) 
    
  }

  override def toString = {
    "{com.trafigura.shared.events.Body: " + "" + "payloads = " + payloads +  "}"
  }


  
         def toJson() : org.codehaus.jettison.json.JSONObject = {
      toJson(new SerialisationHelper)
    }

     def toJson(differentiator: SerialisationHelper) : org.codehaus.jettison.json.JSONObject = {
        var result = new org.codehaus.jettison.json.JSONObject();

        result.put("_node", differentiator.idFor(this))

        result.put("Type", "Shared.Events.Body@1@1.0")
        
          
          
          
          
            result.putOpt("Payloads", new org.codehaus.jettison.json.JSONArray(if(this.payloads == null) new java.util.ArrayList() else java.util.Arrays.asList(this.payloads.map(t => (t) match { case null => null; case o => o.toJson(differentiator) }).toArray: _*)));
          
        
        return result;
    }

     def loadJson(jobj : org.codehaus.jettison.json.JSONObject, cache: DeserialisationHelper) = {
        
        
          
              payloads = JSONConversions.optionalList(jobj.opt("Payloads"), x => (x) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.shared.events.Payload.fromJson(o, cache))) })
          
        
    }

  
}

object Body {
  def version = ModelVersion("1")
  def wireFormatVersion = ModelVersion("1.0")

  
        val jsonTypeName = "Shared.Events.Body"

    def fromJson(jobj : org.codehaus.jettison.json.JSONObject, cache: DeserialisationHelper = new DeserialisationHelper) : com.trafigura.shared.events.Body = {
      val v = TypeHolder(jobj.optString("Type"))

      v.assertModelVersion(version, "com.trafigura.shared.events.Body")
      v.assertWireFormatVersion(wireFormatVersion, "com.trafigura.shared.events.Body")

      
        
            val result = new com.trafigura.shared.events.Body()
            result.loadJson(jobj, cache)
            result
        
      
    }

  

  

  
    def apply(payloads: List[com.trafigura.shared.events.Payload] = null) = {
      val res = new com.trafigura.shared.events.Body
      
        res.payloads = payloads
      
      res
    }
  
}
