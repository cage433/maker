/**
 * WARNING: This file was automatically generated by the Trading Hub tooling version 2.15.
 * Any manual changes may be overwritten and lost!
 */


// Generated from model_object_scala.erb

package com.trafigura.shared.events





import com.trafigura.tradinghub.support._
import scala.collection.JavaConversions._




 class Payload extends com.trafigura.tradinghub.support.ModelObject  {
  


  
    

var payloadType:String = null
    
    
    

var key:com.trafigura.shared.events.EventKey = null
    
    
    

var source:String = null
    
    
    

var timestamp:org.joda.time.DateTime = null
    
    





  override def equals(o: Any) = o match {
    case r: AnyRef =>
        if (o.isInstanceOf[com.trafigura.shared.events.Payload]) {
            val that = r.asInstanceOf[com.trafigura.shared.events.Payload]
            that.canEqual(this) && this.key == that.key && this.payloadType == that.payloadType && this.source == that.source && this.timestamp == that.timestamp &&  true
        }
        else false
    case _ => false
  }

  override def canEqual(that : Any) = that.isInstanceOf[com.trafigura.shared.events.Payload]

  override def hashCode = {
    (41 * (41 * (41 * (41 *  1
    ) +
         (if (key == null) 0 else key.hashCode) 
    ) +
         (if (payloadType == null) 0 else payloadType.hashCode) 
    ) +
         (if (source == null) 0 else source.hashCode) 
    ) +
         (if (timestamp == null) 0 else timestamp.hashCode) 
    
  }

  override def toString = {
    "{com.trafigura.shared.events.Payload: " + "" + "key = " + key + ", " + "payloadType = " + payloadType + ", " + "source = " + source + ", " + "timestamp = " + timestamp +  "}"
  }


  
         def toJson() : org.codehaus.jettison.json.JSONObject = {
      toJson(new SerialisationHelper)
    }

     def toJson(differentiator: SerialisationHelper) : org.codehaus.jettison.json.JSONObject = {
        var result = new org.codehaus.jettison.json.JSONObject();

        result.put("_node", differentiator.idFor(this))

        result.put("Type", "Shared.Events.Payload@1@1.0")
        
          
          
          
          
            result.putOpt("PayloadType", this.payloadType);
          
        
          
          
          
          
            result.putOpt("Key", (this.key) match { case null => null; case o => o.toJson(differentiator) });
          
        
          
          
          
          
            result.putOpt("Source", this.source);
          
        
          
          
          
          
            result.putOpt("Timestamp", JSONConversions.optionalDatetimeToJSON(this.timestamp));
          
        
        return result;
    }

     def loadJson(jobj : org.codehaus.jettison.json.JSONObject, cache: DeserialisationHelper) = {
        
        
          
              payloadType = JSONConversions.optional[String](jobj.opt("PayloadType"), null)
          
              key = (jobj.opt("Key")) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.shared.events.EventKey.fromJson(o, cache))) }
          
              source = JSONConversions.optional[String](jobj.opt("Source"), null)
          
              timestamp = JSONConversions.optionalDatetime(jobj.opt("Timestamp"))
          
        
    }

  
}

object Payload {
  def version = ModelVersion("1")
  def wireFormatVersion = ModelVersion("1.0")

  
        val jsonTypeName = "Shared.Events.Payload"

    def fromJson(jobj : org.codehaus.jettison.json.JSONObject, cache: DeserialisationHelper = new DeserialisationHelper) : com.trafigura.shared.events.Payload = {
      val v = TypeHolder(jobj.optString("Type"))

      v.assertModelVersion(version, "com.trafigura.shared.events.Payload")
      v.assertWireFormatVersion(wireFormatVersion, "com.trafigura.shared.events.Payload")

      
        
            val result = new com.trafigura.shared.events.Payload()
            result.loadJson(jobj, cache)
            result
        
      
    }

  

  

  
    def apply(payloadType: String = null, key: com.trafigura.shared.events.EventKey = null, source: String = null, timestamp: org.joda.time.DateTime = null) = {
      val res = new com.trafigura.shared.events.Payload
      
        res.payloadType = payloadType
      
        res.key = key
      
        res.source = source
      
        res.timestamp = timestamp
      
      res
    }
  
}
