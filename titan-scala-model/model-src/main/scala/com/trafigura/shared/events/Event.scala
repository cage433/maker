/**
 * WARNING: This file was automatically generated by the Trading Hub tooling version 2.15.
 * Any manual changes may be overwritten and lost!
 */


// Generated from model_object_scala.erb

package com.trafigura.shared.events





import com.trafigura.tradinghub.support._
import scala.collection.JavaConversions._




 class Event extends com.trafigura.tradinghub.support.ModelObject  {
  


  
    
    /**
     EDM Subjects
EDM Payloads
these will likely be Spring configured on the Scala side
Document generation language
Field definitions
     */

var verb:EventVerbEnum = null
    
    
    

var subject:String = null
    
    
    

var key:com.trafigura.shared.events.EventKey = null
    
    
    

var source:String = null
    
    
    

var content:com.trafigura.shared.events.Content = null
    
    





  override def equals(o: Any) = o match {
    case r: AnyRef =>
        if (o.isInstanceOf[com.trafigura.shared.events.Event]) {
            val that = r.asInstanceOf[com.trafigura.shared.events.Event]
            that.canEqual(this) && this.content == that.content && this.key == that.key && this.source == that.source && this.subject == that.subject && this.verb == that.verb &&  true
        }
        else false
    case _ => false
  }

  override def canEqual(that : Any) = that.isInstanceOf[com.trafigura.shared.events.Event]

  override def hashCode = {
    (41 * (41 * (41 * (41 * (41 *  1
    ) +
         (if (content == null) 0 else content.hashCode) 
    ) +
         (if (key == null) 0 else key.hashCode) 
    ) +
         (if (source == null) 0 else source.hashCode) 
    ) +
         (if (subject == null) 0 else subject.hashCode) 
    ) +
         (if (verb == null) 0 else verb.hashCode) 
    
  }

  override def toString = {
    "{com.trafigura.shared.events.Event: " + "" + "content = " + content + ", " + "key = " + key + ", " + "source = " + source + ", " + "subject = " + subject + ", " + "verb = " + verb +  "}"
  }


  
         def toJson() : org.codehaus.jettison.json.JSONObject = {
      toJson(new SerialisationHelper)
    }

     def toJson(differentiator: SerialisationHelper) : org.codehaus.jettison.json.JSONObject = {
        var result = new org.codehaus.jettison.json.JSONObject();

        result.put("_node", differentiator.idFor(this))

        result.put("Type", "Shared.Events.Event@1@1.0")
        
          
          
          
          
            result.putOpt("Verb", (this.verb) match { case null => null; case o => o.toJson });
          
        
          
          
          
          
            result.putOpt("Subject", this.subject);
          
        
          
          
          
          
            result.putOpt("Key", (this.key) match { case null => null; case o => o.toJson(differentiator) });
          
        
          
          
          
          
            result.putOpt("Source", this.source);
          
        
          
          
          
          
            result.putOpt("Content", (this.content) match { case null => null; case o => o.toJson(differentiator) });
          
        
        return result;
    }

     def loadJson(jobj : org.codehaus.jettison.json.JSONObject, cache: DeserialisationHelper) = {
        
        
          
              verb = (jobj.optString("Verb")) match { case null => null; case s: String => EventVerbEnum.forName(s) }
          
              subject = JSONConversions.optional[String](jobj.opt("Subject"), null)
          
              key = (jobj.opt("Key")) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.shared.events.EventKey.fromJson(o, cache))) }
          
              source = JSONConversions.optional[String](jobj.opt("Source"), null)
          
              content = (jobj.opt("Content")) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.shared.events.Content.fromJson(o, cache))) }
          
        
    }

  
}

object Event {
  def version = ModelVersion("1")
  def wireFormatVersion = ModelVersion("1.0")

  
        val jsonTypeName = "Shared.Events.Event"

    def fromJson(jobj : org.codehaus.jettison.json.JSONObject, cache: DeserialisationHelper = new DeserialisationHelper) : com.trafigura.shared.events.Event = {
      val v = TypeHolder(jobj.optString("Type"))

      v.assertModelVersion(version, "com.trafigura.shared.events.Event")
      v.assertWireFormatVersion(wireFormatVersion, "com.trafigura.shared.events.Event")

      
        
            val result = new com.trafigura.shared.events.Event()
            result.loadJson(jobj, cache)
            result
        
      
    }

  

  
  val TradeSubject = "trade"
  
  val QuotaSubject = "quota"
  
  val CostsAndIncomesSubject = "CostsAndIncomes"
  
  val CostsAndIncomesIdPayload = "costId"
  
  val MetadataSubject = "metadata"
  
  val DocSubject = "document"
  
  val NeptuneTradeSubject = "neptune trade"
  
  val MessageSubject = "message"
  
  val ReferenceDataSubject = "ReferenceData"
  
  val InventorySubject = "inventory"
  
  val AllocationSubject = "inventory allocation"
  
  val LogisticsQuotaSubject = "logistics quota"
  
  val FinanceSubject = "finance"
  
  val MovementSubject = "movement"
  
  val MovementAssignmentSubject = "movement assignment"
  
  val MovementWeightChangeSubject = "movement weight change"
  
  val LogisticsTaskSubject = "logistics task"
  
  val TaskSubject = "task"
  
  val StarlingValuationServiceSubject = "valuation service"
  
  val StarlingMarketDataSnapshotIDSubject = "starling market data snapshot id"
  
  val EDMLogisticsInventorySubject = "EDMLogisticsInventory"
  
  val EDMLogisticsSalesAssignmentSubject = "EDMLogisticsSalesAssignment"
  
  val EDMMovementSubject = "EDMMovement"
  
  val EDMMovementAssignmentSubject = "EDMMovementAssignmentSubject"
  
  val SummaryPayload = "summary"
  
  val ContractPayload = "contract"
  
  val DraftPayload = "draft"
  
  val AmendmentPayload = "amendment"
  
  val MessagePayload = "message"
  
  val FailedPayload = "failed"
  
  val RefinedMetalTradeIdPayload = "Refined Metal Trade"
  
  val RefinedMetalQuotaIdPayload = "Refined Metal Quota"
  
  val RefinedMetalTitanIdPayload = "Refined Metal Titan Id"
  
  val TradeStatusPayload = "Trade Status"
  
  val DocumentLocationPayload = "Document Location"
  
  val ReferenceDataChangedPayload = "referenceData"
  
  val ReferenceDataItemChangedPayload = "referenceDataItem"
  
  val InventoryIdPayload = "Inventory"
  
  val LogisticsQuotaIdPayload = "LogisticsQuota"
  
  val LogisticsQuotaVersionPayload = "LogisticsQuotaVersion"
  
  val MovementIdPayload = "Movement"
  
  val LogisticsTaskGuidPayload = "LogisticsTask"
  
  val VersionPayload = "Version"
  
  val MovementVersionPayload = "MovementVersion"
  
  val InventoryVersionPayload = "InventoryVersion"
  
  val TaskIdPayload = "TaskManagement TaskId"
  
  val StarlingSnapshotIdPayload = "StarlingSnapshotIdPayload"
  
  val StarlingNewValuationServiceStatusPayload = "ValuationStatus"
  
  val StarlingSpotFXCurrency = "StarlingSpotFXCurrency"
  
  val StarlingObservationDay = "StarlingObservationDay"
  
  val StarlingReferenceRateSource = "StarlingReferenceRateSource"
  
  val FinanceFacilityIdPayload = "Finance Record"
  
  val FinanceBankFacilityIdPayload = "Bank Facility Record"
  
  val EDMLogisticsInventoryIdPayload = "EDMLogisticsInventoryId"
  
  val EDMLogisticsAssignmentIdPayload = "EDMLogisticsAssignmentId"
  
  val EDMLogisticsQuotaIdPayload = "EDMQuotaId"
  
  val EDMMovementIdPayload = "EDMMovementId"
  
  val ScratchTradeIdentifier = "scratch"
  
  val CompletingTradeIdentifier = "completing"
  
  val CompletedTradeIdentifier = "completed"
  
  val MurdochSource = "murdoch"
  
  val TrademgmtSource = "trademgmt"
  
  val ReferencedataSource = "referencedata"
  
  val StarlingSource = "starling"
  
  val LogisticsSource = "logistics"
  
  val DocumentLanguageEnglish = "english"
  
  val DocumentLanguageChinese = "chinese"
  
  val LanguagesForWhichTranslationsChanged = "Translations"
  
  val TranslationsIdentifier = "Translations"
  
  val TranslationsPayload = "Translations"
  

  
    def apply(verb: EventVerbEnum = null, subject: String = null, key: com.trafigura.shared.events.EventKey = null, source: String = null, content: com.trafigura.shared.events.Content = null) = {
      val res = new com.trafigura.shared.events.Event
      
        res.verb = verb
      
        res.subject = subject
      
        res.key = key
      
        res.source = source
      
        res.content = content
      
      res
    }
  
}
