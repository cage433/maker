/**
 * WARNING: This file was automatically generated by the Trading Hub tooling version 2.15.
 * Any manual changes may be overwritten and lost!
 */


// Generated from model_object_scala.erb

package com.trafigura.shared.events





import com.trafigura.tradinghub.support._
import scala.collection.JavaConversions._




 class Content extends com.trafigura.tradinghub.support.ModelObject  {
  


  
    

var header:com.trafigura.shared.events.Header = null
    
    
    

var body:com.trafigura.shared.events.Body = null
    
    





  override def equals(o: Any) = o match {
    case r: AnyRef =>
        if (o.isInstanceOf[com.trafigura.shared.events.Content]) {
            val that = r.asInstanceOf[com.trafigura.shared.events.Content]
            that.canEqual(this) && this.body == that.body && this.header == that.header &&  true
        }
        else false
    case _ => false
  }

  override def canEqual(that : Any) = that.isInstanceOf[com.trafigura.shared.events.Content]

  override def hashCode = {
    (41 * (41 *  1
    ) +
         (if (body == null) 0 else body.hashCode) 
    ) +
         (if (header == null) 0 else header.hashCode) 
    
  }

  override def toString = {
    "{com.trafigura.shared.events.Content: " + "" + "body = " + body + ", " + "header = " + header +  "}"
  }


  
         def toJson() : org.codehaus.jettison.json.JSONObject = {
      toJson(new SerialisationHelper)
    }

     def toJson(differentiator: SerialisationHelper) : org.codehaus.jettison.json.JSONObject = {
        var result = new org.codehaus.jettison.json.JSONObject();

        result.put("_node", differentiator.idFor(this))

        result.put("Type", "Shared.Events.Content@1@1.0")
        
          
          
          
          
            result.putOpt("Header", (this.header) match { case null => null; case o => o.toJson(differentiator) });
          
        
          
          
          
          
            result.putOpt("Body", (this.body) match { case null => null; case o => o.toJson(differentiator) });
          
        
        return result;
    }

     def loadJson(jobj : org.codehaus.jettison.json.JSONObject, cache: DeserialisationHelper) = {
        
        
          
              header = (jobj.opt("Header")) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.shared.events.Header.fromJson(o, cache))) }
          
              body = (jobj.opt("Body")) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.shared.events.Body.fromJson(o, cache))) }
          
        
    }

  
}

object Content {
  def version = ModelVersion("1")
  def wireFormatVersion = ModelVersion("1.0")

  
        val jsonTypeName = "Shared.Events.Content"

    def fromJson(jobj : org.codehaus.jettison.json.JSONObject, cache: DeserialisationHelper = new DeserialisationHelper) : com.trafigura.shared.events.Content = {
      val v = TypeHolder(jobj.optString("Type"))

      v.assertModelVersion(version, "com.trafigura.shared.events.Content")
      v.assertWireFormatVersion(wireFormatVersion, "com.trafigura.shared.events.Content")

      
        
            val result = new com.trafigura.shared.events.Content()
            result.loadJson(jobj, cache)
            result
        
      
    }

  

  

  
    def apply(header: com.trafigura.shared.events.Header = null, body: com.trafigura.shared.events.Body = null) = {
      val res = new com.trafigura.shared.events.Content
      
        res.header = header
      
        res.body = body
      
      res
    }
  
}
