/**
 * WARNING: This file was automatically generated by the Trading Hub tooling version 2.15.
 * Any manual changes may be overwritten and lost!
 */


// Generated from model_object_scala.erb

package com.trafigura.tradecapture.internal.refinedmetal





import com.trafigura.tradinghub.support._
import scala.collection.JavaConversions._



/**
 A version is a date time interval for which a trade is valid
this is a half open interval, the start instant is inclusive, the end instant is exclusive
a null end signifies: to the end of time
The start is definitive, used to satisfy queries and in uniqueness constraints,
the end is secondary, not read, but set for the benefit of Qlikview data extraction
 */


 class Version extends com.trafigura.tradinghub.support.ModelObject  {
  


  
    

var start:org.joda.time.DateTime = null
    
    
    

var end:org.joda.time.DateTime = null
    
    
    

var numeric:String = null
    
    





  override def equals(o: Any) = o match {
    case r: AnyRef =>
        if (o.isInstanceOf[com.trafigura.tradecapture.internal.refinedmetal.Version]) {
            val that = r.asInstanceOf[com.trafigura.tradecapture.internal.refinedmetal.Version]
            that.canEqual(this) && this.end == that.end && this.numeric == that.numeric && this.start == that.start &&  true
        }
        else false
    case _ => false
  }

  override def canEqual(that : Any) = that.isInstanceOf[com.trafigura.tradecapture.internal.refinedmetal.Version]

  override def hashCode = {
    (41 * (41 * (41 *  1
    ) +
         (if (end == null) 0 else end.hashCode) 
    ) +
         (if (numeric == null) 0 else numeric.hashCode) 
    ) +
         (if (start == null) 0 else start.hashCode) 
    
  }

  override def toString = {
    "{com.trafigura.tradecapture.internal.refinedmetal.Version: " + "" + "end = " + end + ", " + "numeric = " + numeric + ", " + "start = " + start +  "}"
  }


  
         def toJson() : org.codehaus.jettison.json.JSONObject = {
      toJson(new SerialisationHelper)
    }

     def toJson(differentiator: SerialisationHelper) : org.codehaus.jettison.json.JSONObject = {
        var result = new org.codehaus.jettison.json.JSONObject();

        result.put("_node", differentiator.idFor(this))

        result.put("Type", "TradeCapture.Internal.RefinedMetal.Version@1@1.0")
        
          
          
          
          
            result.putOpt("Start", JSONConversions.optionalDatetimeToJSON(this.start));
          
        
          
          
          
          
            result.putOpt("End", JSONConversions.optionalDatetimeToJSON(this.end));
          
        
          
          
          
          
            result.putOpt("Numeric", this.numeric);
          
        
        return result;
    }

     def loadJson(jobj : org.codehaus.jettison.json.JSONObject, cache: DeserialisationHelper) = {
        
        
          
              start = JSONConversions.optionalDatetime(jobj.opt("Start"))
          
              end = JSONConversions.optionalDatetime(jobj.opt("End"))
          
              numeric = JSONConversions.optional[String](jobj.opt("Numeric"), null)
          
        
    }

  
}

object Version {
  def version = ModelVersion("1")
  def wireFormatVersion = ModelVersion("1.0")

  
        val jsonTypeName = "TradeCapture.Internal.RefinedMetal.Version"

    def fromJson(jobj : org.codehaus.jettison.json.JSONObject, cache: DeserialisationHelper = new DeserialisationHelper) : com.trafigura.tradecapture.internal.refinedmetal.Version = {
      val v = TypeHolder(jobj.optString("Type"))

      v.assertModelVersion(version, "com.trafigura.tradecapture.internal.refinedmetal.Version")
      v.assertWireFormatVersion(wireFormatVersion, "com.trafigura.tradecapture.internal.refinedmetal.Version")

      
        
            val result = new com.trafigura.tradecapture.internal.refinedmetal.Version()
            result.loadJson(jobj, cache)
            result
        
      
    }

  

  

  
    def apply(start: org.joda.time.DateTime = null, end: org.joda.time.DateTime = null, numeric: String = null) = {
      val res = new com.trafigura.tradecapture.internal.refinedmetal.Version
      
        res.start = start
      
        res.end = end
      
        res.numeric = numeric
      
      res
    }
  
}
