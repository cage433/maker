/**
 * WARNING: This file was automatically generated by the Trading Hub tooling version 2.15.
 * Any manual changes may be overwritten and lost!
 */


// Generated from model_object_scala.erb

package com.trafigura.tradecapture.internal.refinedmetal





import com.trafigura.tradinghub.support._
import scala.collection.JavaConversions._



/**
 an object to use to represent a relationship which can optionally point to the counterparty table or the nonkyccounterparty table
 */


 class CounterpartyAndTypeHolder extends com.trafigura.tradinghub.support.ModelObject  {
  


  
    

var counterpartyId:scala.Option[Int] = None
    
    
    

var nonKYC:Boolean = false
    
    





  override def equals(o: Any) = o match {
    case r: AnyRef =>
        if (o.isInstanceOf[com.trafigura.tradecapture.internal.refinedmetal.CounterpartyAndTypeHolder]) {
            val that = r.asInstanceOf[com.trafigura.tradecapture.internal.refinedmetal.CounterpartyAndTypeHolder]
            that.canEqual(this) && this.counterpartyId == that.counterpartyId && this.nonKYC == that.nonKYC &&  true
        }
        else false
    case _ => false
  }

  override def canEqual(that : Any) = that.isInstanceOf[com.trafigura.tradecapture.internal.refinedmetal.CounterpartyAndTypeHolder]

  override def hashCode = {
    (41 * (41 *  1
    ) +
         (if (counterpartyId == null) 0 else counterpartyId.hashCode) 
    ) +
         nonKYC.hashCode
        
    
  }

  override def toString = {
    "{com.trafigura.tradecapture.internal.refinedmetal.CounterpartyAndTypeHolder: " + "" + "counterpartyId = " + counterpartyId + ", " + "nonKYC = " + nonKYC +  "}"
  }


  
         def toJson() : org.codehaus.jettison.json.JSONObject = {
      toJson(new SerialisationHelper)
    }

     def toJson(differentiator: SerialisationHelper) : org.codehaus.jettison.json.JSONObject = {
        var result = new org.codehaus.jettison.json.JSONObject();

        result.put("_node", differentiator.idFor(this))

        result.put("Type", "TradeCapture.Internal.RefinedMetal.CounterpartyAndTypeHolder@1@1.0")
        
          
          
          
          
            result.putOpt("CounterpartyId", this.counterpartyId.getOrElse(null));
          
        
          
          
          
          
            result.putOpt("NonKYC", this.nonKYC);
          
        
        return result;
    }

     def loadJson(jobj : org.codehaus.jettison.json.JSONObject, cache: DeserialisationHelper) = {
        
        
          
              counterpartyId = (jobj.opt("CounterpartyId")) match {case null => None; case n:Number => Some(n.intValue()); case _ => None}
          
              nonKYC = JSONConversions.optional[Boolean](jobj.opt("NonKYC"), false)
          
        
    }

  
}

object CounterpartyAndTypeHolder {
  def version = ModelVersion("1")
  def wireFormatVersion = ModelVersion("1.0")

  
        val jsonTypeName = "TradeCapture.Internal.RefinedMetal.CounterpartyAndTypeHolder"

    def fromJson(jobj : org.codehaus.jettison.json.JSONObject, cache: DeserialisationHelper = new DeserialisationHelper) : com.trafigura.tradecapture.internal.refinedmetal.CounterpartyAndTypeHolder = {
      val v = TypeHolder(jobj.optString("Type"))

      v.assertModelVersion(version, "com.trafigura.tradecapture.internal.refinedmetal.CounterpartyAndTypeHolder")
      v.assertWireFormatVersion(wireFormatVersion, "com.trafigura.tradecapture.internal.refinedmetal.CounterpartyAndTypeHolder")

      
        
            val result = new com.trafigura.tradecapture.internal.refinedmetal.CounterpartyAndTypeHolder()
            result.loadJson(jobj, cache)
            result
        
      
    }

  

  

  
    def apply(counterpartyId: scala.Option[Int] = None, nonKYC: Boolean = false) = {
      val res = new com.trafigura.tradecapture.internal.refinedmetal.CounterpartyAndTypeHolder
      
        res.counterpartyId = counterpartyId
      
        res.nonKYC = nonKYC
      
      res
    }
  
}
