/**
 * WARNING: This file was automatically generated by the Trading Hub tooling version 2.15.
 * Any manual changes may be overwritten and lost!
 */


// Generated from model_object_scala.erb

package com.trafigura.tradecapture.internal.refinedmetal





import com.trafigura.tradinghub.support._
import scala.collection.JavaConversions._



/**
 as displayed in the trade blotter grid
 */


 class TradeBlotterQuotaRow extends com.trafigura.tradinghub.support.ModelObject  {
  


  
    

var tradeOID:Int = 0
    
    
    

var titanId:String = null
    
    
    

var quotaOID:Int = 0
    
    
    

var quotaNumber:Int = 0
    
    
    

var quantity:scala.Option[Double] = None
    
    
    

var uom:String = null
    
    
    

var uomId:scala.Option[Int] = None
    
    
    

var grade:String = null
    
    
    

var gradeId:scala.Option[Int] = None
    
    
    

var shape:String = null
    
    
    

var shapeId:scala.Option[Int] = None
    
    
    

var contractualLocation:String = null
    
    
    

var contractualLocationId:scala.Option[Int] = None
    
    
    

var contractualTerms:String = null
    
    
    

var contractualTermsId:scala.Option[Int] = None
    
    
    

var salesTradingRegion:String = null
    
    
    

var salesTradingRegionId:scala.Option[Int] = None
    
    
    

var securityTerms:String = null
    
    
    

var securityTermsId:scala.Option[Int] = None
    
    
    

var paymentTerms:String = null
    
    
    

var paymentTermsId:scala.Option[Int] = None
    
    
    

var qpTypeId:scala.Option[Int] = None
    
    
    

var qpType:String = null
    
    
    

var market:String = null
    
    
    

var marketCode:String = null
    
    
    

var marketId:scala.Option[Int] = None
    
    
    

var currency:String = null
    
    
    

var currencyId:scala.Option[Int] = None
    
    
    

var shipment:org.joda.time.LocalDate = null
    
    
    

var expectedSales:org.joda.time.LocalDate = null
    
    
    

var premium:scala.Option[Double] = None
    
    
    

var premiumUom:String = null
    
    
    

var premiumUomId:scala.Option[Int] = None
    
    
    

var premiumCcy:String = null
    
    
    

var premiumCcyId:scala.Option[Int] = None
    
    
    

var premiumComments:String = null
    
    
    

var gradeComments:String = null
    
    
    

var pricingOffsetId:scala.Option[Int] = None
    
    
    

var pricingOffset:String = null
    
    
    

var destinationLocationId:scala.Option[Int] = None
    
    
    

var destinationLocation:String = null
    
    
    

var destinationTermsId:scala.Option[Int] = None
    
    
    

var destinationTerms:String = null
    
    
    

var presentedDocumentId:scala.Option[Int] = None
    
    
    

var presentedDocumentName:String = null
    
    
    

var presentedDocumentIsCopy:Boolean = false
    
    
    

var numberOfDeferredCreditDays:Int = 0
    
    
    

var vatInvoiceDate:org.joda.time.LocalDate = null
    
    
    

var vatInvoiceType:TradeBlotterQuotaRowVatInvoiceTypeEnum = null
    
    





  override def equals(o: Any) = o match {
    case r: AnyRef =>
        if (o.isInstanceOf[com.trafigura.tradecapture.internal.refinedmetal.TradeBlotterQuotaRow]) {
            val that = r.asInstanceOf[com.trafigura.tradecapture.internal.refinedmetal.TradeBlotterQuotaRow]
            that.canEqual(this) && this.contractualLocation == that.contractualLocation && this.contractualLocationId == that.contractualLocationId && this.contractualTerms == that.contractualTerms && this.contractualTermsId == that.contractualTermsId && this.currency == that.currency && this.currencyId == that.currencyId && this.destinationLocation == that.destinationLocation && this.destinationLocationId == that.destinationLocationId && this.destinationTerms == that.destinationTerms && this.destinationTermsId == that.destinationTermsId && this.expectedSales == that.expectedSales && this.grade == that.grade && this.gradeComments == that.gradeComments && this.gradeId == that.gradeId && this.market == that.market && this.marketCode == that.marketCode && this.marketId == that.marketId && this.numberOfDeferredCreditDays == that.numberOfDeferredCreditDays && this.paymentTerms == that.paymentTerms && this.paymentTermsId == that.paymentTermsId && this.premium == that.premium && this.premiumCcy == that.premiumCcy && this.premiumCcyId == that.premiumCcyId && this.premiumComments == that.premiumComments && this.premiumUom == that.premiumUom && this.premiumUomId == that.premiumUomId && this.presentedDocumentId == that.presentedDocumentId && this.presentedDocumentIsCopy == that.presentedDocumentIsCopy && this.presentedDocumentName == that.presentedDocumentName && this.pricingOffset == that.pricingOffset && this.pricingOffsetId == that.pricingOffsetId && this.qpType == that.qpType && this.qpTypeId == that.qpTypeId && this.quantity == that.quantity && this.quotaNumber == that.quotaNumber && this.quotaOID == that.quotaOID && this.salesTradingRegion == that.salesTradingRegion && this.salesTradingRegionId == that.salesTradingRegionId && this.securityTerms == that.securityTerms && this.securityTermsId == that.securityTermsId && this.shape == that.shape && this.shapeId == that.shapeId && this.shipment == that.shipment && this.titanId == that.titanId && this.tradeOID == that.tradeOID && this.uom == that.uom && this.uomId == that.uomId && this.vatInvoiceDate == that.vatInvoiceDate && this.vatInvoiceType == that.vatInvoiceType &&  true
        }
        else false
    case _ => false
  }

  override def canEqual(that : Any) = that.isInstanceOf[com.trafigura.tradecapture.internal.refinedmetal.TradeBlotterQuotaRow]

  override def hashCode = {
    (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 *  1
    ) +
         (if (contractualLocation == null) 0 else contractualLocation.hashCode) 
    ) +
         (if (contractualLocationId == null) 0 else contractualLocationId.hashCode) 
    ) +
         (if (contractualTerms == null) 0 else contractualTerms.hashCode) 
    ) +
         (if (contractualTermsId == null) 0 else contractualTermsId.hashCode) 
    ) +
         (if (currency == null) 0 else currency.hashCode) 
    ) +
         (if (currencyId == null) 0 else currencyId.hashCode) 
    ) +
         (if (destinationLocation == null) 0 else destinationLocation.hashCode) 
    ) +
         (if (destinationLocationId == null) 0 else destinationLocationId.hashCode) 
    ) +
         (if (destinationTerms == null) 0 else destinationTerms.hashCode) 
    ) +
         (if (destinationTermsId == null) 0 else destinationTermsId.hashCode) 
    ) +
         (if (expectedSales == null) 0 else expectedSales.hashCode) 
    ) +
         (if (grade == null) 0 else grade.hashCode) 
    ) +
         (if (gradeComments == null) 0 else gradeComments.hashCode) 
    ) +
         (if (gradeId == null) 0 else gradeId.hashCode) 
    ) +
         (if (market == null) 0 else market.hashCode) 
    ) +
         (if (marketCode == null) 0 else marketCode.hashCode) 
    ) +
         (if (marketId == null) 0 else marketId.hashCode) 
    ) +
         numberOfDeferredCreditDays.hashCode
        
    ) +
         (if (paymentTerms == null) 0 else paymentTerms.hashCode) 
    ) +
         (if (paymentTermsId == null) 0 else paymentTermsId.hashCode) 
    ) +
         (if (premium == null) 0 else premium.hashCode) 
    ) +
         (if (premiumCcy == null) 0 else premiumCcy.hashCode) 
    ) +
         (if (premiumCcyId == null) 0 else premiumCcyId.hashCode) 
    ) +
         (if (premiumComments == null) 0 else premiumComments.hashCode) 
    ) +
         (if (premiumUom == null) 0 else premiumUom.hashCode) 
    ) +
         (if (premiumUomId == null) 0 else premiumUomId.hashCode) 
    ) +
         (if (presentedDocumentId == null) 0 else presentedDocumentId.hashCode) 
    ) +
         presentedDocumentIsCopy.hashCode
        
    ) +
         (if (presentedDocumentName == null) 0 else presentedDocumentName.hashCode) 
    ) +
         (if (pricingOffset == null) 0 else pricingOffset.hashCode) 
    ) +
         (if (pricingOffsetId == null) 0 else pricingOffsetId.hashCode) 
    ) +
         (if (qpType == null) 0 else qpType.hashCode) 
    ) +
         (if (qpTypeId == null) 0 else qpTypeId.hashCode) 
    ) +
         (if (quantity == null) 0 else quantity.hashCode) 
    ) +
         quotaNumber.hashCode
        
    ) +
         quotaOID.hashCode
        
    ) +
         (if (salesTradingRegion == null) 0 else salesTradingRegion.hashCode) 
    ) +
         (if (salesTradingRegionId == null) 0 else salesTradingRegionId.hashCode) 
    ) +
         (if (securityTerms == null) 0 else securityTerms.hashCode) 
    ) +
         (if (securityTermsId == null) 0 else securityTermsId.hashCode) 
    ) +
         (if (shape == null) 0 else shape.hashCode) 
    ) +
         (if (shapeId == null) 0 else shapeId.hashCode) 
    ) +
         (if (shipment == null) 0 else shipment.hashCode) 
    ) +
         (if (titanId == null) 0 else titanId.hashCode) 
    ) +
         tradeOID.hashCode
        
    ) +
         (if (uom == null) 0 else uom.hashCode) 
    ) +
         (if (uomId == null) 0 else uomId.hashCode) 
    ) +
         (if (vatInvoiceDate == null) 0 else vatInvoiceDate.hashCode) 
    ) +
         (if (vatInvoiceType == null) 0 else vatInvoiceType.hashCode) 
    
  }

  override def toString = {
    "{com.trafigura.tradecapture.internal.refinedmetal.TradeBlotterQuotaRow: " + "" + "contractualLocation = " + contractualLocation + ", " + "contractualLocationId = " + contractualLocationId + ", " + "contractualTerms = " + contractualTerms + ", " + "contractualTermsId = " + contractualTermsId + ", " + "currency = " + currency + ", " + "currencyId = " + currencyId + ", " + "destinationLocation = " + destinationLocation + ", " + "destinationLocationId = " + destinationLocationId + ", " + "destinationTerms = " + destinationTerms + ", " + "destinationTermsId = " + destinationTermsId + ", " + "expectedSales = " + expectedSales + ", " + "grade = " + grade + ", " + "gradeComments = " + gradeComments + ", " + "gradeId = " + gradeId + ", " + "market = " + market + ", " + "marketCode = " + marketCode + ", " + "marketId = " + marketId + ", " + "numberOfDeferredCreditDays = " + numberOfDeferredCreditDays + ", " + "paymentTerms = " + paymentTerms + ", " + "paymentTermsId = " + paymentTermsId + ", " + "premium = " + premium + ", " + "premiumCcy = " + premiumCcy + ", " + "premiumCcyId = " + premiumCcyId + ", " + "premiumComments = " + premiumComments + ", " + "premiumUom = " + premiumUom + ", " + "premiumUomId = " + premiumUomId + ", " + "presentedDocumentId = " + presentedDocumentId + ", " + "presentedDocumentIsCopy = " + presentedDocumentIsCopy + ", " + "presentedDocumentName = " + presentedDocumentName + ", " + "pricingOffset = " + pricingOffset + ", " + "pricingOffsetId = " + pricingOffsetId + ", " + "qpType = " + qpType + ", " + "qpTypeId = " + qpTypeId + ", " + "quantity = " + quantity + ", " + "quotaNumber = " + quotaNumber + ", " + "quotaOID = " + quotaOID + ", " + "salesTradingRegion = " + salesTradingRegion + ", " + "salesTradingRegionId = " + salesTradingRegionId + ", " + "securityTerms = " + securityTerms + ", " + "securityTermsId = " + securityTermsId + ", " + "shape = " + shape + ", " + "shapeId = " + shapeId + ", " + "shipment = " + shipment + ", " + "titanId = " + titanId + ", " + "tradeOID = " + tradeOID + ", " + "uom = " + uom + ", " + "uomId = " + uomId + ", " + "vatInvoiceDate = " + vatInvoiceDate + ", " + "vatInvoiceType = " + vatInvoiceType +  "}"
  }


  
         def toJson() : org.codehaus.jettison.json.JSONObject = {
      toJson(new SerialisationHelper)
    }

     def toJson(differentiator: SerialisationHelper) : org.codehaus.jettison.json.JSONObject = {
        var result = new org.codehaus.jettison.json.JSONObject();

        result.put("_node", differentiator.idFor(this))

        result.put("Type", "TradeCapture.Internal.RefinedMetal.TradeBlotterQuotaRow@1@1.0")
        
          
          
          
          
            result.putOpt("TradeOID", this.tradeOID);
          
        
          
          
          
          
            result.putOpt("TitanId", this.titanId);
          
        
          
          
          
          
            result.putOpt("QuotaOID", this.quotaOID);
          
        
          
          
          
          
            result.putOpt("QuotaNumber", this.quotaNumber);
          
        
          
          
          
          if(this.quantity != None) {
            result.putOpt("Quantity", this.quantity.getOrElse(null));
          }
        
          
          
          
          
            result.putOpt("Uom", this.uom);
          
        
          
          
          
          
            result.putOpt("UomId", this.uomId.getOrElse(null));
          
        
          
          
          
          
            result.putOpt("Grade", this.grade);
          
        
          
          
          
          
            result.putOpt("GradeId", this.gradeId.getOrElse(null));
          
        
          
          
          
          
            result.putOpt("Shape", this.shape);
          
        
          
          
          
          
            result.putOpt("ShapeId", this.shapeId.getOrElse(null));
          
        
          
          
          
          
            result.putOpt("ContractualLocation", this.contractualLocation);
          
        
          
          
          
          
            result.putOpt("ContractualLocationId", this.contractualLocationId.getOrElse(null));
          
        
          
          
          
          
            result.putOpt("ContractualTerms", this.contractualTerms);
          
        
          
          
          
          
            result.putOpt("ContractualTermsId", this.contractualTermsId.getOrElse(null));
          
        
          
          
          
          
            result.putOpt("SalesTradingRegion", this.salesTradingRegion);
          
        
          
          
          
          
            result.putOpt("SalesTradingRegionId", this.salesTradingRegionId.getOrElse(null));
          
        
          
          
          
          
            result.putOpt("SecurityTerms", this.securityTerms);
          
        
          
          
          
          
            result.putOpt("SecurityTermsId", this.securityTermsId.getOrElse(null));
          
        
          
          
          
          
            result.putOpt("PaymentTerms", this.paymentTerms);
          
        
          
          
          
          
            result.putOpt("PaymentTermsId", this.paymentTermsId.getOrElse(null));
          
        
          
          
          
          
            result.putOpt("QpTypeId", this.qpTypeId.getOrElse(null));
          
        
          
          
          
          
            result.putOpt("QpType", this.qpType);
          
        
          
          
          
          
            result.putOpt("Market", this.market);
          
        
          
          
          
          
            result.putOpt("MarketCode", this.marketCode);
          
        
          
          
          
          
            result.putOpt("MarketId", this.marketId.getOrElse(null));
          
        
          
          
          
          
            result.putOpt("Currency", this.currency);
          
        
          
          
          
          
            result.putOpt("CurrencyId", this.currencyId.getOrElse(null));
          
        
          
          
          
          
            result.putOpt("Shipment", JSONConversions.optionalMonthYearToJSON(this.shipment));
          
        
          
          
          
          
            result.putOpt("ExpectedSales", JSONConversions.optionalMonthYearToJSON(this.expectedSales));
          
        
          
          
          
          if(this.premium != None) {
            result.putOpt("Premium", this.premium.getOrElse(null));
          }
        
          
          
          
          
            result.putOpt("PremiumUom", this.premiumUom);
          
        
          
          
          
          
            result.putOpt("PremiumUomId", this.premiumUomId.getOrElse(null));
          
        
          
          
          
          
            result.putOpt("PremiumCcy", this.premiumCcy);
          
        
          
          
          
          
            result.putOpt("PremiumCcyId", this.premiumCcyId.getOrElse(null));
          
        
          
          
          
          
            result.putOpt("PremiumComments", this.premiumComments);
          
        
          
          
          
          
            result.putOpt("GradeComments", this.gradeComments);
          
        
          
          
          
          
            result.putOpt("PricingOffsetId", this.pricingOffsetId.getOrElse(null));
          
        
          
          
          
          
            result.putOpt("PricingOffset", this.pricingOffset);
          
        
          
          
          
          
            result.putOpt("DestinationLocationId", this.destinationLocationId.getOrElse(null));
          
        
          
          
          
          
            result.putOpt("DestinationLocation", this.destinationLocation);
          
        
          
          
          
          
            result.putOpt("DestinationTermsId", this.destinationTermsId.getOrElse(null));
          
        
          
          
          
          
            result.putOpt("DestinationTerms", this.destinationTerms);
          
        
          
          
          
          
            result.putOpt("PresentedDocumentId", this.presentedDocumentId.getOrElse(null));
          
        
          
          
          
          
            result.putOpt("PresentedDocumentName", this.presentedDocumentName);
          
        
          
          
          
          
            result.putOpt("PresentedDocumentIsCopy", this.presentedDocumentIsCopy);
          
        
          
          
          
          
            result.putOpt("NumberOfDeferredCreditDays", this.numberOfDeferredCreditDays);
          
        
          
          
          
          
            result.putOpt("VatInvoiceDate", JSONConversions.optionalDateToJSON(this.vatInvoiceDate));
          
        
          
          
          
          
            result.putOpt("VatInvoiceType", (this.vatInvoiceType) match { case null => null; case o => o.toJson });
          
        
        return result;
    }

     def loadJson(jobj : org.codehaus.jettison.json.JSONObject, cache: DeserialisationHelper) = {
        
        
          
              tradeOID = JSONConversions.optional[Int](jobj.opt("TradeOID"), 0)
          
              titanId = JSONConversions.optional[String](jobj.opt("TitanId"), null)
          
              quotaOID = JSONConversions.optional[Int](jobj.opt("QuotaOID"), 0)
          
              quotaNumber = JSONConversions.optional[Int](jobj.opt("QuotaNumber"), 0)
          
              quantity = (jobj.opt("Quantity")) match {case null => None; case n:Number => Some(n.doubleValue()); case _ => None}
          
              uom = JSONConversions.optional[String](jobj.opt("Uom"), null)
          
              uomId = (jobj.opt("UomId")) match {case null => None; case n:Number => Some(n.intValue()); case _ => None}
          
              grade = JSONConversions.optional[String](jobj.opt("Grade"), null)
          
              gradeId = (jobj.opt("GradeId")) match {case null => None; case n:Number => Some(n.intValue()); case _ => None}
          
              shape = JSONConversions.optional[String](jobj.opt("Shape"), null)
          
              shapeId = (jobj.opt("ShapeId")) match {case null => None; case n:Number => Some(n.intValue()); case _ => None}
          
              contractualLocation = JSONConversions.optional[String](jobj.opt("ContractualLocation"), null)
          
              contractualLocationId = (jobj.opt("ContractualLocationId")) match {case null => None; case n:Number => Some(n.intValue()); case _ => None}
          
              contractualTerms = JSONConversions.optional[String](jobj.opt("ContractualTerms"), null)
          
              contractualTermsId = (jobj.opt("ContractualTermsId")) match {case null => None; case n:Number => Some(n.intValue()); case _ => None}
          
              salesTradingRegion = JSONConversions.optional[String](jobj.opt("SalesTradingRegion"), null)
          
              salesTradingRegionId = (jobj.opt("SalesTradingRegionId")) match {case null => None; case n:Number => Some(n.intValue()); case _ => None}
          
              securityTerms = JSONConversions.optional[String](jobj.opt("SecurityTerms"), null)
          
              securityTermsId = (jobj.opt("SecurityTermsId")) match {case null => None; case n:Number => Some(n.intValue()); case _ => None}
          
              paymentTerms = JSONConversions.optional[String](jobj.opt("PaymentTerms"), null)
          
              paymentTermsId = (jobj.opt("PaymentTermsId")) match {case null => None; case n:Number => Some(n.intValue()); case _ => None}
          
              qpTypeId = (jobj.opt("QpTypeId")) match {case null => None; case n:Number => Some(n.intValue()); case _ => None}
          
              qpType = JSONConversions.optional[String](jobj.opt("QpType"), null)
          
              market = JSONConversions.optional[String](jobj.opt("Market"), null)
          
              marketCode = JSONConversions.optional[String](jobj.opt("MarketCode"), null)
          
              marketId = (jobj.opt("MarketId")) match {case null => None; case n:Number => Some(n.intValue()); case _ => None}
          
              currency = JSONConversions.optional[String](jobj.opt("Currency"), null)
          
              currencyId = (jobj.opt("CurrencyId")) match {case null => None; case n:Number => Some(n.intValue()); case _ => None}
          
              shipment = JSONConversions.optionalMonthYear(jobj.opt("Shipment"))
          
              expectedSales = JSONConversions.optionalMonthYear(jobj.opt("ExpectedSales"))
          
              premium = (jobj.opt("Premium")) match {case null => None; case n:Number => Some(n.doubleValue()); case _ => None}
          
              premiumUom = JSONConversions.optional[String](jobj.opt("PremiumUom"), null)
          
              premiumUomId = (jobj.opt("PremiumUomId")) match {case null => None; case n:Number => Some(n.intValue()); case _ => None}
          
              premiumCcy = JSONConversions.optional[String](jobj.opt("PremiumCcy"), null)
          
              premiumCcyId = (jobj.opt("PremiumCcyId")) match {case null => None; case n:Number => Some(n.intValue()); case _ => None}
          
              premiumComments = JSONConversions.optional[String](jobj.opt("PremiumComments"), null)
          
              gradeComments = JSONConversions.optional[String](jobj.opt("GradeComments"), null)
          
              pricingOffsetId = (jobj.opt("PricingOffsetId")) match {case null => None; case n:Number => Some(n.intValue()); case _ => None}
          
              pricingOffset = JSONConversions.optional[String](jobj.opt("PricingOffset"), null)
          
              destinationLocationId = (jobj.opt("DestinationLocationId")) match {case null => None; case n:Number => Some(n.intValue()); case _ => None}
          
              destinationLocation = JSONConversions.optional[String](jobj.opt("DestinationLocation"), null)
          
              destinationTermsId = (jobj.opt("DestinationTermsId")) match {case null => None; case n:Number => Some(n.intValue()); case _ => None}
          
              destinationTerms = JSONConversions.optional[String](jobj.opt("DestinationTerms"), null)
          
              presentedDocumentId = (jobj.opt("PresentedDocumentId")) match {case null => None; case n:Number => Some(n.intValue()); case _ => None}
          
              presentedDocumentName = JSONConversions.optional[String](jobj.opt("PresentedDocumentName"), null)
          
              presentedDocumentIsCopy = JSONConversions.optional[Boolean](jobj.opt("PresentedDocumentIsCopy"), false)
          
              numberOfDeferredCreditDays = JSONConversions.optional[Int](jobj.opt("NumberOfDeferredCreditDays"), 0)
          
              vatInvoiceDate = JSONConversions.optionalDate(jobj.opt("VatInvoiceDate"))
          
              vatInvoiceType = (jobj.optString("VatInvoiceType")) match { case null => null; case s: String => TradeBlotterQuotaRowVatInvoiceTypeEnum.forName(s) }
          
        
    }

  
}

object TradeBlotterQuotaRow {
  def version = ModelVersion("1")
  def wireFormatVersion = ModelVersion("1.0")

  
        val jsonTypeName = "TradeCapture.Internal.RefinedMetal.TradeBlotterQuotaRow"

    def fromJson(jobj : org.codehaus.jettison.json.JSONObject, cache: DeserialisationHelper = new DeserialisationHelper) : com.trafigura.tradecapture.internal.refinedmetal.TradeBlotterQuotaRow = {
      val v = TypeHolder(jobj.optString("Type"))

      v.assertModelVersion(version, "com.trafigura.tradecapture.internal.refinedmetal.TradeBlotterQuotaRow")
      v.assertWireFormatVersion(wireFormatVersion, "com.trafigura.tradecapture.internal.refinedmetal.TradeBlotterQuotaRow")

      
        
            val result = new com.trafigura.tradecapture.internal.refinedmetal.TradeBlotterQuotaRow()
            result.loadJson(jobj, cache)
            result
        
      
    }

  

  

  
    def apply(tradeOID: Int = 0, titanId: String = null, quotaOID: Int = 0, quotaNumber: Int = 0, quantity: scala.Option[Double] = None, uom: String = null, uomId: scala.Option[Int] = None, grade: String = null, gradeId: scala.Option[Int] = None, shape: String = null, shapeId: scala.Option[Int] = None, contractualLocation: String = null, contractualLocationId: scala.Option[Int] = None, contractualTerms: String = null, contractualTermsId: scala.Option[Int] = None, salesTradingRegion: String = null, salesTradingRegionId: scala.Option[Int] = None, securityTerms: String = null, securityTermsId: scala.Option[Int] = None, paymentTerms: String = null, paymentTermsId: scala.Option[Int] = None, qpTypeId: scala.Option[Int] = None, qpType: String = null, market: String = null, marketCode: String = null, marketId: scala.Option[Int] = None, currency: String = null, currencyId: scala.Option[Int] = None, shipment: org.joda.time.LocalDate = null, expectedSales: org.joda.time.LocalDate = null, premium: scala.Option[Double] = None, premiumUom: String = null, premiumUomId: scala.Option[Int] = None, premiumCcy: String = null, premiumCcyId: scala.Option[Int] = None, premiumComments: String = null, gradeComments: String = null, pricingOffsetId: scala.Option[Int] = None, pricingOffset: String = null, destinationLocationId: scala.Option[Int] = None, destinationLocation: String = null, destinationTermsId: scala.Option[Int] = None, destinationTerms: String = null, presentedDocumentId: scala.Option[Int] = None, presentedDocumentName: String = null, presentedDocumentIsCopy: Boolean = false, numberOfDeferredCreditDays: Int = 0, vatInvoiceDate: org.joda.time.LocalDate = null, vatInvoiceType: TradeBlotterQuotaRowVatInvoiceTypeEnum = null) = {
      val res = new com.trafigura.tradecapture.internal.refinedmetal.TradeBlotterQuotaRow
      
        res.tradeOID = tradeOID
      
        res.titanId = titanId
      
        res.quotaOID = quotaOID
      
        res.quotaNumber = quotaNumber
      
        res.quantity = quantity
      
        res.uom = uom
      
        res.uomId = uomId
      
        res.grade = grade
      
        res.gradeId = gradeId
      
        res.shape = shape
      
        res.shapeId = shapeId
      
        res.contractualLocation = contractualLocation
      
        res.contractualLocationId = contractualLocationId
      
        res.contractualTerms = contractualTerms
      
        res.contractualTermsId = contractualTermsId
      
        res.salesTradingRegion = salesTradingRegion
      
        res.salesTradingRegionId = salesTradingRegionId
      
        res.securityTerms = securityTerms
      
        res.securityTermsId = securityTermsId
      
        res.paymentTerms = paymentTerms
      
        res.paymentTermsId = paymentTermsId
      
        res.qpTypeId = qpTypeId
      
        res.qpType = qpType
      
        res.market = market
      
        res.marketCode = marketCode
      
        res.marketId = marketId
      
        res.currency = currency
      
        res.currencyId = currencyId
      
        res.shipment = shipment
      
        res.expectedSales = expectedSales
      
        res.premium = premium
      
        res.premiumUom = premiumUom
      
        res.premiumUomId = premiumUomId
      
        res.premiumCcy = premiumCcy
      
        res.premiumCcyId = premiumCcyId
      
        res.premiumComments = premiumComments
      
        res.gradeComments = gradeComments
      
        res.pricingOffsetId = pricingOffsetId
      
        res.pricingOffset = pricingOffset
      
        res.destinationLocationId = destinationLocationId
      
        res.destinationLocation = destinationLocation
      
        res.destinationTermsId = destinationTermsId
      
        res.destinationTerms = destinationTerms
      
        res.presentedDocumentId = presentedDocumentId
      
        res.presentedDocumentName = presentedDocumentName
      
        res.presentedDocumentIsCopy = presentedDocumentIsCopy
      
        res.numberOfDeferredCreditDays = numberOfDeferredCreditDays
      
        res.vatInvoiceDate = vatInvoiceDate
      
        res.vatInvoiceType = vatInvoiceType
      
      res
    }
  
}
