/**
 * WARNING: This file was automatically generated by the Trading Hub tooling version 2.15.
 * Any manual changes may be overwritten and lost!
 */


// Generated from model_service_http.rb

package com.trafigura.tradecapture.internal.refinedmetaltradeservice

import com.trafigura.tradecapture.internal.refinedmetal._
import com.trafigura.tradecapture.internal.refinedmetaltradeservice._
import com.trafigura.edm.shared.types._

import org.codehaus.jettison.json.JSONObject
import com.trafigura.tradinghub.support._
import javax.ws.rs._
import javax.ws.rs.core.Response
import org.jboss.resteasy.client.ClientResponse
import org.jboss.resteasy.annotations._
import scala.collection.JavaConversions._

// Some of the objects from the system namespace responses are
// used in handwritten code, so this hybrid resolution is required.
import com.trafigura.responses._


// JAX-RS support for GetTrades


// A resource trait corresponding to GetTrades

@Path("/GetTrades")
trait GetTradesResource {
  
  @Path("GetAll")
  @POST  @Produces(Array("application/json"))
  def getAll(@HeaderParam("User") _userHeader:String): Response
  
  @Path("GetByOid")
  @POST @Consumes(Array("application/json")) @Produces(Array("application/json"))
  def getByOid(@HeaderParam("User") _userHeader:String, in: String): Response
  
  @Path("GetByTitanId")
  @POST @Consumes(Array("application/json")) @Produces(Array("application/json"))
  def getByTitanId(@HeaderParam("User") _userHeader:String, in: String): Response
  
  @Path("GetByTitanIdWithVersions")
  @POST @Consumes(Array("application/json")) @Produces(Array("application/json"))
  def getByTitanIdWithVersions(@HeaderParam("User") _userHeader:String, in: String): Response
  
  @Path("GetVersion")
  @POST @Consumes(Array("application/json")) @Produces(Array("application/json"))
  def getVersion(@HeaderParam("User") _userHeader:String, in: String): Response
  
  @Path("GetVersions")
  @POST @Consumes(Array("application/json")) @Produces(Array("application/json"))
  def getVersions(@HeaderParam("User") _userHeader:String, in: String): Response
  
  @Path("GetByNeptuneId")
  @POST @Consumes(Array("application/json")) @Produces(Array("application/json"))
  def getByNeptuneId(@HeaderParam("User") _userHeader:String, in: String): Response
  
  @Path("GetBySearchPattern")
  @POST @Consumes(Array("application/json")) @Produces(Array("application/json"))
  def getBySearchPattern(@HeaderParam("User") _userHeader:String, in: String): Response
  
  @Path("Get")
  @POST @Consumes(Array("application/json")) @Produces(Array("application/json"))
  def get(@HeaderParam("User") _userHeader:String, in: String): Response
  
}


// Wrap a GetTradesResource (provided by RESTEasy's client
// support) as a GetTrades
//
// Note: will throw an exception on parse/status code errors, exception will contain details of the error
//
class GetTradesResourceProxy(val resource: GetTradesResource) extends GetTrades {

  val log = org.slf4j.LoggerFactory.getLogger(this.getClass.getName)

  
  def getAll() = getAll(null)
  def getAll( securityContext:SecurityContext = null): List[com.trafigura.tradecapture.internal.refinedmetal.RefinedMetalTrade] = {
    val _userHeader = if (securityContext != null) { securityContext.user } else { null }
    val response = resource.getAll(_userHeader)
    val content = response.asInstanceOf[ClientResponse[String]].getEntity(classOf[String])

    log.debug("Completed call to getAll: " + response.getStatus() + " - " + content)

    if (response.getStatus() == Response.Status.OK.getStatusCode()) {
      
	      try {
          val obj = JSONConversions.parseJSON(content)
          val cache = new DeserialisationHelper
          JSONConversions.optionalList(obj, x => (x) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.tradecapture.internal.refinedmetal.RefinedMetalTrade.fromJson(o, cache))) })
	      } catch {
          case ex : Exception => {
            log.error("Parse exception from Status-Code: " + response.getStatus() + " on content: " + content + "; throwing exception...", ex)
            throw new Exception("Service invocation, response parse exception: Status Code: " + response.getStatus() + ", Content: '" + content + "'")
          }
        }
      
    }
    else { // non OK 200 status response
      log.debug("status NOT OK 200, throwing exception...")

      val obj = JSONConversions.parseJSON(content)

      val err = (obj) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => Result.fromJson(o, new DeserialisationHelper) }
        err match {
          case er : Result => {
            log.error("error response: " + er.message  + " { " + er.toString + " } status: " + response.getStatus)
            val ex = new Exception(er.message  + " { " + er.toString + " } status: " + response.getStatus)
            //ex.setStackTrace(er.stackTrace) // todo, need to add server stack trace, probably to customer application exception class
            throw ex
          }
          case _ => {
            log.error("unknown response, not an error response, content: " + content)
            throw new Exception("Unhandled response received, content: " + content)
          }
        }
    }
  }
  
  def getByOid(oid: Int) = getByOid(oid,null)
  def getByOid(oid: Int, securityContext:SecurityContext = null): com.trafigura.tradecapture.internal.refinedmetal.RefinedMetalTrade = {
    val _userHeader = if (securityContext != null) { securityContext.user } else { null }
    val response = resource.getByOid(_userHeader, GetTradesJSON.serializeGetByOid(oid).toString)
    val content = response.asInstanceOf[ClientResponse[String]].getEntity(classOf[String])

    log.debug("Completed call to getByOid: " + response.getStatus() + " - " + content)

    if (response.getStatus() == Response.Status.OK.getStatusCode()) {
      
	      try {
          val obj = JSONConversions.parseJSON(content)
          val cache = new DeserialisationHelper
          (obj) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.tradecapture.internal.refinedmetal.RefinedMetalTrade.fromJson(o, cache))) }
	      } catch {
          case ex : Exception => {
            log.error("Parse exception from Status-Code: " + response.getStatus() + " on content: " + content + "; throwing exception...", ex)
            throw new Exception("Service invocation, response parse exception: Status Code: " + response.getStatus() + ", Content: '" + content + "'")
          }
        }
      
    }
    else { // non OK 200 status response
      log.debug("status NOT OK 200, throwing exception...")

      val obj = JSONConversions.parseJSON(content)

      val err = (obj) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => Result.fromJson(o, new DeserialisationHelper) }
        err match {
          case er : Result => {
            log.error("error response: " + er.message  + " { " + er.toString + " } status: " + response.getStatus)
            val ex = new Exception(er.message  + " { " + er.toString + " } status: " + response.getStatus)
            //ex.setStackTrace(er.stackTrace) // todo, need to add server stack trace, probably to customer application exception class
            throw ex
          }
          case _ => {
            log.error("unknown response, not an error response, content: " + content)
            throw new Exception("Unhandled response received, content: " + content)
          }
        }
    }
  }
  
  def getByTitanId(titanId: com.trafigura.edm.shared.types.TitanId) = getByTitanId(titanId,null)
  def getByTitanId(titanId: com.trafigura.edm.shared.types.TitanId, securityContext:SecurityContext = null): com.trafigura.tradecapture.internal.refinedmetal.RefinedMetalTrade = {
    val _userHeader = if (securityContext != null) { securityContext.user } else { null }
    val response = resource.getByTitanId(_userHeader, GetTradesJSON.serializeGetByTitanId(titanId).toString)
    val content = response.asInstanceOf[ClientResponse[String]].getEntity(classOf[String])

    log.debug("Completed call to getByTitanId: " + response.getStatus() + " - " + content)

    if (response.getStatus() == Response.Status.OK.getStatusCode()) {
      
	      try {
          val obj = JSONConversions.parseJSON(content)
          val cache = new DeserialisationHelper
          (obj) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.tradecapture.internal.refinedmetal.RefinedMetalTrade.fromJson(o, cache))) }
	      } catch {
          case ex : Exception => {
            log.error("Parse exception from Status-Code: " + response.getStatus() + " on content: " + content + "; throwing exception...", ex)
            throw new Exception("Service invocation, response parse exception: Status Code: " + response.getStatus() + ", Content: '" + content + "'")
          }
        }
      
    }
    else { // non OK 200 status response
      log.debug("status NOT OK 200, throwing exception...")

      val obj = JSONConversions.parseJSON(content)

      val err = (obj) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => Result.fromJson(o, new DeserialisationHelper) }
        err match {
          case er : Result => {
            log.error("error response: " + er.message  + " { " + er.toString + " } status: " + response.getStatus)
            val ex = new Exception(er.message  + " { " + er.toString + " } status: " + response.getStatus)
            //ex.setStackTrace(er.stackTrace) // todo, need to add server stack trace, probably to customer application exception class
            throw ex
          }
          case _ => {
            log.error("unknown response, not an error response, content: " + content)
            throw new Exception("Unhandled response received, content: " + content)
          }
        }
    }
  }
  
  def getByTitanIdWithVersions(titanId: com.trafigura.edm.shared.types.TitanId) = getByTitanIdWithVersions(titanId,null)
  def getByTitanIdWithVersions(titanId: com.trafigura.edm.shared.types.TitanId, securityContext:SecurityContext = null): com.trafigura.tradecapture.internal.refinedmetaltradeservice.GetTradeWithVersionsResult = {
    val _userHeader = if (securityContext != null) { securityContext.user } else { null }
    val response = resource.getByTitanIdWithVersions(_userHeader, GetTradesJSON.serializeGetByTitanIdWithVersions(titanId).toString)
    val content = response.asInstanceOf[ClientResponse[String]].getEntity(classOf[String])

    log.debug("Completed call to getByTitanIdWithVersions: " + response.getStatus() + " - " + content)

    if (response.getStatus() == Response.Status.OK.getStatusCode()) {
      
	      try {
          val obj = JSONConversions.parseJSON(content)
          val cache = new DeserialisationHelper
          (obj) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.tradecapture.internal.refinedmetaltradeservice.GetTradeWithVersionsResult.fromJson(o, cache))) }
	      } catch {
          case ex : Exception => {
            log.error("Parse exception from Status-Code: " + response.getStatus() + " on content: " + content + "; throwing exception...", ex)
            throw new Exception("Service invocation, response parse exception: Status Code: " + response.getStatus() + ", Content: '" + content + "'")
          }
        }
      
    }
    else { // non OK 200 status response
      log.debug("status NOT OK 200, throwing exception...")

      val obj = JSONConversions.parseJSON(content)

      val err = (obj) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => Result.fromJson(o, new DeserialisationHelper) }
        err match {
          case er : Result => {
            log.error("error response: " + er.message  + " { " + er.toString + " } status: " + response.getStatus)
            val ex = new Exception(er.message  + " { " + er.toString + " } status: " + response.getStatus)
            //ex.setStackTrace(er.stackTrace) // todo, need to add server stack trace, probably to customer application exception class
            throw ex
          }
          case _ => {
            log.error("unknown response, not an error response, content: " + content)
            throw new Exception("Unhandled response received, content: " + content)
          }
        }
    }
  }
  
  def getVersion(titanId: com.trafigura.edm.shared.types.TitanId, asOf: org.joda.time.DateTime) = getVersion(titanId, asOf,null)
  def getVersion(titanId: com.trafigura.edm.shared.types.TitanId, asOf: org.joda.time.DateTime, securityContext:SecurityContext = null): com.trafigura.tradecapture.internal.refinedmetal.RefinedMetalTrade = {
    val _userHeader = if (securityContext != null) { securityContext.user } else { null }
    val response = resource.getVersion(_userHeader, GetTradesJSON.serializeGetVersion(titanId, asOf).toString)
    val content = response.asInstanceOf[ClientResponse[String]].getEntity(classOf[String])

    log.debug("Completed call to getVersion: " + response.getStatus() + " - " + content)

    if (response.getStatus() == Response.Status.OK.getStatusCode()) {
      
	      try {
          val obj = JSONConversions.parseJSON(content)
          val cache = new DeserialisationHelper
          (obj) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.tradecapture.internal.refinedmetal.RefinedMetalTrade.fromJson(o, cache))) }
	      } catch {
          case ex : Exception => {
            log.error("Parse exception from Status-Code: " + response.getStatus() + " on content: " + content + "; throwing exception...", ex)
            throw new Exception("Service invocation, response parse exception: Status Code: " + response.getStatus() + ", Content: '" + content + "'")
          }
        }
      
    }
    else { // non OK 200 status response
      log.debug("status NOT OK 200, throwing exception...")

      val obj = JSONConversions.parseJSON(content)

      val err = (obj) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => Result.fromJson(o, new DeserialisationHelper) }
        err match {
          case er : Result => {
            log.error("error response: " + er.message  + " { " + er.toString + " } status: " + response.getStatus)
            val ex = new Exception(er.message  + " { " + er.toString + " } status: " + response.getStatus)
            //ex.setStackTrace(er.stackTrace) // todo, need to add server stack trace, probably to customer application exception class
            throw ex
          }
          case _ => {
            log.error("unknown response, not an error response, content: " + content)
            throw new Exception("Unhandled response received, content: " + content)
          }
        }
    }
  }
  
  def getVersions(titanId: com.trafigura.edm.shared.types.TitanId) = getVersions(titanId,null)
  def getVersions(titanId: com.trafigura.edm.shared.types.TitanId, securityContext:SecurityContext = null): List[com.trafigura.tradecapture.internal.refinedmetal.RefinedMetalTrade] = {
    val _userHeader = if (securityContext != null) { securityContext.user } else { null }
    val response = resource.getVersions(_userHeader, GetTradesJSON.serializeGetVersions(titanId).toString)
    val content = response.asInstanceOf[ClientResponse[String]].getEntity(classOf[String])

    log.debug("Completed call to getVersions: " + response.getStatus() + " - " + content)

    if (response.getStatus() == Response.Status.OK.getStatusCode()) {
      
	      try {
          val obj = JSONConversions.parseJSON(content)
          val cache = new DeserialisationHelper
          JSONConversions.optionalList(obj, x => (x) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.tradecapture.internal.refinedmetal.RefinedMetalTrade.fromJson(o, cache))) })
	      } catch {
          case ex : Exception => {
            log.error("Parse exception from Status-Code: " + response.getStatus() + " on content: " + content + "; throwing exception...", ex)
            throw new Exception("Service invocation, response parse exception: Status Code: " + response.getStatus() + ", Content: '" + content + "'")
          }
        }
      
    }
    else { // non OK 200 status response
      log.debug("status NOT OK 200, throwing exception...")

      val obj = JSONConversions.parseJSON(content)

      val err = (obj) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => Result.fromJson(o, new DeserialisationHelper) }
        err match {
          case er : Result => {
            log.error("error response: " + er.message  + " { " + er.toString + " } status: " + response.getStatus)
            val ex = new Exception(er.message  + " { " + er.toString + " } status: " + response.getStatus)
            //ex.setStackTrace(er.stackTrace) // todo, need to add server stack trace, probably to customer application exception class
            throw ex
          }
          case _ => {
            log.error("unknown response, not an error response, content: " + content)
            throw new Exception("Unhandled response received, content: " + content)
          }
        }
    }
  }
  
  def getByNeptuneId(neptuneId: String) = getByNeptuneId(neptuneId,null)
  def getByNeptuneId(neptuneId: String, securityContext:SecurityContext = null): com.trafigura.tradecapture.internal.refinedmetal.RefinedMetalTrade = {
    val _userHeader = if (securityContext != null) { securityContext.user } else { null }
    val response = resource.getByNeptuneId(_userHeader, GetTradesJSON.serializeGetByNeptuneId(neptuneId).toString)
    val content = response.asInstanceOf[ClientResponse[String]].getEntity(classOf[String])

    log.debug("Completed call to getByNeptuneId: " + response.getStatus() + " - " + content)

    if (response.getStatus() == Response.Status.OK.getStatusCode()) {
      
	      try {
          val obj = JSONConversions.parseJSON(content)
          val cache = new DeserialisationHelper
          (obj) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.tradecapture.internal.refinedmetal.RefinedMetalTrade.fromJson(o, cache))) }
	      } catch {
          case ex : Exception => {
            log.error("Parse exception from Status-Code: " + response.getStatus() + " on content: " + content + "; throwing exception...", ex)
            throw new Exception("Service invocation, response parse exception: Status Code: " + response.getStatus() + ", Content: '" + content + "'")
          }
        }
      
    }
    else { // non OK 200 status response
      log.debug("status NOT OK 200, throwing exception...")

      val obj = JSONConversions.parseJSON(content)

      val err = (obj) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => Result.fromJson(o, new DeserialisationHelper) }
        err match {
          case er : Result => {
            log.error("error response: " + er.message  + " { " + er.toString + " } status: " + response.getStatus)
            val ex = new Exception(er.message  + " { " + er.toString + " } status: " + response.getStatus)
            //ex.setStackTrace(er.stackTrace) // todo, need to add server stack trace, probably to customer application exception class
            throw ex
          }
          case _ => {
            log.error("unknown response, not an error response, content: " + content)
            throw new Exception("Unhandled response received, content: " + content)
          }
        }
    }
  }
  
  def getBySearchPattern(neptuneId: String) = getBySearchPattern(neptuneId,null)
  def getBySearchPattern(neptuneId: String, securityContext:SecurityContext = null): com.trafigura.tradecapture.internal.refinedmetaltradeservice.SearchResult = {
    val _userHeader = if (securityContext != null) { securityContext.user } else { null }
    val response = resource.getBySearchPattern(_userHeader, GetTradesJSON.serializeGetBySearchPattern(neptuneId).toString)
    val content = response.asInstanceOf[ClientResponse[String]].getEntity(classOf[String])

    log.debug("Completed call to getBySearchPattern: " + response.getStatus() + " - " + content)

    if (response.getStatus() == Response.Status.OK.getStatusCode()) {
      
	      try {
          val obj = JSONConversions.parseJSON(content)
          val cache = new DeserialisationHelper
          (obj) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.tradecapture.internal.refinedmetaltradeservice.SearchResult.fromJson(o, cache))) }
	      } catch {
          case ex : Exception => {
            log.error("Parse exception from Status-Code: " + response.getStatus() + " on content: " + content + "; throwing exception...", ex)
            throw new Exception("Service invocation, response parse exception: Status Code: " + response.getStatus() + ", Content: '" + content + "'")
          }
        }
      
    }
    else { // non OK 200 status response
      log.debug("status NOT OK 200, throwing exception...")

      val obj = JSONConversions.parseJSON(content)

      val err = (obj) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => Result.fromJson(o, new DeserialisationHelper) }
        err match {
          case er : Result => {
            log.error("error response: " + er.message  + " { " + er.toString + " } status: " + response.getStatus)
            val ex = new Exception(er.message  + " { " + er.toString + " } status: " + response.getStatus)
            //ex.setStackTrace(er.stackTrace) // todo, need to add server stack trace, probably to customer application exception class
            throw ex
          }
          case _ => {
            log.error("unknown response, not an error response, content: " + content)
            throw new Exception("Unhandled response received, content: " + content)
          }
        }
    }
  }
  
  def get(titanIDSmuggledAsOid: Int) = get(titanIDSmuggledAsOid,null)
  def get(titanIDSmuggledAsOid: Int, securityContext:SecurityContext = null): com.trafigura.tradecapture.internal.refinedmetal.RefinedMetalTrade = {
    val _userHeader = if (securityContext != null) { securityContext.user } else { null }
    val response = resource.get(_userHeader, GetTradesJSON.serializeGet(titanIDSmuggledAsOid).toString)
    val content = response.asInstanceOf[ClientResponse[String]].getEntity(classOf[String])

    log.debug("Completed call to get: " + response.getStatus() + " - " + content)

    if (response.getStatus() == Response.Status.OK.getStatusCode()) {
      
	      try {
          val obj = JSONConversions.parseJSON(content)
          val cache = new DeserialisationHelper
          (obj) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.tradecapture.internal.refinedmetal.RefinedMetalTrade.fromJson(o, cache))) }
	      } catch {
          case ex : Exception => {
            log.error("Parse exception from Status-Code: " + response.getStatus() + " on content: " + content + "; throwing exception...", ex)
            throw new Exception("Service invocation, response parse exception: Status Code: " + response.getStatus() + ", Content: '" + content + "'")
          }
        }
      
    }
    else { // non OK 200 status response
      log.debug("status NOT OK 200, throwing exception...")

      val obj = JSONConversions.parseJSON(content)

      val err = (obj) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => Result.fromJson(o, new DeserialisationHelper) }
        err match {
          case er : Result => {
            log.error("error response: " + er.message  + " { " + er.toString + " } status: " + response.getStatus)
            val ex = new Exception(er.message  + " { " + er.toString + " } status: " + response.getStatus)
            //ex.setStackTrace(er.stackTrace) // todo, need to add server stack trace, probably to customer application exception class
            throw ex
          }
          case _ => {
            log.error("unknown response, not an error response, content: " + content)
            throw new Exception("Unhandled response received, content: " + content)
          }
        }
    }
  }
  
}

// Wrap a GetTrades as a GetTradesResource (e.g. to be
// exposed by a JAX-RS implementation).

class GetTradesResourceStub(val target: GetTrades, filters: java.util.List[ServiceFilter])
    extends AbstractResourceStub(filters)
    with GetTradesResource {

  def this(target: GetTrades) = this(target, new java.util.ArrayList[ServiceFilter])

  requireFilters("com.trafigura.tradinghub.support.PermissionFilter","com.trafigura.services.security.ServiceOperationFilterBase")

  
  def getAll(_userHeader:String): Response = {

    try {
    val params = new JSONObject()
     val res = 
      GetTradesJSON.dispatch(target, filters.toSeq, "GetAll", params, buildSecurityContext(_userHeader))

    
    Response.ok(JSONConversions.stringifyJSON(res.opt("result"))).build
    
    } catch {
      case ex:Throwable => generateErrorEntity(ex)
    }
  }
  
  def getByOid(_userHeader:String, in: String): Response = {

    try {
    val params = new JSONObject(in)
     val res = 
      GetTradesJSON.dispatch(target, filters.toSeq, "GetByOid", params, buildSecurityContext(_userHeader))

    
    Response.ok(JSONConversions.stringifyJSON(res.opt("result"))).build
    
    } catch {
      case ex:Throwable => generateErrorEntity(ex)
    }
  }
  
  def getByTitanId(_userHeader:String, in: String): Response = {

    try {
    val params = new JSONObject(in)
     val res = 
      GetTradesJSON.dispatch(target, filters.toSeq, "GetByTitanId", params, buildSecurityContext(_userHeader))

    
    Response.ok(JSONConversions.stringifyJSON(res.opt("result"))).build
    
    } catch {
      case ex:Throwable => generateErrorEntity(ex)
    }
  }
  
  def getByTitanIdWithVersions(_userHeader:String, in: String): Response = {

    try {
    val params = new JSONObject(in)
     val res = 
      GetTradesJSON.dispatch(target, filters.toSeq, "GetByTitanIdWithVersions", params, buildSecurityContext(_userHeader))

    
    Response.ok(JSONConversions.stringifyJSON(res.opt("result"))).build
    
    } catch {
      case ex:Throwable => generateErrorEntity(ex)
    }
  }
  
  def getVersion(_userHeader:String, in: String): Response = {

    try {
    val params = new JSONObject(in)
     val res = 
      GetTradesJSON.dispatch(target, filters.toSeq, "GetVersion", params, buildSecurityContext(_userHeader))

    
    Response.ok(JSONConversions.stringifyJSON(res.opt("result"))).build
    
    } catch {
      case ex:Throwable => generateErrorEntity(ex)
    }
  }
  
  def getVersions(_userHeader:String, in: String): Response = {

    try {
    val params = new JSONObject(in)
     val res = 
      GetTradesJSON.dispatch(target, filters.toSeq, "GetVersions", params, buildSecurityContext(_userHeader))

    
    Response.ok(JSONConversions.stringifyJSON(res.opt("result"))).build
    
    } catch {
      case ex:Throwable => generateErrorEntity(ex)
    }
  }
  
  def getByNeptuneId(_userHeader:String, in: String): Response = {

    try {
    val params = new JSONObject(in)
     val res = 
      GetTradesJSON.dispatch(target, filters.toSeq, "GetByNeptuneId", params, buildSecurityContext(_userHeader))

    
    Response.ok(JSONConversions.stringifyJSON(res.opt("result"))).build
    
    } catch {
      case ex:Throwable => generateErrorEntity(ex)
    }
  }
  
  def getBySearchPattern(_userHeader:String, in: String): Response = {

    try {
    val params = new JSONObject(in)
     val res = 
      GetTradesJSON.dispatch(target, filters.toSeq, "GetBySearchPattern", params, buildSecurityContext(_userHeader))

    
    Response.ok(JSONConversions.stringifyJSON(res.opt("result"))).build
    
    } catch {
      case ex:Throwable => generateErrorEntity(ex)
    }
  }
  
  def get(_userHeader:String, in: String): Response = {

    try {
    val params = new JSONObject(in)
     val res = 
      GetTradesJSON.dispatch(target, filters.toSeq, "Get", params, buildSecurityContext(_userHeader))

    
    Response.ok(JSONConversions.stringifyJSON(res.opt("result"))).build
    
    } catch {
      case ex:Throwable => generateErrorEntity(ex)
    }
  }
  
}
