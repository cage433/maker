/**
 * WARNING: This file was automatically generated by the Trading Hub tooling version 2.15.
 * Any manual changes may be overwritten and lost!
 */


// Generated from model_object_scala.erb

package com.trafigura.tradecapture.internal.refinedmetal





import com.trafigura.tradinghub.support._
import scala.collection.JavaConversions._



/**
 pricing specification list
 */


 class DocumentPricingSpecParams extends com.trafigura.tradinghub.support.ModelObject  {
  


  
    

var ordinal:Int = 0
    
    
    

var pricingFixations:List[com.trafigura.tradecapture.internal.refinedmetal.DocumentPricingFixationParams] = null
    
    
    

var hedgeRequests:List[com.trafigura.tradecapture.internal.refinedmetal.DocumentHedgeRequestParams] = null
    
    
    

var comments:String = null
    
    
    

var premiumComments:String = null
    
    





  override def equals(o: Any) = o match {
    case r: AnyRef =>
        if (o.isInstanceOf[com.trafigura.tradecapture.internal.refinedmetal.DocumentPricingSpecParams]) {
            val that = r.asInstanceOf[com.trafigura.tradecapture.internal.refinedmetal.DocumentPricingSpecParams]
            that.canEqual(this) && this.comments == that.comments && this.hedgeRequests == that.hedgeRequests && this.ordinal == that.ordinal && this.premiumComments == that.premiumComments && this.pricingFixations == that.pricingFixations &&  true
        }
        else false
    case _ => false
  }

  override def canEqual(that : Any) = that.isInstanceOf[com.trafigura.tradecapture.internal.refinedmetal.DocumentPricingSpecParams]

  override def hashCode = {
    (41 * (41 * (41 * (41 * (41 *  1
    ) +
         (if (comments == null) 0 else comments.hashCode) 
    ) +
         (if (hedgeRequests == null) 0 else hedgeRequests.hashCode) 
    ) +
         ordinal.hashCode
        
    ) +
         (if (premiumComments == null) 0 else premiumComments.hashCode) 
    ) +
         (if (pricingFixations == null) 0 else pricingFixations.hashCode) 
    
  }

  override def toString = {
    "{com.trafigura.tradecapture.internal.refinedmetal.DocumentPricingSpecParams: " + "" + "comments = " + comments + ", " + "hedgeRequests = " + hedgeRequests + ", " + "ordinal = " + ordinal + ", " + "premiumComments = " + premiumComments + ", " + "pricingFixations = " + pricingFixations +  "}"
  }


  
         def toJson() : org.codehaus.jettison.json.JSONObject = {
      toJson(new SerialisationHelper)
    }

     def toJson(differentiator: SerialisationHelper) : org.codehaus.jettison.json.JSONObject = {
        var result = new org.codehaus.jettison.json.JSONObject();

        result.put("_node", differentiator.idFor(this))

        result.put("Type", "TradeCapture.Internal.RefinedMetal.DocumentPricingSpecParams@1@1.0")
        
          
          
          
          
            result.putOpt("Ordinal", this.ordinal);
          
        
          
          
          
          
            result.putOpt("PricingFixations", new org.codehaus.jettison.json.JSONArray(if(this.pricingFixations == null) new java.util.ArrayList() else java.util.Arrays.asList(this.pricingFixations.map(t => (t) match { case null => null; case o => o.toJson(differentiator) }).toArray: _*)));
          
        
          
          
          
          
            result.putOpt("HedgeRequests", new org.codehaus.jettison.json.JSONArray(if(this.hedgeRequests == null) new java.util.ArrayList() else java.util.Arrays.asList(this.hedgeRequests.map(t => (t) match { case null => null; case o => o.toJson(differentiator) }).toArray: _*)));
          
        
          
          
          
          
            result.putOpt("Comments", this.comments);
          
        
          
          
          
          
            result.putOpt("PremiumComments", this.premiumComments);
          
        
        return result;
    }

     def loadJson(jobj : org.codehaus.jettison.json.JSONObject, cache: DeserialisationHelper) = {
        
        
          
              ordinal = JSONConversions.optional[Int](jobj.opt("Ordinal"), 0)
          
              pricingFixations = JSONConversions.optionalList(jobj.opt("PricingFixations"), x => (x) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.tradecapture.internal.refinedmetal.DocumentPricingFixationParams.fromJson(o, cache))) })
          
              hedgeRequests = JSONConversions.optionalList(jobj.opt("HedgeRequests"), x => (x) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.tradecapture.internal.refinedmetal.DocumentHedgeRequestParams.fromJson(o, cache))) })
          
              comments = JSONConversions.optional[String](jobj.opt("Comments"), null)
          
              premiumComments = JSONConversions.optional[String](jobj.opt("PremiumComments"), null)
          
        
    }

  
}

object DocumentPricingSpecParams {
  def version = ModelVersion("1")
  def wireFormatVersion = ModelVersion("1.0")

  
        val jsonTypeName = "TradeCapture.Internal.RefinedMetal.DocumentPricingSpecParams"

    def fromJson(jobj : org.codehaus.jettison.json.JSONObject, cache: DeserialisationHelper = new DeserialisationHelper) : com.trafigura.tradecapture.internal.refinedmetal.DocumentPricingSpecParams = {
      val v = TypeHolder(jobj.optString("Type"))

      v.assertModelVersion(version, "com.trafigura.tradecapture.internal.refinedmetal.DocumentPricingSpecParams")
      v.assertWireFormatVersion(wireFormatVersion, "com.trafigura.tradecapture.internal.refinedmetal.DocumentPricingSpecParams")

      
        
            val result = new com.trafigura.tradecapture.internal.refinedmetal.DocumentPricingSpecParams()
            result.loadJson(jobj, cache)
            result
        
      
    }

  

  

  
    def apply(ordinal: Int = 0, pricingFixations: List[com.trafigura.tradecapture.internal.refinedmetal.DocumentPricingFixationParams] = null, hedgeRequests: List[com.trafigura.tradecapture.internal.refinedmetal.DocumentHedgeRequestParams] = null, comments: String = null, premiumComments: String = null) = {
      val res = new com.trafigura.tradecapture.internal.refinedmetal.DocumentPricingSpecParams
      
        res.ordinal = ordinal
      
        res.pricingFixations = pricingFixations
      
        res.hedgeRequests = hedgeRequests
      
        res.comments = comments
      
        res.premiumComments = premiumComments
      
      res
    }
  
}
