/**
 * WARNING: This file was automatically generated by the Trading Hub tooling version 2.15.
 * Any manual changes may be overwritten and lost!
 */


// Generated from model_object_scala.erb

package com.trafigura.tradecapture.internal.refinedmetal





import com.trafigura.tradinghub.support._
import scala.collection.JavaConversions._



/**
 this is the model as used for Release 1 of RMET
Translation service model for Titan tactical ref-data
these objects are to allow multiple languages for reference data
 */


 class Language extends com.trafigura.tradinghub.support.ModelObject  {
  


  
    

var oid:Int = 0
    
    
    

var code:String = null
    
    
    

var name:String = null
    
    
    

var optional:Boolean = false
    
    





  override def equals(o: Any) = o match {
    case r: AnyRef =>
        if (o.isInstanceOf[com.trafigura.tradecapture.internal.refinedmetal.Language]) {
            val that = r.asInstanceOf[com.trafigura.tradecapture.internal.refinedmetal.Language]
            that.canEqual(this) && this.code == that.code && this.name == that.name && this.oid == that.oid && this.optional == that.optional &&  true
        }
        else false
    case _ => false
  }

  override def canEqual(that : Any) = that.isInstanceOf[com.trafigura.tradecapture.internal.refinedmetal.Language]

  override def hashCode = {
    (41 * (41 * (41 * (41 *  1
    ) +
         (if (code == null) 0 else code.hashCode) 
    ) +
         (if (name == null) 0 else name.hashCode) 
    ) +
         oid.hashCode
        
    ) +
         optional.hashCode
        
    
  }

  override def toString = {
    "{com.trafigura.tradecapture.internal.refinedmetal.Language: " + "" + "code = " + code + ", " + "name = " + name + ", " + "oid = " + oid + ", " + "optional = " + optional +  "}"
  }


  
         def toJson() : org.codehaus.jettison.json.JSONObject = {
      toJson(new SerialisationHelper)
    }

     def toJson(differentiator: SerialisationHelper) : org.codehaus.jettison.json.JSONObject = {
        var result = new org.codehaus.jettison.json.JSONObject();

        result.put("_node", differentiator.idFor(this))

        result.put("Type", "TradeCapture.Internal.RefinedMetal.Language@1@1.0")
        
          
          
          
          
            result.putOpt("Oid", this.oid);
          
        
          
          
          
          
            result.putOpt("Code", this.code);
          
        
          
          
          
          
            result.putOpt("Name", this.name);
          
        
          
          
          
          
            result.putOpt("Optional", this.optional);
          
        
        return result;
    }

     def loadJson(jobj : org.codehaus.jettison.json.JSONObject, cache: DeserialisationHelper) = {
        
        
          
              oid = JSONConversions.optional[Int](jobj.opt("Oid"), 0)
          
              code = JSONConversions.optional[String](jobj.opt("Code"), null)
          
              name = JSONConversions.optional[String](jobj.opt("Name"), null)
          
              optional = JSONConversions.optional[Boolean](jobj.opt("Optional"), false)
          
        
    }

  
}

object Language {
  def version = ModelVersion("1")
  def wireFormatVersion = ModelVersion("1.0")

  
        val jsonTypeName = "TradeCapture.Internal.RefinedMetal.Language"

    def fromJson(jobj : org.codehaus.jettison.json.JSONObject, cache: DeserialisationHelper = new DeserialisationHelper) : com.trafigura.tradecapture.internal.refinedmetal.Language = {
      val v = TypeHolder(jobj.optString("Type"))

      v.assertModelVersion(version, "com.trafigura.tradecapture.internal.refinedmetal.Language")
      v.assertWireFormatVersion(wireFormatVersion, "com.trafigura.tradecapture.internal.refinedmetal.Language")

      
        
            val result = new com.trafigura.tradecapture.internal.refinedmetal.Language()
            result.loadJson(jobj, cache)
            result
        
      
    }

  

  

  
    def apply(oid: Int = 0, code: String = null, name: String = null, optional: Boolean = false) = {
      val res = new com.trafigura.tradecapture.internal.refinedmetal.Language
      
        res.oid = oid
      
        res.code = code
      
        res.name = name
      
        res.optional = optional
      
      res
    }
  
}
