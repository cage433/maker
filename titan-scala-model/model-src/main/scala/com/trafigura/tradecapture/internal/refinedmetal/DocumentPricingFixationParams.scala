/**
 * WARNING: This file was automatically generated by the Trading Hub tooling version 2.15.
 * Any manual changes may be overwritten and lost!
 */


// Generated from model_object_scala.erb

package com.trafigura.tradecapture.internal.refinedmetal





import com.trafigura.tradinghub.support._
import scala.collection.JavaConversions._



/**
 this is the model as used for Release 1 of RMET
used in summary and contract documents to represent a pricing fixation
 */


 class DocumentPricingFixationParams extends com.trafigura.tradinghub.support.ModelObject  {
  


  
    

var ordinal:Int = 0
    
    
    

var price:Double = 0.0
    
    
    

var currency:String = null
    
    
    

var currencyId:Int = 0
    
    
    

var currencyUom:String = null
    
    
    

var currencyUomId:Int = 0
    
    
    

var brand:String = null
    
    
    

var quantity:Double = 0.0
    
    
    

var quantityUom:String = null
    
    
    

var quantityUomId:Int = 0
    
    





  override def equals(o: Any) = o match {
    case r: AnyRef =>
        if (o.isInstanceOf[com.trafigura.tradecapture.internal.refinedmetal.DocumentPricingFixationParams]) {
            val that = r.asInstanceOf[com.trafigura.tradecapture.internal.refinedmetal.DocumentPricingFixationParams]
            that.canEqual(this) && this.brand == that.brand && this.currency == that.currency && this.currencyId == that.currencyId && this.currencyUom == that.currencyUom && this.currencyUomId == that.currencyUomId && this.ordinal == that.ordinal && this.price == that.price && this.quantity == that.quantity && this.quantityUom == that.quantityUom && this.quantityUomId == that.quantityUomId &&  true
        }
        else false
    case _ => false
  }

  override def canEqual(that : Any) = that.isInstanceOf[com.trafigura.tradecapture.internal.refinedmetal.DocumentPricingFixationParams]

  override def hashCode = {
    (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 *  1
    ) +
         (if (brand == null) 0 else brand.hashCode) 
    ) +
         (if (currency == null) 0 else currency.hashCode) 
    ) +
         currencyId.hashCode
        
    ) +
         (if (currencyUom == null) 0 else currencyUom.hashCode) 
    ) +
         currencyUomId.hashCode
        
    ) +
         ordinal.hashCode
        
    ) +
         price.hashCode
        
    ) +
         quantity.hashCode
        
    ) +
         (if (quantityUom == null) 0 else quantityUom.hashCode) 
    ) +
         quantityUomId.hashCode
        
    
  }

  override def toString = {
    "{com.trafigura.tradecapture.internal.refinedmetal.DocumentPricingFixationParams: " + "" + "brand = " + brand + ", " + "currency = " + currency + ", " + "currencyId = " + currencyId + ", " + "currencyUom = " + currencyUom + ", " + "currencyUomId = " + currencyUomId + ", " + "ordinal = " + ordinal + ", " + "price = " + price + ", " + "quantity = " + quantity + ", " + "quantityUom = " + quantityUom + ", " + "quantityUomId = " + quantityUomId +  "}"
  }


  
         def toJson() : org.codehaus.jettison.json.JSONObject = {
      toJson(new SerialisationHelper)
    }

     def toJson(differentiator: SerialisationHelper) : org.codehaus.jettison.json.JSONObject = {
        var result = new org.codehaus.jettison.json.JSONObject();

        result.put("_node", differentiator.idFor(this))

        result.put("Type", "TradeCapture.Internal.RefinedMetal.DocumentPricingFixationParams@1@1.0")
        
          
          
          
          
            result.putOpt("Ordinal", this.ordinal);
          
        
          
          
          
          
            result.putOpt("Price", this.price);
          
        
          
          
          
          
            result.putOpt("Currency", this.currency);
          
        
          
          
          
          
            result.putOpt("CurrencyId", this.currencyId);
          
        
          
          
          
          
            result.putOpt("CurrencyUom", this.currencyUom);
          
        
          
          
          
          
            result.putOpt("CurrencyUomId", this.currencyUomId);
          
        
          
          
          
          
            result.putOpt("Brand", this.brand);
          
        
          
          
          
          
            result.putOpt("Quantity", this.quantity);
          
        
          
          
          
          
            result.putOpt("QuantityUom", this.quantityUom);
          
        
          
          
          
          
            result.putOpt("QuantityUomId", this.quantityUomId);
          
        
        return result;
    }

     def loadJson(jobj : org.codehaus.jettison.json.JSONObject, cache: DeserialisationHelper) = {
        
        
          
              ordinal = JSONConversions.optional[Int](jobj.opt("Ordinal"), 0)
          
              price = JSONConversions.optionalReal(jobj.opt("Price"))
          
              currency = JSONConversions.optional[String](jobj.opt("Currency"), null)
          
              currencyId = JSONConversions.optional[Int](jobj.opt("CurrencyId"), 0)
          
              currencyUom = JSONConversions.optional[String](jobj.opt("CurrencyUom"), null)
          
              currencyUomId = JSONConversions.optional[Int](jobj.opt("CurrencyUomId"), 0)
          
              brand = JSONConversions.optional[String](jobj.opt("Brand"), null)
          
              quantity = JSONConversions.optionalReal(jobj.opt("Quantity"))
          
              quantityUom = JSONConversions.optional[String](jobj.opt("QuantityUom"), null)
          
              quantityUomId = JSONConversions.optional[Int](jobj.opt("QuantityUomId"), 0)
          
        
    }

  
}

object DocumentPricingFixationParams {
  def version = ModelVersion("1")
  def wireFormatVersion = ModelVersion("1.0")

  
        val jsonTypeName = "TradeCapture.Internal.RefinedMetal.DocumentPricingFixationParams"

    def fromJson(jobj : org.codehaus.jettison.json.JSONObject, cache: DeserialisationHelper = new DeserialisationHelper) : com.trafigura.tradecapture.internal.refinedmetal.DocumentPricingFixationParams = {
      val v = TypeHolder(jobj.optString("Type"))

      v.assertModelVersion(version, "com.trafigura.tradecapture.internal.refinedmetal.DocumentPricingFixationParams")
      v.assertWireFormatVersion(wireFormatVersion, "com.trafigura.tradecapture.internal.refinedmetal.DocumentPricingFixationParams")

      
        
            val result = new com.trafigura.tradecapture.internal.refinedmetal.DocumentPricingFixationParams()
            result.loadJson(jobj, cache)
            result
        
      
    }

  

  

  
    def apply(ordinal: Int = 0, price: Double = 0.0, currency: String = null, currencyId: Int = 0, currencyUom: String = null, currencyUomId: Int = 0, brand: String = null, quantity: Double = 0.0, quantityUom: String = null, quantityUomId: Int = 0) = {
      val res = new com.trafigura.tradecapture.internal.refinedmetal.DocumentPricingFixationParams
      
        res.ordinal = ordinal
      
        res.price = price
      
        res.currency = currency
      
        res.currencyId = currencyId
      
        res.currencyUom = currencyUom
      
        res.currencyUomId = currencyUomId
      
        res.brand = brand
      
        res.quantity = quantity
      
        res.quantityUom = quantityUom
      
        res.quantityUomId = quantityUomId
      
      res
    }
  
}
