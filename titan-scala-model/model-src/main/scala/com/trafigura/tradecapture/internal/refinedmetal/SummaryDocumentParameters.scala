/**
 * WARNING: This file was automatically generated by the Trading Hub tooling version 2.15.
 * Any manual changes may be overwritten and lost!
 */


// Generated from model_object_scala.erb

package com.trafigura.tradecapture.internal.refinedmetal





import com.trafigura.tradinghub.support._
import scala.collection.JavaConversions._



/**
 returned by the trade repository for Murdoch/Thunderhead to generate trade summary document
 */


 class SummaryDocumentParameters extends com.trafigura.tradinghub.support.ModelObject  {
  


  
    

var neptuneId:String = null
    
    
    

var contractRef:String = null
    
    
    

var purchase:scala.Option[Boolean] = None
    
    
    

var contractDate:org.joda.time.LocalDate = null
    
    
    

var groupCompany:String = null
    
    
    

var hub:String = null
    
    
    

var traderName:String = null
    
    
    

var trafficOperator:String = null
    
    
    

var counterpartyName:String = null
    
    
    

var metal:String = null
    
    
    

var totalQty:scala.Option[Double] = None
    
    
    

var uom:String = null
    
    
    

var grade:String = null
    
    
    

var shape:String = null
    
    
    

var gradeComments:String = null
    
    
    

var brand:String = null
    
    
    

var contractualLocation:String = null
    
    
    

var contractualTerms:String = null
    
    
    

var destinationLocation:String = null
    
    
    

var destinationTerms:String = null
    
    
    

var quotaCount:Int = 0
    
    
    

var premium:scala.Option[Double] = None
    
    
    

var premiumCcy:String = null
    
    
    

var premiumUom:String = null
    
    
    

var premiumComments:String = null
    
    
    

var market:String = null
    
    
    

var marketCode:String = null
    
    
    

var currency:String = null
    
    
    

var qpType:String = null
    
    
    

var pricingOffset:String = null
    
    
    

var paymentTerms:String = null
    
    
    

var securityTerms:String = null
    
    
    

var quotas:List[com.trafigura.tradecapture.internal.refinedmetal.SummaryDocumentQuotaParameters] = null
    
    
    

var sourceSystem:String = null
    
    
    

var auditModifiedByName:String = null
    
    
    

var titanId:String = null
    
    
    

var creditDays:Int = 0
    
    
    

var tradeId:Int = 0
    
    





  override def equals(o: Any) = o match {
    case r: AnyRef =>
        if (o.isInstanceOf[com.trafigura.tradecapture.internal.refinedmetal.SummaryDocumentParameters]) {
            val that = r.asInstanceOf[com.trafigura.tradecapture.internal.refinedmetal.SummaryDocumentParameters]
            that.canEqual(this) && this.auditModifiedByName == that.auditModifiedByName && this.brand == that.brand && this.contractDate == that.contractDate && this.contractRef == that.contractRef && this.contractualLocation == that.contractualLocation && this.contractualTerms == that.contractualTerms && this.counterpartyName == that.counterpartyName && this.creditDays == that.creditDays && this.currency == that.currency && this.destinationLocation == that.destinationLocation && this.destinationTerms == that.destinationTerms && this.grade == that.grade && this.gradeComments == that.gradeComments && this.groupCompany == that.groupCompany && this.hub == that.hub && this.market == that.market && this.marketCode == that.marketCode && this.metal == that.metal && this.neptuneId == that.neptuneId && this.paymentTerms == that.paymentTerms && this.premium == that.premium && this.premiumCcy == that.premiumCcy && this.premiumComments == that.premiumComments && this.premiumUom == that.premiumUom && this.pricingOffset == that.pricingOffset && this.purchase == that.purchase && this.qpType == that.qpType && this.quotaCount == that.quotaCount && this.quotas == that.quotas && this.securityTerms == that.securityTerms && this.shape == that.shape && this.sourceSystem == that.sourceSystem && this.titanId == that.titanId && this.totalQty == that.totalQty && this.tradeId == that.tradeId && this.traderName == that.traderName && this.trafficOperator == that.trafficOperator && this.uom == that.uom &&  true
        }
        else false
    case _ => false
  }

  override def canEqual(that : Any) = that.isInstanceOf[com.trafigura.tradecapture.internal.refinedmetal.SummaryDocumentParameters]

  override def hashCode = {
    (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 *  1
    ) +
         (if (auditModifiedByName == null) 0 else auditModifiedByName.hashCode) 
    ) +
         (if (brand == null) 0 else brand.hashCode) 
    ) +
         (if (contractDate == null) 0 else contractDate.hashCode) 
    ) +
         (if (contractRef == null) 0 else contractRef.hashCode) 
    ) +
         (if (contractualLocation == null) 0 else contractualLocation.hashCode) 
    ) +
         (if (contractualTerms == null) 0 else contractualTerms.hashCode) 
    ) +
         (if (counterpartyName == null) 0 else counterpartyName.hashCode) 
    ) +
         creditDays.hashCode
        
    ) +
         (if (currency == null) 0 else currency.hashCode) 
    ) +
         (if (destinationLocation == null) 0 else destinationLocation.hashCode) 
    ) +
         (if (destinationTerms == null) 0 else destinationTerms.hashCode) 
    ) +
         (if (grade == null) 0 else grade.hashCode) 
    ) +
         (if (gradeComments == null) 0 else gradeComments.hashCode) 
    ) +
         (if (groupCompany == null) 0 else groupCompany.hashCode) 
    ) +
         (if (hub == null) 0 else hub.hashCode) 
    ) +
         (if (market == null) 0 else market.hashCode) 
    ) +
         (if (marketCode == null) 0 else marketCode.hashCode) 
    ) +
         (if (metal == null) 0 else metal.hashCode) 
    ) +
         (if (neptuneId == null) 0 else neptuneId.hashCode) 
    ) +
         (if (paymentTerms == null) 0 else paymentTerms.hashCode) 
    ) +
         (if (premium == null) 0 else premium.hashCode) 
    ) +
         (if (premiumCcy == null) 0 else premiumCcy.hashCode) 
    ) +
         (if (premiumComments == null) 0 else premiumComments.hashCode) 
    ) +
         (if (premiumUom == null) 0 else premiumUom.hashCode) 
    ) +
         (if (pricingOffset == null) 0 else pricingOffset.hashCode) 
    ) +
         (if (purchase == null) 0 else purchase.hashCode) 
    ) +
         (if (qpType == null) 0 else qpType.hashCode) 
    ) +
         quotaCount.hashCode
        
    ) +
         (if (quotas == null) 0 else quotas.hashCode) 
    ) +
         (if (securityTerms == null) 0 else securityTerms.hashCode) 
    ) +
         (if (shape == null) 0 else shape.hashCode) 
    ) +
         (if (sourceSystem == null) 0 else sourceSystem.hashCode) 
    ) +
         (if (titanId == null) 0 else titanId.hashCode) 
    ) +
         (if (totalQty == null) 0 else totalQty.hashCode) 
    ) +
         tradeId.hashCode
        
    ) +
         (if (traderName == null) 0 else traderName.hashCode) 
    ) +
         (if (trafficOperator == null) 0 else trafficOperator.hashCode) 
    ) +
         (if (uom == null) 0 else uom.hashCode) 
    
  }

  override def toString = {
    "{com.trafigura.tradecapture.internal.refinedmetal.SummaryDocumentParameters: " + "" + "auditModifiedByName = " + auditModifiedByName + ", " + "brand = " + brand + ", " + "contractDate = " + contractDate + ", " + "contractRef = " + contractRef + ", " + "contractualLocation = " + contractualLocation + ", " + "contractualTerms = " + contractualTerms + ", " + "counterpartyName = " + counterpartyName + ", " + "creditDays = " + creditDays + ", " + "currency = " + currency + ", " + "destinationLocation = " + destinationLocation + ", " + "destinationTerms = " + destinationTerms + ", " + "grade = " + grade + ", " + "gradeComments = " + gradeComments + ", " + "groupCompany = " + groupCompany + ", " + "hub = " + hub + ", " + "market = " + market + ", " + "marketCode = " + marketCode + ", " + "metal = " + metal + ", " + "neptuneId = " + neptuneId + ", " + "paymentTerms = " + paymentTerms + ", " + "premium = " + premium + ", " + "premiumCcy = " + premiumCcy + ", " + "premiumComments = " + premiumComments + ", " + "premiumUom = " + premiumUom + ", " + "pricingOffset = " + pricingOffset + ", " + "purchase = " + purchase + ", " + "qpType = " + qpType + ", " + "quotaCount = " + quotaCount + ", " + "quotas = " + quotas + ", " + "securityTerms = " + securityTerms + ", " + "shape = " + shape + ", " + "sourceSystem = " + sourceSystem + ", " + "titanId = " + titanId + ", " + "totalQty = " + totalQty + ", " + "tradeId = " + tradeId + ", " + "traderName = " + traderName + ", " + "trafficOperator = " + trafficOperator + ", " + "uom = " + uom +  "}"
  }


  
         def toJson() : org.codehaus.jettison.json.JSONObject = {
      toJson(new SerialisationHelper)
    }

     def toJson(differentiator: SerialisationHelper) : org.codehaus.jettison.json.JSONObject = {
        var result = new org.codehaus.jettison.json.JSONObject();

        result.put("_node", differentiator.idFor(this))

        result.put("Type", "TradeCapture.Internal.RefinedMetal.SummaryDocumentParameters@1@1.0")
        
          
          
          
          
            result.putOpt("NeptuneId", this.neptuneId);
          
        
          
          
          
          
            result.putOpt("ContractRef", this.contractRef);
          
        
          
          
          
          if(this.purchase != None) {
            result.putOpt("Purchase", this.purchase.getOrElse(null));
          }
        
          
          
          
          
            result.putOpt("ContractDate", JSONConversions.optionalDateToJSON(this.contractDate));
          
        
          
          
          
          
            result.putOpt("GroupCompany", this.groupCompany);
          
        
          
          
          
          
            result.putOpt("Hub", this.hub);
          
        
          
          
          
          
            result.putOpt("TraderName", this.traderName);
          
        
          
          
          
          
            result.putOpt("TrafficOperator", this.trafficOperator);
          
        
          
          
          
          
            result.putOpt("CounterpartyName", this.counterpartyName);
          
        
          
          
          
          
            result.putOpt("Metal", this.metal);
          
        
          
          
          
          if(this.totalQty != None) {
            result.putOpt("TotalQty", this.totalQty.getOrElse(null));
          }
        
          
          
          
          
            result.putOpt("Uom", this.uom);
          
        
          
          
          
          
            result.putOpt("Grade", this.grade);
          
        
          
          
          
          
            result.putOpt("Shape", this.shape);
          
        
          
          
          
          
            result.putOpt("GradeComments", this.gradeComments);
          
        
          
          
          
          
            result.putOpt("Brand", this.brand);
          
        
          
          
          
          
            result.putOpt("ContractualLocation", this.contractualLocation);
          
        
          
          
          
          
            result.putOpt("ContractualTerms", this.contractualTerms);
          
        
          
          
          
          
            result.putOpt("DestinationLocation", this.destinationLocation);
          
        
          
          
          
          
            result.putOpt("DestinationTerms", this.destinationTerms);
          
        
          
          
          
          
            result.putOpt("QuotaCount", this.quotaCount);
          
        
          
          
          
          if(this.premium != None) {
            result.putOpt("Premium", this.premium.getOrElse(null));
          }
        
          
          
          
          
            result.putOpt("PremiumCcy", this.premiumCcy);
          
        
          
          
          
          
            result.putOpt("PremiumUom", this.premiumUom);
          
        
          
          
          
          
            result.putOpt("PremiumComments", this.premiumComments);
          
        
          
          
          
          
            result.putOpt("Market", this.market);
          
        
          
          
          
          
            result.putOpt("MarketCode", this.marketCode);
          
        
          
          
          
          
            result.putOpt("Currency", this.currency);
          
        
          
          
          
          
            result.putOpt("QpType", this.qpType);
          
        
          
          
          
          
            result.putOpt("PricingOffset", this.pricingOffset);
          
        
          
          
          
          
            result.putOpt("PaymentTerms", this.paymentTerms);
          
        
          
          
          
          
            result.putOpt("SecurityTerms", this.securityTerms);
          
        
          
          
          
          
            result.putOpt("Quotas", new org.codehaus.jettison.json.JSONArray(if(this.quotas == null) new java.util.ArrayList() else java.util.Arrays.asList(this.quotas.map(t => (t) match { case null => null; case o => o.toJson(differentiator) }).toArray: _*)));
          
        
          
          
          
          
            result.putOpt("SourceSystem", this.sourceSystem);
          
        
          
          
          
          
            result.putOpt("AuditModifiedByName", this.auditModifiedByName);
          
        
          
          
          
          
            result.putOpt("TitanId", this.titanId);
          
        
          
          
          
          
            result.putOpt("CreditDays", this.creditDays);
          
        
          
          
          
          
            result.putOpt("TradeId", this.tradeId);
          
        
        return result;
    }

     def loadJson(jobj : org.codehaus.jettison.json.JSONObject, cache: DeserialisationHelper) = {
        
        
          
              neptuneId = JSONConversions.optional[String](jobj.opt("NeptuneId"), null)
          
              contractRef = JSONConversions.optional[String](jobj.opt("ContractRef"), null)
          
              purchase = (jobj.opt("Purchase")) match { case null => None; case b:java.lang.Boolean => Some(b.booleanValue()); case _ => None }
          
              contractDate = JSONConversions.optionalDate(jobj.opt("ContractDate"))
          
              groupCompany = JSONConversions.optional[String](jobj.opt("GroupCompany"), null)
          
              hub = JSONConversions.optional[String](jobj.opt("Hub"), null)
          
              traderName = JSONConversions.optional[String](jobj.opt("TraderName"), null)
          
              trafficOperator = JSONConversions.optional[String](jobj.opt("TrafficOperator"), null)
          
              counterpartyName = JSONConversions.optional[String](jobj.opt("CounterpartyName"), null)
          
              metal = JSONConversions.optional[String](jobj.opt("Metal"), null)
          
              totalQty = (jobj.opt("TotalQty")) match {case null => None; case n:Number => Some(n.doubleValue()); case _ => None}
          
              uom = JSONConversions.optional[String](jobj.opt("Uom"), null)
          
              grade = JSONConversions.optional[String](jobj.opt("Grade"), null)
          
              shape = JSONConversions.optional[String](jobj.opt("Shape"), null)
          
              gradeComments = JSONConversions.optional[String](jobj.opt("GradeComments"), null)
          
              brand = JSONConversions.optional[String](jobj.opt("Brand"), null)
          
              contractualLocation = JSONConversions.optional[String](jobj.opt("ContractualLocation"), null)
          
              contractualTerms = JSONConversions.optional[String](jobj.opt("ContractualTerms"), null)
          
              destinationLocation = JSONConversions.optional[String](jobj.opt("DestinationLocation"), null)
          
              destinationTerms = JSONConversions.optional[String](jobj.opt("DestinationTerms"), null)
          
              quotaCount = JSONConversions.optional[Int](jobj.opt("QuotaCount"), 0)
          
              premium = (jobj.opt("Premium")) match {case null => None; case n:Number => Some(n.doubleValue()); case _ => None}
          
              premiumCcy = JSONConversions.optional[String](jobj.opt("PremiumCcy"), null)
          
              premiumUom = JSONConversions.optional[String](jobj.opt("PremiumUom"), null)
          
              premiumComments = JSONConversions.optional[String](jobj.opt("PremiumComments"), null)
          
              market = JSONConversions.optional[String](jobj.opt("Market"), null)
          
              marketCode = JSONConversions.optional[String](jobj.opt("MarketCode"), null)
          
              currency = JSONConversions.optional[String](jobj.opt("Currency"), null)
          
              qpType = JSONConversions.optional[String](jobj.opt("QpType"), null)
          
              pricingOffset = JSONConversions.optional[String](jobj.opt("PricingOffset"), null)
          
              paymentTerms = JSONConversions.optional[String](jobj.opt("PaymentTerms"), null)
          
              securityTerms = JSONConversions.optional[String](jobj.opt("SecurityTerms"), null)
          
              quotas = JSONConversions.optionalList(jobj.opt("Quotas"), x => (x) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.tradecapture.internal.refinedmetal.SummaryDocumentQuotaParameters.fromJson(o, cache))) })
          
              sourceSystem = JSONConversions.optional[String](jobj.opt("SourceSystem"), null)
          
              auditModifiedByName = JSONConversions.optional[String](jobj.opt("AuditModifiedByName"), null)
          
              titanId = JSONConversions.optional[String](jobj.opt("TitanId"), null)
          
              creditDays = JSONConversions.optional[Int](jobj.opt("CreditDays"), 0)
          
              tradeId = JSONConversions.optional[Int](jobj.opt("TradeId"), 0)
          
        
    }

  
}

object SummaryDocumentParameters {
  def version = ModelVersion("1")
  def wireFormatVersion = ModelVersion("1.0")

  
        val jsonTypeName = "TradeCapture.Internal.RefinedMetal.SummaryDocumentParameters"

    def fromJson(jobj : org.codehaus.jettison.json.JSONObject, cache: DeserialisationHelper = new DeserialisationHelper) : com.trafigura.tradecapture.internal.refinedmetal.SummaryDocumentParameters = {
      val v = TypeHolder(jobj.optString("Type"))

      v.assertModelVersion(version, "com.trafigura.tradecapture.internal.refinedmetal.SummaryDocumentParameters")
      v.assertWireFormatVersion(wireFormatVersion, "com.trafigura.tradecapture.internal.refinedmetal.SummaryDocumentParameters")

      
        
            val result = new com.trafigura.tradecapture.internal.refinedmetal.SummaryDocumentParameters()
            result.loadJson(jobj, cache)
            result
        
      
    }

  

  

  
    def apply(neptuneId: String = null, contractRef: String = null, purchase: scala.Option[Boolean] = None, contractDate: org.joda.time.LocalDate = null, groupCompany: String = null, hub: String = null, traderName: String = null, trafficOperator: String = null, counterpartyName: String = null, metal: String = null, totalQty: scala.Option[Double] = None, uom: String = null, grade: String = null, shape: String = null, gradeComments: String = null, brand: String = null, contractualLocation: String = null, contractualTerms: String = null, destinationLocation: String = null, destinationTerms: String = null, quotaCount: Int = 0, premium: scala.Option[Double] = None, premiumCcy: String = null, premiumUom: String = null, premiumComments: String = null, market: String = null, marketCode: String = null, currency: String = null, qpType: String = null, pricingOffset: String = null, paymentTerms: String = null, securityTerms: String = null, quotas: List[com.trafigura.tradecapture.internal.refinedmetal.SummaryDocumentQuotaParameters] = null, sourceSystem: String = null, auditModifiedByName: String = null, titanId: String = null, creditDays: Int = 0, tradeId: Int = 0) = {
      val res = new com.trafigura.tradecapture.internal.refinedmetal.SummaryDocumentParameters
      
        res.neptuneId = neptuneId
      
        res.contractRef = contractRef
      
        res.purchase = purchase
      
        res.contractDate = contractDate
      
        res.groupCompany = groupCompany
      
        res.hub = hub
      
        res.traderName = traderName
      
        res.trafficOperator = trafficOperator
      
        res.counterpartyName = counterpartyName
      
        res.metal = metal
      
        res.totalQty = totalQty
      
        res.uom = uom
      
        res.grade = grade
      
        res.shape = shape
      
        res.gradeComments = gradeComments
      
        res.brand = brand
      
        res.contractualLocation = contractualLocation
      
        res.contractualTerms = contractualTerms
      
        res.destinationLocation = destinationLocation
      
        res.destinationTerms = destinationTerms
      
        res.quotaCount = quotaCount
      
        res.premium = premium
      
        res.premiumCcy = premiumCcy
      
        res.premiumUom = premiumUom
      
        res.premiumComments = premiumComments
      
        res.market = market
      
        res.marketCode = marketCode
      
        res.currency = currency
      
        res.qpType = qpType
      
        res.pricingOffset = pricingOffset
      
        res.paymentTerms = paymentTerms
      
        res.securityTerms = securityTerms
      
        res.quotas = quotas
      
        res.sourceSystem = sourceSystem
      
        res.auditModifiedByName = auditModifiedByName
      
        res.titanId = titanId
      
        res.creditDays = creditDays
      
        res.tradeId = tradeId
      
      res
    }
  
}
