/**
 * WARNING: This file was automatically generated by the Trading Hub tooling version 2.15.
 * Any manual changes may be overwritten and lost!
 */


// Generated from model_object_scala.erb

package com.trafigura.tradecapture.internal.refinedmetaltradeservice





import com.trafigura.tradinghub.support._
import scala.collection.JavaConversions._




 class SyncResult extends com.trafigura.tradinghub.support.ModelObject  {
  


  
    

var success:Boolean = false
    
    
    

var message:String = null
    
    
    

var tradeId:String = null
    
    
    

var resultInfo:SyncResultResultInfoEnum = null
    
    





  override def equals(o: Any) = o match {
    case r: AnyRef =>
        if (o.isInstanceOf[com.trafigura.tradecapture.internal.refinedmetaltradeservice.SyncResult]) {
            val that = r.asInstanceOf[com.trafigura.tradecapture.internal.refinedmetaltradeservice.SyncResult]
            that.canEqual(this) && this.message == that.message && this.resultInfo == that.resultInfo && this.success == that.success && this.tradeId == that.tradeId &&  true
        }
        else false
    case _ => false
  }

  override def canEqual(that : Any) = that.isInstanceOf[com.trafigura.tradecapture.internal.refinedmetaltradeservice.SyncResult]

  override def hashCode = {
    (41 * (41 * (41 * (41 *  1
    ) +
         (if (message == null) 0 else message.hashCode) 
    ) +
         (if (resultInfo == null) 0 else resultInfo.hashCode) 
    ) +
         success.hashCode
        
    ) +
         (if (tradeId == null) 0 else tradeId.hashCode) 
    
  }

  override def toString = {
    "{com.trafigura.tradecapture.internal.refinedmetaltradeservice.SyncResult: " + "" + "message = " + message + ", " + "resultInfo = " + resultInfo + ", " + "success = " + success + ", " + "tradeId = " + tradeId +  "}"
  }


  
         def toJson() : org.codehaus.jettison.json.JSONObject = {
      toJson(new SerialisationHelper)
    }

     def toJson(differentiator: SerialisationHelper) : org.codehaus.jettison.json.JSONObject = {
        var result = new org.codehaus.jettison.json.JSONObject();

        result.put("_node", differentiator.idFor(this))

        result.put("Type", "TradeCapture.Internal.RefinedMetalTradeService.SyncResult@1@1.0")
        
          
          
          
          
            result.putOpt("Success", this.success);
          
        
          
          
          
          
            result.putOpt("Message", this.message);
          
        
          
          
          
          
            result.putOpt("TradeId", this.tradeId);
          
        
          
          
          
          
            result.putOpt("ResultInfo", (this.resultInfo) match { case null => null; case o => o.toJson });
          
        
        return result;
    }

     def loadJson(jobj : org.codehaus.jettison.json.JSONObject, cache: DeserialisationHelper) = {
        
        
          
              success = JSONConversions.optional[Boolean](jobj.opt("Success"), false)
          
              message = JSONConversions.optional[String](jobj.opt("Message"), null)
          
              tradeId = JSONConversions.optional[String](jobj.opt("TradeId"), null)
          
              resultInfo = (jobj.optString("ResultInfo")) match { case null => null; case s: String => SyncResultResultInfoEnum.forName(s) }
          
        
    }

  
}

object SyncResult {
  def version = ModelVersion("1")
  def wireFormatVersion = ModelVersion("1.0")

  
        val jsonTypeName = "TradeCapture.Internal.RefinedMetalTradeService.SyncResult"

    def fromJson(jobj : org.codehaus.jettison.json.JSONObject, cache: DeserialisationHelper = new DeserialisationHelper) : com.trafigura.tradecapture.internal.refinedmetaltradeservice.SyncResult = {
      val v = TypeHolder(jobj.optString("Type"))

      v.assertModelVersion(version, "com.trafigura.tradecapture.internal.refinedmetaltradeservice.SyncResult")
      v.assertWireFormatVersion(wireFormatVersion, "com.trafigura.tradecapture.internal.refinedmetaltradeservice.SyncResult")

      
        
            val result = new com.trafigura.tradecapture.internal.refinedmetaltradeservice.SyncResult()
            result.loadJson(jobj, cache)
            result
        
      
    }

  

  

  
    def apply(success: Boolean = false, message: String = null, tradeId: String = null, resultInfo: SyncResultResultInfoEnum = null) = {
      val res = new com.trafigura.tradecapture.internal.refinedmetaltradeservice.SyncResult
      
        res.success = success
      
        res.message = message
      
        res.tradeId = tradeId
      
        res.resultInfo = resultInfo
      
      res
    }
  
}
