/**
 * WARNING: This file was automatically generated by the Trading Hub tooling version 2.15.
 * Any manual changes may be overwritten and lost!
 */


// Generated from model_object_scala.erb

package com.trafigura.tradecapture.internal.refinedmetal





import com.trafigura.tradinghub.support._
import scala.collection.JavaConversions._



/**
 as displayed in the trade blotter grid
 */


 class TradeBlotterRow extends com.trafigura.tradinghub.support.ModelObject  {
  


  
    

var tradeOID:Int = 0
    
    
    

var neptuneId:String = null
    
    
    

var completeNeptuneId:String = null
    
    
    

var nonKYCCounterparty:Boolean = false
    
    
    

var counterpartyId:scala.Option[Int] = None
    
    
    

var counterpartyName:String = null
    
    
    

var counterpartyCode:String = null
    
    
    

var counterpartyAddress:String = null
    
    
    

var counterpartyPostcode:String = null
    
    
    

var counterpartyPhoneNumber:String = null
    
    
    

var counterpartyFaxNumber:String = null
    
    
    

var counterpartyContactName:String = null
    
    
    

var counterpartyAccountNumber:String = null
    
    
    

var traderName:String = null
    
    
    

var trafficOperator:String = null
    
    
    

var direction:scala.Option[Boolean] = None
    
    
    

var contractDate:org.joda.time.LocalDate = null
    
    
    

var submittedBy:String = null
    
    
    

var quotas:Int = 0
    
    
    

var comments:String = null
    
    
    

var groupCompany:String = null
    
    
    

var groupCompanyId:scala.Option[Int] = None
    
    
    

var groupCompanyCode:String = null
    
    
    

var metalId:scala.Option[Int] = None
    
    
    

var metal:String = null
    
    
    

var totalQty:scala.Option[Double] = None
    
    
    

var tolerance:Double = 0.0
    
    
    

var state:TradeBlotterRowStateEnum = null
    
    
    

var trafficHubId:scala.Option[Int] = None
    
    
    

var trafficHubCode:String = null
    
    
    

var trafficHub:String = null
    
    
    

var metalContractSuffix:String = null
    
    
    

var sourceSystem:String = null
    
    
    

var auditModifiedByName:String = null
    
    
    

var titanId:String = null
    
    
    

var userVEAmendment:Boolean = false
    
    
    

var userCNAmendment:Boolean = false
    
    
    

var businessId:String = null
    
    





  override def equals(o: Any) = o match {
    case r: AnyRef =>
        if (o.isInstanceOf[com.trafigura.tradecapture.internal.refinedmetal.TradeBlotterRow]) {
            val that = r.asInstanceOf[com.trafigura.tradecapture.internal.refinedmetal.TradeBlotterRow]
            that.canEqual(this) && this.auditModifiedByName == that.auditModifiedByName && this.businessId == that.businessId && this.comments == that.comments && this.completeNeptuneId == that.completeNeptuneId && this.contractDate == that.contractDate && this.counterpartyAccountNumber == that.counterpartyAccountNumber && this.counterpartyAddress == that.counterpartyAddress && this.counterpartyCode == that.counterpartyCode && this.counterpartyContactName == that.counterpartyContactName && this.counterpartyFaxNumber == that.counterpartyFaxNumber && this.counterpartyId == that.counterpartyId && this.counterpartyName == that.counterpartyName && this.counterpartyPhoneNumber == that.counterpartyPhoneNumber && this.counterpartyPostcode == that.counterpartyPostcode && this.direction == that.direction && this.groupCompany == that.groupCompany && this.groupCompanyCode == that.groupCompanyCode && this.groupCompanyId == that.groupCompanyId && this.metal == that.metal && this.metalContractSuffix == that.metalContractSuffix && this.metalId == that.metalId && this.neptuneId == that.neptuneId && this.nonKYCCounterparty == that.nonKYCCounterparty && this.quotas == that.quotas && this.sourceSystem == that.sourceSystem && this.state == that.state && this.submittedBy == that.submittedBy && this.titanId == that.titanId && this.tolerance == that.tolerance && this.totalQty == that.totalQty && this.tradeOID == that.tradeOID && this.traderName == that.traderName && this.trafficHub == that.trafficHub && this.trafficHubCode == that.trafficHubCode && this.trafficHubId == that.trafficHubId && this.trafficOperator == that.trafficOperator && this.userCNAmendment == that.userCNAmendment && this.userVEAmendment == that.userVEAmendment &&  true
        }
        else false
    case _ => false
  }

  override def canEqual(that : Any) = that.isInstanceOf[com.trafigura.tradecapture.internal.refinedmetal.TradeBlotterRow]

  override def hashCode = {
    (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 *  1
    ) +
         (if (auditModifiedByName == null) 0 else auditModifiedByName.hashCode) 
    ) +
         (if (businessId == null) 0 else businessId.hashCode) 
    ) +
         (if (comments == null) 0 else comments.hashCode) 
    ) +
         (if (completeNeptuneId == null) 0 else completeNeptuneId.hashCode) 
    ) +
         (if (contractDate == null) 0 else contractDate.hashCode) 
    ) +
         (if (counterpartyAccountNumber == null) 0 else counterpartyAccountNumber.hashCode) 
    ) +
         (if (counterpartyAddress == null) 0 else counterpartyAddress.hashCode) 
    ) +
         (if (counterpartyCode == null) 0 else counterpartyCode.hashCode) 
    ) +
         (if (counterpartyContactName == null) 0 else counterpartyContactName.hashCode) 
    ) +
         (if (counterpartyFaxNumber == null) 0 else counterpartyFaxNumber.hashCode) 
    ) +
         (if (counterpartyId == null) 0 else counterpartyId.hashCode) 
    ) +
         (if (counterpartyName == null) 0 else counterpartyName.hashCode) 
    ) +
         (if (counterpartyPhoneNumber == null) 0 else counterpartyPhoneNumber.hashCode) 
    ) +
         (if (counterpartyPostcode == null) 0 else counterpartyPostcode.hashCode) 
    ) +
         (if (direction == null) 0 else direction.hashCode) 
    ) +
         (if (groupCompany == null) 0 else groupCompany.hashCode) 
    ) +
         (if (groupCompanyCode == null) 0 else groupCompanyCode.hashCode) 
    ) +
         (if (groupCompanyId == null) 0 else groupCompanyId.hashCode) 
    ) +
         (if (metal == null) 0 else metal.hashCode) 
    ) +
         (if (metalContractSuffix == null) 0 else metalContractSuffix.hashCode) 
    ) +
         (if (metalId == null) 0 else metalId.hashCode) 
    ) +
         (if (neptuneId == null) 0 else neptuneId.hashCode) 
    ) +
         nonKYCCounterparty.hashCode
        
    ) +
         quotas.hashCode
        
    ) +
         (if (sourceSystem == null) 0 else sourceSystem.hashCode) 
    ) +
         (if (state == null) 0 else state.hashCode) 
    ) +
         (if (submittedBy == null) 0 else submittedBy.hashCode) 
    ) +
         (if (titanId == null) 0 else titanId.hashCode) 
    ) +
         tolerance.hashCode
        
    ) +
         (if (totalQty == null) 0 else totalQty.hashCode) 
    ) +
         tradeOID.hashCode
        
    ) +
         (if (traderName == null) 0 else traderName.hashCode) 
    ) +
         (if (trafficHub == null) 0 else trafficHub.hashCode) 
    ) +
         (if (trafficHubCode == null) 0 else trafficHubCode.hashCode) 
    ) +
         (if (trafficHubId == null) 0 else trafficHubId.hashCode) 
    ) +
         (if (trafficOperator == null) 0 else trafficOperator.hashCode) 
    ) +
         userCNAmendment.hashCode
        
    ) +
         userVEAmendment.hashCode
        
    
  }

  override def toString = {
    "{com.trafigura.tradecapture.internal.refinedmetal.TradeBlotterRow: " + "" + "auditModifiedByName = " + auditModifiedByName + ", " + "businessId = " + businessId + ", " + "comments = " + comments + ", " + "completeNeptuneId = " + completeNeptuneId + ", " + "contractDate = " + contractDate + ", " + "counterpartyAccountNumber = " + counterpartyAccountNumber + ", " + "counterpartyAddress = " + counterpartyAddress + ", " + "counterpartyCode = " + counterpartyCode + ", " + "counterpartyContactName = " + counterpartyContactName + ", " + "counterpartyFaxNumber = " + counterpartyFaxNumber + ", " + "counterpartyId = " + counterpartyId + ", " + "counterpartyName = " + counterpartyName + ", " + "counterpartyPhoneNumber = " + counterpartyPhoneNumber + ", " + "counterpartyPostcode = " + counterpartyPostcode + ", " + "direction = " + direction + ", " + "groupCompany = " + groupCompany + ", " + "groupCompanyCode = " + groupCompanyCode + ", " + "groupCompanyId = " + groupCompanyId + ", " + "metal = " + metal + ", " + "metalContractSuffix = " + metalContractSuffix + ", " + "metalId = " + metalId + ", " + "neptuneId = " + neptuneId + ", " + "nonKYCCounterparty = " + nonKYCCounterparty + ", " + "quotas = " + quotas + ", " + "sourceSystem = " + sourceSystem + ", " + "state = " + state + ", " + "submittedBy = " + submittedBy + ", " + "titanId = " + titanId + ", " + "tolerance = " + tolerance + ", " + "totalQty = " + totalQty + ", " + "tradeOID = " + tradeOID + ", " + "traderName = " + traderName + ", " + "trafficHub = " + trafficHub + ", " + "trafficHubCode = " + trafficHubCode + ", " + "trafficHubId = " + trafficHubId + ", " + "trafficOperator = " + trafficOperator + ", " + "userCNAmendment = " + userCNAmendment + ", " + "userVEAmendment = " + userVEAmendment +  "}"
  }


  
         def toJson() : org.codehaus.jettison.json.JSONObject = {
      toJson(new SerialisationHelper)
    }

     def toJson(differentiator: SerialisationHelper) : org.codehaus.jettison.json.JSONObject = {
        var result = new org.codehaus.jettison.json.JSONObject();

        result.put("_node", differentiator.idFor(this))

        result.put("Type", "TradeCapture.Internal.RefinedMetal.TradeBlotterRow@1@1.0")
        
          
          
          
          
            result.putOpt("TradeOID", this.tradeOID);
          
        
          
          
          
          
            result.putOpt("NeptuneId", this.neptuneId);
          
        
          
          
          
          
            result.putOpt("CompleteNeptuneId", this.completeNeptuneId);
          
        
          
          
          
          
            result.putOpt("NonKYCCounterparty", this.nonKYCCounterparty);
          
        
          
          
          
          
            result.putOpt("CounterpartyId", this.counterpartyId.getOrElse(null));
          
        
          
          
          
          
            result.putOpt("CounterpartyName", this.counterpartyName);
          
        
          
          
          
          
            result.putOpt("CounterpartyCode", this.counterpartyCode);
          
        
          
          
          
          
            result.putOpt("CounterpartyAddress", this.counterpartyAddress);
          
        
          
          
          
          
            result.putOpt("CounterpartyPostcode", this.counterpartyPostcode);
          
        
          
          
          
          
            result.putOpt("CounterpartyPhoneNumber", this.counterpartyPhoneNumber);
          
        
          
          
          
          
            result.putOpt("CounterpartyFaxNumber", this.counterpartyFaxNumber);
          
        
          
          
          
          
            result.putOpt("CounterpartyContactName", this.counterpartyContactName);
          
        
          
          
          
          
            result.putOpt("CounterpartyAccountNumber", this.counterpartyAccountNumber);
          
        
          
          
          
          
            result.putOpt("TraderName", this.traderName);
          
        
          
          
          
          
            result.putOpt("TrafficOperator", this.trafficOperator);
          
        
          
          
          
          if(this.direction != None) {
            result.putOpt("Direction", this.direction.getOrElse(null));
          }
        
          
          
          
          
            result.putOpt("ContractDate", JSONConversions.optionalDateToJSON(this.contractDate));
          
        
          
          
          
          
            result.putOpt("SubmittedBy", this.submittedBy);
          
        
          
          
          
          
            result.putOpt("Quotas", this.quotas);
          
        
          
          
          
          
            result.putOpt("Comments", this.comments);
          
        
          
          
          
          
            result.putOpt("GroupCompany", this.groupCompany);
          
        
          
          
          
          
            result.putOpt("GroupCompanyId", this.groupCompanyId.getOrElse(null));
          
        
          
          
          
          
            result.putOpt("GroupCompanyCode", this.groupCompanyCode);
          
        
          
          
          
          
            result.putOpt("MetalId", this.metalId.getOrElse(null));
          
        
          
          
          
          
            result.putOpt("Metal", this.metal);
          
        
          
          
          
          if(this.totalQty != None) {
            result.putOpt("TotalQty", this.totalQty.getOrElse(null));
          }
        
          
          
          
          
            result.putOpt("Tolerance", this.tolerance);
          
        
          
          
          
          
            result.putOpt("State", (this.state) match { case null => null; case o => o.toJson });
          
        
          
          
          
          
            result.putOpt("TrafficHubId", this.trafficHubId.getOrElse(null));
          
        
          
          
          
          
            result.putOpt("TrafficHubCode", this.trafficHubCode);
          
        
          
          
          
          
            result.putOpt("TrafficHub", this.trafficHub);
          
        
          
          
          
          
            result.putOpt("MetalContractSuffix", this.metalContractSuffix);
          
        
          
          
          
          
            result.putOpt("SourceSystem", this.sourceSystem);
          
        
          
          
          
          
            result.putOpt("AuditModifiedByName", this.auditModifiedByName);
          
        
          
          
          
          
            result.putOpt("TitanId", this.titanId);
          
        
          
          
          
          
            result.putOpt("UserVEAmendment", this.userVEAmendment);
          
        
          
          
          
          
            result.putOpt("UserCNAmendment", this.userCNAmendment);
          
        
          
          
          
          
            result.putOpt("BusinessId", this.businessId);
          
        
        return result;
    }

     def loadJson(jobj : org.codehaus.jettison.json.JSONObject, cache: DeserialisationHelper) = {
        
        
          
              tradeOID = JSONConversions.optional[Int](jobj.opt("TradeOID"), 0)
          
              neptuneId = JSONConversions.optional[String](jobj.opt("NeptuneId"), null)
          
              completeNeptuneId = JSONConversions.optional[String](jobj.opt("CompleteNeptuneId"), null)
          
              nonKYCCounterparty = JSONConversions.optional[Boolean](jobj.opt("NonKYCCounterparty"), false)
          
              counterpartyId = (jobj.opt("CounterpartyId")) match {case null => None; case n:Number => Some(n.intValue()); case _ => None}
          
              counterpartyName = JSONConversions.optional[String](jobj.opt("CounterpartyName"), null)
          
              counterpartyCode = JSONConversions.optional[String](jobj.opt("CounterpartyCode"), null)
          
              counterpartyAddress = JSONConversions.optional[String](jobj.opt("CounterpartyAddress"), null)
          
              counterpartyPostcode = JSONConversions.optional[String](jobj.opt("CounterpartyPostcode"), null)
          
              counterpartyPhoneNumber = JSONConversions.optional[String](jobj.opt("CounterpartyPhoneNumber"), null)
          
              counterpartyFaxNumber = JSONConversions.optional[String](jobj.opt("CounterpartyFaxNumber"), null)
          
              counterpartyContactName = JSONConversions.optional[String](jobj.opt("CounterpartyContactName"), null)
          
              counterpartyAccountNumber = JSONConversions.optional[String](jobj.opt("CounterpartyAccountNumber"), null)
          
              traderName = JSONConversions.optional[String](jobj.opt("TraderName"), null)
          
              trafficOperator = JSONConversions.optional[String](jobj.opt("TrafficOperator"), null)
          
              direction = (jobj.opt("Direction")) match { case null => None; case b:java.lang.Boolean => Some(b.booleanValue()); case _ => None }
          
              contractDate = JSONConversions.optionalDate(jobj.opt("ContractDate"))
          
              submittedBy = JSONConversions.optional[String](jobj.opt("SubmittedBy"), null)
          
              quotas = JSONConversions.optional[Int](jobj.opt("Quotas"), 0)
          
              comments = JSONConversions.optional[String](jobj.opt("Comments"), null)
          
              groupCompany = JSONConversions.optional[String](jobj.opt("GroupCompany"), null)
          
              groupCompanyId = (jobj.opt("GroupCompanyId")) match {case null => None; case n:Number => Some(n.intValue()); case _ => None}
          
              groupCompanyCode = JSONConversions.optional[String](jobj.opt("GroupCompanyCode"), null)
          
              metalId = (jobj.opt("MetalId")) match {case null => None; case n:Number => Some(n.intValue()); case _ => None}
          
              metal = JSONConversions.optional[String](jobj.opt("Metal"), null)
          
              totalQty = (jobj.opt("TotalQty")) match {case null => None; case n:Number => Some(n.doubleValue()); case _ => None}
          
              tolerance = JSONConversions.optionalReal(jobj.opt("Tolerance"))
          
              state = (jobj.optString("State")) match { case null => null; case s: String => TradeBlotterRowStateEnum.forName(s) }
          
              trafficHubId = (jobj.opt("TrafficHubId")) match {case null => None; case n:Number => Some(n.intValue()); case _ => None}
          
              trafficHubCode = JSONConversions.optional[String](jobj.opt("TrafficHubCode"), null)
          
              trafficHub = JSONConversions.optional[String](jobj.opt("TrafficHub"), null)
          
              metalContractSuffix = JSONConversions.optional[String](jobj.opt("MetalContractSuffix"), null)
          
              sourceSystem = JSONConversions.optional[String](jobj.opt("SourceSystem"), null)
          
              auditModifiedByName = JSONConversions.optional[String](jobj.opt("AuditModifiedByName"), null)
          
              titanId = JSONConversions.optional[String](jobj.opt("TitanId"), null)
          
              userVEAmendment = JSONConversions.optional[Boolean](jobj.opt("UserVEAmendment"), false)
          
              userCNAmendment = JSONConversions.optional[Boolean](jobj.opt("UserCNAmendment"), false)
          
              businessId = JSONConversions.optional[String](jobj.opt("BusinessId"), null)
          
        
    }

  
}

object TradeBlotterRow {
  def version = ModelVersion("1")
  def wireFormatVersion = ModelVersion("1.0")

  
        val jsonTypeName = "TradeCapture.Internal.RefinedMetal.TradeBlotterRow"

    def fromJson(jobj : org.codehaus.jettison.json.JSONObject, cache: DeserialisationHelper = new DeserialisationHelper) : com.trafigura.tradecapture.internal.refinedmetal.TradeBlotterRow = {
      val v = TypeHolder(jobj.optString("Type"))

      v.assertModelVersion(version, "com.trafigura.tradecapture.internal.refinedmetal.TradeBlotterRow")
      v.assertWireFormatVersion(wireFormatVersion, "com.trafigura.tradecapture.internal.refinedmetal.TradeBlotterRow")

      
        
            val result = new com.trafigura.tradecapture.internal.refinedmetal.TradeBlotterRow()
            result.loadJson(jobj, cache)
            result
        
      
    }

  

  
  val FilterByWhoMyTrades = 1
  
  val FilterByWhoAllTrades = 2
  
  val FilterByDateToday = 1
  
  val FilterByDateLastWeek = 2
  
  val FilterByDateLastMonth = 3
  
  val FilterByDateLast3Months = 4
  
  val FilterByDateLastYear = 5
  
  val FilterByDateAll = 6
  

  
    def apply(tradeOID: Int = 0, neptuneId: String = null, completeNeptuneId: String = null, nonKYCCounterparty: Boolean = false, counterpartyId: scala.Option[Int] = None, counterpartyName: String = null, counterpartyCode: String = null, counterpartyAddress: String = null, counterpartyPostcode: String = null, counterpartyPhoneNumber: String = null, counterpartyFaxNumber: String = null, counterpartyContactName: String = null, counterpartyAccountNumber: String = null, traderName: String = null, trafficOperator: String = null, direction: scala.Option[Boolean] = None, contractDate: org.joda.time.LocalDate = null, submittedBy: String = null, quotas: Int = 0, comments: String = null, groupCompany: String = null, groupCompanyId: scala.Option[Int] = None, groupCompanyCode: String = null, metalId: scala.Option[Int] = None, metal: String = null, totalQty: scala.Option[Double] = None, tolerance: Double = 0.0, state: TradeBlotterRowStateEnum = null, trafficHubId: scala.Option[Int] = None, trafficHubCode: String = null, trafficHub: String = null, metalContractSuffix: String = null, sourceSystem: String = null, auditModifiedByName: String = null, titanId: String = null, userVEAmendment: Boolean = false, userCNAmendment: Boolean = false, businessId: String = null) = {
      val res = new com.trafigura.tradecapture.internal.refinedmetal.TradeBlotterRow
      
        res.tradeOID = tradeOID
      
        res.neptuneId = neptuneId
      
        res.completeNeptuneId = completeNeptuneId
      
        res.nonKYCCounterparty = nonKYCCounterparty
      
        res.counterpartyId = counterpartyId
      
        res.counterpartyName = counterpartyName
      
        res.counterpartyCode = counterpartyCode
      
        res.counterpartyAddress = counterpartyAddress
      
        res.counterpartyPostcode = counterpartyPostcode
      
        res.counterpartyPhoneNumber = counterpartyPhoneNumber
      
        res.counterpartyFaxNumber = counterpartyFaxNumber
      
        res.counterpartyContactName = counterpartyContactName
      
        res.counterpartyAccountNumber = counterpartyAccountNumber
      
        res.traderName = traderName
      
        res.trafficOperator = trafficOperator
      
        res.direction = direction
      
        res.contractDate = contractDate
      
        res.submittedBy = submittedBy
      
        res.quotas = quotas
      
        res.comments = comments
      
        res.groupCompany = groupCompany
      
        res.groupCompanyId = groupCompanyId
      
        res.groupCompanyCode = groupCompanyCode
      
        res.metalId = metalId
      
        res.metal = metal
      
        res.totalQty = totalQty
      
        res.tolerance = tolerance
      
        res.state = state
      
        res.trafficHubId = trafficHubId
      
        res.trafficHubCode = trafficHubCode
      
        res.trafficHub = trafficHub
      
        res.metalContractSuffix = metalContractSuffix
      
        res.sourceSystem = sourceSystem
      
        res.auditModifiedByName = auditModifiedByName
      
        res.titanId = titanId
      
        res.userVEAmendment = userVEAmendment
      
        res.userCNAmendment = userCNAmendment
      
        res.businessId = businessId
      
      res
    }
  
}
