/**
 * WARNING: This file was automatically generated by the Trading Hub tooling version 2.15.
 * Any manual changes may be overwritten and lost!
 */


// Generated from model_object_scala.erb

package com.trafigura.tradecapture.internal.refinedmetal





import com.trafigura.tradinghub.support._
import scala.collection.JavaConversions._



/**
 container for contract document parameters or a missing translations list 
 */


 class CDocParsResp extends com.trafigura.tradinghub.support.ModelObject  {
  


  
    

var cdocResult:Boolean = false
    
    
    

var cDocParameters:com.trafigura.tradecapture.internal.refinedmetal.ContractDocumentParameters = null
    
    
    

var reqTranslations:List[com.trafigura.tradecapture.internal.refinedmetal.RichTranslation] = null
    
    





  override def equals(o: Any) = o match {
    case r: AnyRef =>
        if (o.isInstanceOf[com.trafigura.tradecapture.internal.refinedmetal.CDocParsResp]) {
            val that = r.asInstanceOf[com.trafigura.tradecapture.internal.refinedmetal.CDocParsResp]
            that.canEqual(this) && this.cDocParameters == that.cDocParameters && this.cdocResult == that.cdocResult && this.reqTranslations == that.reqTranslations &&  true
        }
        else false
    case _ => false
  }

  override def canEqual(that : Any) = that.isInstanceOf[com.trafigura.tradecapture.internal.refinedmetal.CDocParsResp]

  override def hashCode = {
    (41 * (41 * (41 *  1
    ) +
         (if (cDocParameters == null) 0 else cDocParameters.hashCode) 
    ) +
         cdocResult.hashCode
        
    ) +
         (if (reqTranslations == null) 0 else reqTranslations.hashCode) 
    
  }

  override def toString = {
    "{com.trafigura.tradecapture.internal.refinedmetal.CDocParsResp: " + "" + "cDocParameters = " + cDocParameters + ", " + "cdocResult = " + cdocResult + ", " + "reqTranslations = " + reqTranslations +  "}"
  }


  
         def toJson() : org.codehaus.jettison.json.JSONObject = {
      toJson(new SerialisationHelper)
    }

     def toJson(differentiator: SerialisationHelper) : org.codehaus.jettison.json.JSONObject = {
        var result = new org.codehaus.jettison.json.JSONObject();

        result.put("_node", differentiator.idFor(this))

        result.put("Type", "TradeCapture.Internal.RefinedMetal.CDocParsResp@1@1.0")
        
          
          
          
          
            result.putOpt("CdocResult", this.cdocResult);
          
        
          
          
          
          
            result.putOpt("CDocParameters", (this.cDocParameters) match { case null => null; case o => o.toJson(differentiator) });
          
        
          
          
          
          
            result.putOpt("ReqTranslations", new org.codehaus.jettison.json.JSONArray(if(this.reqTranslations == null) new java.util.ArrayList() else java.util.Arrays.asList(this.reqTranslations.map(t => (t) match { case null => null; case o => o.toJson(differentiator) }).toArray: _*)));
          
        
        return result;
    }

     def loadJson(jobj : org.codehaus.jettison.json.JSONObject, cache: DeserialisationHelper) = {
        
        
          
              cdocResult = JSONConversions.optional[Boolean](jobj.opt("CdocResult"), false)
          
              cDocParameters = (jobj.opt("CDocParameters")) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.tradecapture.internal.refinedmetal.ContractDocumentParameters.fromJson(o, cache))) }
          
              reqTranslations = JSONConversions.optionalList(jobj.opt("ReqTranslations"), x => (x) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.tradecapture.internal.refinedmetal.RichTranslation.fromJson(o, cache))) })
          
        
    }

  
}

object CDocParsResp {
  def version = ModelVersion("1")
  def wireFormatVersion = ModelVersion("1.0")

  
        val jsonTypeName = "TradeCapture.Internal.RefinedMetal.CDocParsResp"

    def fromJson(jobj : org.codehaus.jettison.json.JSONObject, cache: DeserialisationHelper = new DeserialisationHelper) : com.trafigura.tradecapture.internal.refinedmetal.CDocParsResp = {
      val v = TypeHolder(jobj.optString("Type"))

      v.assertModelVersion(version, "com.trafigura.tradecapture.internal.refinedmetal.CDocParsResp")
      v.assertWireFormatVersion(wireFormatVersion, "com.trafigura.tradecapture.internal.refinedmetal.CDocParsResp")

      
        
            val result = new com.trafigura.tradecapture.internal.refinedmetal.CDocParsResp()
            result.loadJson(jobj, cache)
            result
        
      
    }

  

  

  
    def apply(cdocResult: Boolean = false, cDocParameters: com.trafigura.tradecapture.internal.refinedmetal.ContractDocumentParameters = null, reqTranslations: List[com.trafigura.tradecapture.internal.refinedmetal.RichTranslation] = null) = {
      val res = new com.trafigura.tradecapture.internal.refinedmetal.CDocParsResp
      
        res.cdocResult = cdocResult
      
        res.cDocParameters = cDocParameters
      
        res.reqTranslations = reqTranslations
      
      res
    }
  
}
