/**
 * WARNING: This file was automatically generated by the Trading Hub tooling version 2.15.
 * Any manual changes may be overwritten and lost!
 */


// Generated from model_object_scala.erb

package com.trafigura.tradecapture.internal.refinedmetal





import com.trafigura.tradinghub.support._
import scala.collection.JavaConversions._




 class DocumentFxHedgeRequestParams extends com.trafigura.tradecapture.internal.refinedmetal.DocumentHedgeRequestParams  {
  


  
    

var fxRate:Double = 0.0
    
    
    

var fxCurrency:String = null
    
    
    

var fxUom:String = null
    
    





  override def equals(o: Any) = o match {
    case r: AnyRef =>
        if (o.isInstanceOf[com.trafigura.tradecapture.internal.refinedmetal.DocumentFxHedgeRequestParams]) {
            val that = r.asInstanceOf[com.trafigura.tradecapture.internal.refinedmetal.DocumentFxHedgeRequestParams]
            that.canEqual(this) && this.contractMonthName == that.contractMonthName && this.currency == that.currency && this.currencyId == that.currencyId && this.currencyUom == that.currencyUom && this.currencyUomId == that.currencyUomId && this.direction == that.direction && this.fxCurrency == that.fxCurrency && this.fxRate == that.fxRate && this.fxUom == that.fxUom && this.hrNumber == that.hrNumber && this.lots == that.lots && this.market == that.market && this.marketId == that.marketId && this.ordinal == that.ordinal && this.price == that.price &&  true
        }
        else false
    case _ => false
  }

  override def canEqual(that : Any) = that.isInstanceOf[com.trafigura.tradecapture.internal.refinedmetal.DocumentFxHedgeRequestParams]

  override def hashCode = {
    (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 *  1
    ) +
         (if (contractMonthName == null) 0 else contractMonthName.hashCode) 
    ) +
         (if (currency == null) 0 else currency.hashCode) 
    ) +
         currencyId.hashCode
        
    ) +
         (if (currencyUom == null) 0 else currencyUom.hashCode) 
    ) +
         currencyUomId.hashCode
        
    ) +
         (if (direction == null) 0 else direction.hashCode) 
    ) +
         (if (fxCurrency == null) 0 else fxCurrency.hashCode) 
    ) +
         fxRate.hashCode
        
    ) +
         (if (fxUom == null) 0 else fxUom.hashCode) 
    ) +
         (if (hrNumber == null) 0 else hrNumber.hashCode) 
    ) +
         lots.hashCode
        
    ) +
         (if (market == null) 0 else market.hashCode) 
    ) +
         marketId.hashCode
        
    ) +
         ordinal.hashCode
        
    ) +
         price.hashCode
        
    
  }

  override def toString = {
    "{com.trafigura.tradecapture.internal.refinedmetal.DocumentFxHedgeRequestParams: " + "" + "contractMonthName = " + contractMonthName + ", " + "currency = " + currency + ", " + "currencyId = " + currencyId + ", " + "currencyUom = " + currencyUom + ", " + "currencyUomId = " + currencyUomId + ", " + "direction = " + direction + ", " + "fxCurrency = " + fxCurrency + ", " + "fxRate = " + fxRate + ", " + "fxUom = " + fxUom + ", " + "hrNumber = " + hrNumber + ", " + "lots = " + lots + ", " + "market = " + market + ", " + "marketId = " + marketId + ", " + "ordinal = " + ordinal + ", " + "price = " + price +  "}"
  }


  
        override def toJson() : org.codehaus.jettison.json.JSONObject = {
      toJson(new SerialisationHelper)
    }

    override def toJson(differentiator: SerialisationHelper) : org.codehaus.jettison.json.JSONObject = {
        var result = super.toJson(differentiator);

        result.put("_node", differentiator.idFor(this))

        result.put("Type", "TradeCapture.Internal.RefinedMetal.DocumentFxHedgeRequestParams@1@1.0")
        
          
          
          
          
            result.putOpt("FxRate", this.fxRate);
          
        
          
          
          
          
            result.putOpt("FxCurrency", this.fxCurrency);
          
        
          
          
          
          
            result.putOpt("FxUom", this.fxUom);
          
        
        return result;
    }

    override def loadJson(jobj : org.codehaus.jettison.json.JSONObject, cache: DeserialisationHelper) = {
        
            super.loadJson(jobj, cache);
        
        
          
              fxRate = JSONConversions.optionalReal(jobj.opt("FxRate"))
          
              fxCurrency = JSONConversions.optional[String](jobj.opt("FxCurrency"), null)
          
              fxUom = JSONConversions.optional[String](jobj.opt("FxUom"), null)
          
        
    }

  
}

object DocumentFxHedgeRequestParams {
  def version = ModelVersion("1")
  def wireFormatVersion = ModelVersion("1.0")

  
        val jsonTypeName = "TradeCapture.Internal.RefinedMetal.DocumentFxHedgeRequestParams"

    def fromJson(jobj : org.codehaus.jettison.json.JSONObject, cache: DeserialisationHelper = new DeserialisationHelper) : com.trafigura.tradecapture.internal.refinedmetal.DocumentFxHedgeRequestParams = {
      val v = TypeHolder(jobj.optString("Type"))

      v.assertModelVersion(version, "com.trafigura.tradecapture.internal.refinedmetal.DocumentFxHedgeRequestParams")
      v.assertWireFormatVersion(wireFormatVersion, "com.trafigura.tradecapture.internal.refinedmetal.DocumentFxHedgeRequestParams")

      
        
              v.typeName match {
              
                case _ =>
                  
                     val result = new com.trafigura.tradecapture.internal.refinedmetal.DocumentFxHedgeRequestParams()
                     result.loadJson(jobj, cache)
                     result
                  
            }
        
      
    }

  

  

  
    def apply(fxRate: Double = 0.0, fxCurrency: String = null, fxUom: String = null) = {
      val res = new com.trafigura.tradecapture.internal.refinedmetal.DocumentFxHedgeRequestParams
      
        res.fxRate = fxRate
      
        res.fxCurrency = fxCurrency
      
        res.fxUom = fxUom
      
      res
    }
  
}
