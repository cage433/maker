/**
 * WARNING: This file was automatically generated by the Trading Hub tooling version 2.15.
 * Any manual changes may be overwritten and lost!
 */


// Generated from model_object_scala.erb

package com.trafigura.tradecapture.internal.refinedmetal





import com.trafigura.tradinghub.support._
import scala.collection.JavaConversions._




 class TradeWarning extends com.trafigura.tradinghub.support.ModelObject  {
  


  
    

var oid:Int = 0
    
    
    

var tradeId:Int = 0
    
    
    

var warningType:TradeWarningWarningTypeEnum = null
    
    
    

var externalId:String = null
    
    
    

var deleted:Boolean = false
    
    





  override def equals(o: Any) = o match {
    case r: AnyRef =>
        if (o.isInstanceOf[com.trafigura.tradecapture.internal.refinedmetal.TradeWarning]) {
            val that = r.asInstanceOf[com.trafigura.tradecapture.internal.refinedmetal.TradeWarning]
            that.canEqual(this) && this.deleted == that.deleted && this.externalId == that.externalId && this.oid == that.oid && this.tradeId == that.tradeId && this.warningType == that.warningType &&  true
        }
        else false
    case _ => false
  }

  override def canEqual(that : Any) = that.isInstanceOf[com.trafigura.tradecapture.internal.refinedmetal.TradeWarning]

  override def hashCode = {
    (41 * (41 * (41 * (41 * (41 *  1
    ) +
         deleted.hashCode
        
    ) +
         (if (externalId == null) 0 else externalId.hashCode) 
    ) +
         oid.hashCode
        
    ) +
         tradeId.hashCode
        
    ) +
         (if (warningType == null) 0 else warningType.hashCode) 
    
  }

  override def toString = {
    "{com.trafigura.tradecapture.internal.refinedmetal.TradeWarning: " + "" + "deleted = " + deleted + ", " + "externalId = " + externalId + ", " + "oid = " + oid + ", " + "tradeId = " + tradeId + ", " + "warningType = " + warningType +  "}"
  }


  
         def toJson() : org.codehaus.jettison.json.JSONObject = {
      toJson(new SerialisationHelper)
    }

     def toJson(differentiator: SerialisationHelper) : org.codehaus.jettison.json.JSONObject = {
        var result = new org.codehaus.jettison.json.JSONObject();

        result.put("_node", differentiator.idFor(this))

        result.put("Type", "TradeCapture.Internal.RefinedMetal.TradeWarning@1@1.0")
        
          
          
          
          
            result.putOpt("Oid", this.oid);
          
        
          
          
          
          
            result.putOpt("TradeId", this.tradeId);
          
        
          
          
          
          
            result.putOpt("WarningType", (this.warningType) match { case null => null; case o => o.toJson });
          
        
          
          
          
          
            result.putOpt("ExternalId", this.externalId);
          
        
          
          
          
          
            result.putOpt("Deleted", this.deleted);
          
        
        return result;
    }

     def loadJson(jobj : org.codehaus.jettison.json.JSONObject, cache: DeserialisationHelper) = {
        
        
          
              oid = JSONConversions.optional[Int](jobj.opt("Oid"), 0)
          
              tradeId = jobj.optInt("TradeId")
          
              warningType = (jobj.optString("WarningType")) match { case null => null; case s: String => TradeWarningWarningTypeEnum.forName(s) }
          
              externalId = JSONConversions.optional[String](jobj.opt("ExternalId"), null)
          
              deleted = JSONConversions.optional[Boolean](jobj.opt("Deleted"), false)
          
        
    }

  
}

object TradeWarning {
  def version = ModelVersion("1")
  def wireFormatVersion = ModelVersion("1.0")

  
        val jsonTypeName = "TradeCapture.Internal.RefinedMetal.TradeWarning"

    def fromJson(jobj : org.codehaus.jettison.json.JSONObject, cache: DeserialisationHelper = new DeserialisationHelper) : com.trafigura.tradecapture.internal.refinedmetal.TradeWarning = {
      val v = TypeHolder(jobj.optString("Type"))

      v.assertModelVersion(version, "com.trafigura.tradecapture.internal.refinedmetal.TradeWarning")
      v.assertWireFormatVersion(wireFormatVersion, "com.trafigura.tradecapture.internal.refinedmetal.TradeWarning")

      
        
            val result = new com.trafigura.tradecapture.internal.refinedmetal.TradeWarning()
            result.loadJson(jobj, cache)
            result
        
      
    }

  

  

  
    def apply(oid: Int = 0, tradeId: Int = 0, warningType: TradeWarningWarningTypeEnum = null, externalId: String = null, deleted: Boolean = false) = {
      val res = new com.trafigura.tradecapture.internal.refinedmetal.TradeWarning
      
        res.oid = oid
      
        res.tradeId = tradeId
      
        res.warningType = warningType
      
        res.externalId = externalId
      
        res.deleted = deleted
      
      res
    }
  
}
