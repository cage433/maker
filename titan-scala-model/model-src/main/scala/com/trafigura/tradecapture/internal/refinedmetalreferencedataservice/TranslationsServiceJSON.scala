/**
 * WARNING: This file was automatically generated by the Trading Hub tooling version 2.15.
 * Any manual changes may be overwritten and lost!
 */


// Generated from model_service_json.rb

package com.trafigura.tradecapture.internal.refinedmetalreferencedataservice

import com.trafigura.tradecapture.internal.refinedmetal._

import org.codehaus.jettison.json.JSONObject
import com.trafigura.tradinghub.support._

// JSON support for TranslationsService

object TranslationsServiceJSON extends JSONServiceDispatcher[TranslationsService] {
  def serviceName = "TradeCapture.Internal.RefinedMetalReferenceDataService.TranslationsService"

  def decodeOperationName(jsonName:String) = {
    jsonName match {
      case "GetAllTranslations" => "GetAllTranslations"
      case "GetTranslationsForLanguage" => "GetTranslationsForLanguage"
      case "SaveTranslations" => "SaveTranslations"
      case "DeleteTranslations" => "DeleteTranslations"
      case "GetAllLanguages" => "GetAllLanguages"
      case "GetTranslations" => "GetTranslations"
      
    }
  }

  def parseParameters(operation:String, params: JSONObject) = {
    operation match {
      
      case "GetAllTranslations" =>
        
          Map()
        
      
      case "GetTranslationsForLanguage" =>
        
          val cache = new DeserialisationHelper
          Map("languageCode" -> (JSONConversions.optional[String](params.opt("LanguageCode"), null)))
        
      
      case "SaveTranslations" =>
        
          val cache = new DeserialisationHelper
          Map("translations" -> (JSONConversions.optionalList(params.opt("Translations"), x => (x) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.tradecapture.internal.refinedmetal.Translation.fromJson(o, cache))) })))
        
      
      case "DeleteTranslations" =>
        
          val cache = new DeserialisationHelper
          Map("translations" -> (JSONConversions.optionalList(params.opt("Translations"), x => JSONConversions.optional[Int](x, 0))))
        
      
      case "GetAllLanguages" =>
        
          Map()
        
      
      case "GetTranslations" =>
        
          val cache = new DeserialisationHelper
          Map("languageCode" -> (JSONConversions.optional[String](params.opt("LanguageCode"), null)), "regTranslations" -> (JSONConversions.optionalList(params.opt("RegTranslations"), x => (x) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.tradecapture.internal.refinedmetal.Translation.fromJson(o, cache))) })))
        
      
    }
  }

  def invoke(target: TranslationsService, operation: String, params: Map[String, Any]): Any = {
    operation match {
      
      case "GetAllTranslations" =>
        target.getAllTranslations()
      
      case "GetTranslationsForLanguage" =>
        target.getTranslationsForLanguage(params("languageCode").asInstanceOf[String])
      
      case "SaveTranslations" =>
        target.saveTranslations(params("translations").asInstanceOf[List[com.trafigura.tradecapture.internal.refinedmetal.Translation]])
      
      case "DeleteTranslations" =>
        target.deleteTranslations(params("translations").asInstanceOf[List[Int]])
      
      case "GetAllLanguages" =>
        target.getAllLanguages()
      
      case "GetTranslations" =>
        target.getTranslations(params("languageCode").asInstanceOf[String], params("regTranslations").asInstanceOf[List[com.trafigura.tradecapture.internal.refinedmetal.Translation]])
      
    }
  }

  def addResponse(operation:String, jsonResponse:JSONObject, response:Any) = {
    val differentiator = new SerialisationHelper
    operation match {
      
      case "GetAllTranslations" =>
        jsonResponse.putOpt("result", new org.codehaus.jettison.json.JSONArray(if(response.asInstanceOf[List[com.trafigura.tradecapture.internal.refinedmetal.Translation]] == null) new java.util.ArrayList() else java.util.Arrays.asList(response.asInstanceOf[List[com.trafigura.tradecapture.internal.refinedmetal.Translation]].map(t => (t) match { case null => null; case o => o.toJson(differentiator) }).toArray: _*)))
      
      case "GetTranslationsForLanguage" =>
        jsonResponse.putOpt("result", new org.codehaus.jettison.json.JSONArray(if(response.asInstanceOf[List[com.trafigura.tradecapture.internal.refinedmetal.Translation]] == null) new java.util.ArrayList() else java.util.Arrays.asList(response.asInstanceOf[List[com.trafigura.tradecapture.internal.refinedmetal.Translation]].map(t => (t) match { case null => null; case o => o.toJson(differentiator) }).toArray: _*)))
      
      case "SaveTranslations" =>
        jsonResponse.putOpt("result", new org.codehaus.jettison.json.JSONArray(if(response.asInstanceOf[List[com.trafigura.tradecapture.internal.refinedmetal.Translation]] == null) new java.util.ArrayList() else java.util.Arrays.asList(response.asInstanceOf[List[com.trafigura.tradecapture.internal.refinedmetal.Translation]].map(t => (t) match { case null => null; case o => o.toJson(differentiator) }).toArray: _*)))
      
      case "DeleteTranslations" =>
        jsonResponse.putOpt("result", response.asInstanceOf[Boolean])
      
      case "GetAllLanguages" =>
        jsonResponse.putOpt("result", new org.codehaus.jettison.json.JSONArray(if(response.asInstanceOf[List[com.trafigura.tradecapture.internal.refinedmetal.Language]] == null) new java.util.ArrayList() else java.util.Arrays.asList(response.asInstanceOf[List[com.trafigura.tradecapture.internal.refinedmetal.Language]].map(t => (t) match { case null => null; case o => o.toJson(differentiator) }).toArray: _*)))
      
      case "GetTranslations" =>
        jsonResponse.putOpt("result", (response.asInstanceOf[com.trafigura.tradecapture.internal.refinedmetal.Translations]) match { case null => null; case o => o.toJson(differentiator) })
      
    }
  }

  
  def serializeGetAllTranslations(): JSONObject = {
    val differentiator = new SerialisationHelper
    val params = new JSONObject
    
    params
  }
  
  def serializeGetTranslationsForLanguage(languageCode: String): JSONObject = {
    val differentiator = new SerialisationHelper
    val params = new JSONObject
    
      params.putOpt("LanguageCode", languageCode)
    
    params
  }
  
  def serializeSaveTranslations(translations: List[com.trafigura.tradecapture.internal.refinedmetal.Translation]): JSONObject = {
    val differentiator = new SerialisationHelper
    val params = new JSONObject
    
      params.putOpt("Translations", new org.codehaus.jettison.json.JSONArray(if(translations == null) new java.util.ArrayList() else java.util.Arrays.asList(translations.map(t => (t) match { case null => null; case o => o.toJson(differentiator) }).toArray: _*)))
    
    params
  }
  
  def serializeDeleteTranslations(translations: List[Int]): JSONObject = {
    val differentiator = new SerialisationHelper
    val params = new JSONObject
    
      params.putOpt("Translations", new org.codehaus.jettison.json.JSONArray(if(translations == null) new java.util.ArrayList() else java.util.Arrays.asList(translations.map(t => t).toArray: _*)))
    
    params
  }
  
  def serializeGetAllLanguages(): JSONObject = {
    val differentiator = new SerialisationHelper
    val params = new JSONObject
    
    params
  }
  
  def serializeGetTranslations(languageCode: String, regTranslations: List[com.trafigura.tradecapture.internal.refinedmetal.Translation]): JSONObject = {
    val differentiator = new SerialisationHelper
    val params = new JSONObject
    
      params.putOpt("LanguageCode", languageCode)
    
      params.putOpt("RegTranslations", new org.codehaus.jettison.json.JSONArray(if(regTranslations == null) new java.util.ArrayList() else java.util.Arrays.asList(regTranslations.map(t => (t) match { case null => null; case o => o.toJson(differentiator) }).toArray: _*)))
    
    params
  }
  

  class Proxy(val handler: (String, JSONObject) => JSONObject) extends TranslationsService {
  
    def getAllTranslations(): List[com.trafigura.tradecapture.internal.refinedmetal.Translation] = {
        val request = new JSONObject
        request.put("method", "GetAllTranslations")
        
        var routing = null
        val response = handler(routing, request)
        if (response == null) {
          null.asInstanceOf[List[com.trafigura.tradecapture.internal.refinedmetal.Translation]]   // Doesn't work well with primitive types, but we should only see null in cases like discover anyway
        } else {
          val cache = new DeserialisationHelper
          JSONConversions.optionalList(response.opt("result"), x => (x) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.tradecapture.internal.refinedmetal.Translation.fromJson(o, cache))) })
        }
    }
  
    def getTranslationsForLanguage(languageCode: String): List[com.trafigura.tradecapture.internal.refinedmetal.Translation] = {
        val request = new JSONObject
        request.put("method", "GetTranslationsForLanguage")
        
        request.put("params", serializeGetTranslationsForLanguage(languageCode))
        
        var routing = null
        val response = handler(routing, request)
        if (response == null) {
          null.asInstanceOf[List[com.trafigura.tradecapture.internal.refinedmetal.Translation]]   // Doesn't work well with primitive types, but we should only see null in cases like discover anyway
        } else {
          val cache = new DeserialisationHelper
          JSONConversions.optionalList(response.opt("result"), x => (x) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.tradecapture.internal.refinedmetal.Translation.fromJson(o, cache))) })
        }
    }
  
    def saveTranslations(translations: List[com.trafigura.tradecapture.internal.refinedmetal.Translation]): List[com.trafigura.tradecapture.internal.refinedmetal.Translation] = {
        val request = new JSONObject
        request.put("method", "SaveTranslations")
        
        request.put("params", serializeSaveTranslations(translations))
        
        var routing = null
        val response = handler(routing, request)
        if (response == null) {
          null.asInstanceOf[List[com.trafigura.tradecapture.internal.refinedmetal.Translation]]   // Doesn't work well with primitive types, but we should only see null in cases like discover anyway
        } else {
          val cache = new DeserialisationHelper
          JSONConversions.optionalList(response.opt("result"), x => (x) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.tradecapture.internal.refinedmetal.Translation.fromJson(o, cache))) })
        }
    }
  
    def deleteTranslations(translations: List[Int]): Boolean = {
        val request = new JSONObject
        request.put("method", "DeleteTranslations")
        
        request.put("params", serializeDeleteTranslations(translations))
        
        var routing = null
        val response = handler(routing, request)
        if (response == null) {
          null.asInstanceOf[Boolean]   // Doesn't work well with primitive types, but we should only see null in cases like discover anyway
        } else {
          val cache = new DeserialisationHelper
          JSONConversions.optional[Boolean](response.opt("result"), false)
        }
    }
  
    def getAllLanguages(): List[com.trafigura.tradecapture.internal.refinedmetal.Language] = {
        val request = new JSONObject
        request.put("method", "GetAllLanguages")
        
        var routing = null
        val response = handler(routing, request)
        if (response == null) {
          null.asInstanceOf[List[com.trafigura.tradecapture.internal.refinedmetal.Language]]   // Doesn't work well with primitive types, but we should only see null in cases like discover anyway
        } else {
          val cache = new DeserialisationHelper
          JSONConversions.optionalList(response.opt("result"), x => (x) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.tradecapture.internal.refinedmetal.Language.fromJson(o, cache))) })
        }
    }
  
    def getTranslations(languageCode: String, regTranslations: List[com.trafigura.tradecapture.internal.refinedmetal.Translation]): com.trafigura.tradecapture.internal.refinedmetal.Translations = {
        val request = new JSONObject
        request.put("method", "GetTranslations")
        
        request.put("params", serializeGetTranslations(languageCode, regTranslations))
        
        var routing = null
        val response = handler(routing, request)
        if (response == null) {
          null.asInstanceOf[com.trafigura.tradecapture.internal.refinedmetal.Translations]   // Doesn't work well with primitive types, but we should only see null in cases like discover anyway
        } else {
          val cache = new DeserialisationHelper
          (response.opt("result")) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.tradecapture.internal.refinedmetal.Translations.fromJson(o, cache))) }
        }
    }
  
  }
}

