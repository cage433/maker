/**
 * WARNING: This file was automatically generated by the Trading Hub tooling version 2.15.
 * Any manual changes may be overwritten and lost!
 */


// Generated from model_service_json.rb

package com.trafigura.tradecapture.internal.refinedmetaltradeservice

import com.trafigura.tradecapture.internal.refinedmetal._
import com.trafigura.tradecapture.internal.refinedmetaltradeservice._

import org.codehaus.jettison.json.JSONObject
import com.trafigura.tradinghub.support._

// JSON support for CaptureNeptuneTrades

object CaptureNeptuneTradesJSON extends JSONServiceDispatcher[CaptureNeptuneTrades] {
  def serviceName = "TradeCapture.Internal.RefinedMetalTradeService.CaptureNeptuneTrades"

  def decodeOperationName(jsonName:String) = {
    jsonName match {
      case "Create" => "Create"
      case "Destroy" => "Destroy"
      case "Complete" => "Complete"
      case "ApplyPriceFixations" => "ApplyPriceFixations"
      case "Login" => "Login"
      case "GetVersion" => "GetVersion"
      case "GetBuildConfiguration" => "GetBuildConfiguration"
      case "GetProcessId" => "GetProcessId"
      
    }
  }

  def parseParameters(operation:String, params: JSONObject) = {
    operation match {
      
      case "Create" =>
        
          val cache = new DeserialisationHelper
          Map("trade" -> ((params.opt("Trade")) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.tradecapture.internal.refinedmetal.RefinedMetalTrade.fromJson(o, cache))) }))
        
      
      case "Destroy" =>
        
          val cache = new DeserialisationHelper
          Map("neptuneId" -> (JSONConversions.optional[String](params.opt("NeptuneId"), null)), "groupCompanyId" -> (JSONConversions.optional[Int](params.opt("GroupCompanyId"), 0)))
        
      
      case "Complete" =>
        
          val cache = new DeserialisationHelper
          Map("neptuneId" -> (JSONConversions.optional[String](params.opt("NeptuneId"), null)))
        
      
      case "ApplyPriceFixations" =>
        
          val cache = new DeserialisationHelper
          Map("trade" -> ((params.opt("Trade")) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.tradecapture.internal.refinedmetal.RefinedMetalTrade.fromJson(o, cache))) }))
        
      
      case "Login" =>
        
          Map()
        
      
      case "GetVersion" =>
        
          Map()
        
      
      case "GetBuildConfiguration" =>
        
          Map()
        
      
      case "GetProcessId" =>
        
          Map()
        
      
    }
  }

  def invoke(target: CaptureNeptuneTrades, operation: String, params: Map[String, Any]): Any = {
    operation match {
      
      case "Create" =>
        target.create(params("trade").asInstanceOf[com.trafigura.tradecapture.internal.refinedmetal.RefinedMetalTrade])
      
      case "Destroy" =>
        target.destroy(params("neptuneId").asInstanceOf[String], params("groupCompanyId").asInstanceOf[Int])
      
      case "Complete" =>
        target.complete(params("neptuneId").asInstanceOf[String])
      
      case "ApplyPriceFixations" =>
        target.applyPriceFixations(params("trade").asInstanceOf[com.trafigura.tradecapture.internal.refinedmetal.RefinedMetalTrade])
      
      case "Login" =>
        target.login()
      
      case "GetVersion" =>
        target.getVersion()
      
      case "GetBuildConfiguration" =>
        target.getBuildConfiguration()
      
      case "GetProcessId" =>
        target.getProcessId()
      
    }
  }

  def addResponse(operation:String, jsonResponse:JSONObject, response:Any) = {
    val differentiator = new SerialisationHelper
    operation match {
      
      case "Create" =>
        jsonResponse.putOpt("result", (response.asInstanceOf[com.trafigura.tradecapture.internal.refinedmetaltradeservice.NeptuneResult]) match { case null => null; case o => o.toJson(differentiator) })
      
      case "Destroy" =>
        jsonResponse.putOpt("result", (response.asInstanceOf[com.trafigura.tradecapture.internal.refinedmetaltradeservice.NeptuneResult]) match { case null => null; case o => o.toJson(differentiator) })
      
      case "Complete" =>
        jsonResponse.putOpt("result", (response.asInstanceOf[com.trafigura.tradecapture.internal.refinedmetaltradeservice.NeptuneResult]) match { case null => null; case o => o.toJson(differentiator) })
      
      case "ApplyPriceFixations" =>
        jsonResponse.putOpt("result", (response.asInstanceOf[com.trafigura.tradecapture.internal.refinedmetaltradeservice.NeptuneResult]) match { case null => null; case o => o.toJson(differentiator) })
      
      case "Login" =>
        jsonResponse.putOpt("result", (response.asInstanceOf[com.trafigura.tradecapture.internal.refinedmetaltradeservice.NeptuneLoginResult]) match { case null => null; case o => o.toJson(differentiator) })
      
      case "GetVersion" =>
        jsonResponse.putOpt("result", response.asInstanceOf[String])
      
      case "GetBuildConfiguration" =>
        jsonResponse.putOpt("result", response.asInstanceOf[String])
      
      case "GetProcessId" =>
        jsonResponse.putOpt("result", response.asInstanceOf[Int])
      
    }
  }

  
  def serializeCreate(trade: com.trafigura.tradecapture.internal.refinedmetal.RefinedMetalTrade): JSONObject = {
    val differentiator = new SerialisationHelper
    val params = new JSONObject
    
      params.putOpt("Trade", (trade) match { case null => null; case o => o.toJson(differentiator) })
    
    params
  }
  
  def serializeDestroy(neptuneId: String, groupCompanyId: Int): JSONObject = {
    val differentiator = new SerialisationHelper
    val params = new JSONObject
    
      params.putOpt("NeptuneId", neptuneId)
    
      params.putOpt("GroupCompanyId", groupCompanyId)
    
    params
  }
  
  def serializeComplete(neptuneId: String): JSONObject = {
    val differentiator = new SerialisationHelper
    val params = new JSONObject
    
      params.putOpt("NeptuneId", neptuneId)
    
    params
  }
  
  def serializeApplyPriceFixations(trade: com.trafigura.tradecapture.internal.refinedmetal.RefinedMetalTrade): JSONObject = {
    val differentiator = new SerialisationHelper
    val params = new JSONObject
    
      params.putOpt("Trade", (trade) match { case null => null; case o => o.toJson(differentiator) })
    
    params
  }
  
  def serializeLogin(): JSONObject = {
    val differentiator = new SerialisationHelper
    val params = new JSONObject
    
    params
  }
  
  def serializeGetVersion(): JSONObject = {
    val differentiator = new SerialisationHelper
    val params = new JSONObject
    
    params
  }
  
  def serializeGetBuildConfiguration(): JSONObject = {
    val differentiator = new SerialisationHelper
    val params = new JSONObject
    
    params
  }
  
  def serializeGetProcessId(): JSONObject = {
    val differentiator = new SerialisationHelper
    val params = new JSONObject
    
    params
  }
  

  class Proxy(val handler: (String, JSONObject) => JSONObject) extends CaptureNeptuneTrades {
  
    def create(trade: com.trafigura.tradecapture.internal.refinedmetal.RefinedMetalTrade): com.trafigura.tradecapture.internal.refinedmetaltradeservice.NeptuneResult = {
        val request = new JSONObject
        request.put("method", "Create")
        
        request.put("params", serializeCreate(trade))
        
        var routing = null
        val response = handler(routing, request)
        if (response == null) {
          null.asInstanceOf[com.trafigura.tradecapture.internal.refinedmetaltradeservice.NeptuneResult]   // Doesn't work well with primitive types, but we should only see null in cases like discover anyway
        } else {
          val cache = new DeserialisationHelper
          (response.opt("result")) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.tradecapture.internal.refinedmetaltradeservice.NeptuneResult.fromJson(o, cache))) }
        }
    }
  
    def destroy(neptuneId: String, groupCompanyId: Int): com.trafigura.tradecapture.internal.refinedmetaltradeservice.NeptuneResult = {
        val request = new JSONObject
        request.put("method", "Destroy")
        
        request.put("params", serializeDestroy(neptuneId, groupCompanyId))
        
        var routing = null
        val response = handler(routing, request)
        if (response == null) {
          null.asInstanceOf[com.trafigura.tradecapture.internal.refinedmetaltradeservice.NeptuneResult]   // Doesn't work well with primitive types, but we should only see null in cases like discover anyway
        } else {
          val cache = new DeserialisationHelper
          (response.opt("result")) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.tradecapture.internal.refinedmetaltradeservice.NeptuneResult.fromJson(o, cache))) }
        }
    }
  
    def complete(neptuneId: String): com.trafigura.tradecapture.internal.refinedmetaltradeservice.NeptuneResult = {
        val request = new JSONObject
        request.put("method", "Complete")
        
        request.put("params", serializeComplete(neptuneId))
        
        var routing = null
        val response = handler(routing, request)
        if (response == null) {
          null.asInstanceOf[com.trafigura.tradecapture.internal.refinedmetaltradeservice.NeptuneResult]   // Doesn't work well with primitive types, but we should only see null in cases like discover anyway
        } else {
          val cache = new DeserialisationHelper
          (response.opt("result")) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.tradecapture.internal.refinedmetaltradeservice.NeptuneResult.fromJson(o, cache))) }
        }
    }
  
    def applyPriceFixations(trade: com.trafigura.tradecapture.internal.refinedmetal.RefinedMetalTrade): com.trafigura.tradecapture.internal.refinedmetaltradeservice.NeptuneResult = {
        val request = new JSONObject
        request.put("method", "ApplyPriceFixations")
        
        request.put("params", serializeApplyPriceFixations(trade))
        
        var routing = null
        val response = handler(routing, request)
        if (response == null) {
          null.asInstanceOf[com.trafigura.tradecapture.internal.refinedmetaltradeservice.NeptuneResult]   // Doesn't work well with primitive types, but we should only see null in cases like discover anyway
        } else {
          val cache = new DeserialisationHelper
          (response.opt("result")) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.tradecapture.internal.refinedmetaltradeservice.NeptuneResult.fromJson(o, cache))) }
        }
    }
  
    def login(): com.trafigura.tradecapture.internal.refinedmetaltradeservice.NeptuneLoginResult = {
        val request = new JSONObject
        request.put("method", "Login")
        
        var routing = null
        val response = handler(routing, request)
        if (response == null) {
          null.asInstanceOf[com.trafigura.tradecapture.internal.refinedmetaltradeservice.NeptuneLoginResult]   // Doesn't work well with primitive types, but we should only see null in cases like discover anyway
        } else {
          val cache = new DeserialisationHelper
          (response.opt("result")) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.tradecapture.internal.refinedmetaltradeservice.NeptuneLoginResult.fromJson(o, cache))) }
        }
    }
  
    def getVersion(): String = {
        val request = new JSONObject
        request.put("method", "GetVersion")
        
        var routing = null
        val response = handler(routing, request)
        if (response == null) {
          null.asInstanceOf[String]   // Doesn't work well with primitive types, but we should only see null in cases like discover anyway
        } else {
          val cache = new DeserialisationHelper
          JSONConversions.optional[String](response.opt("result"), null)
        }
    }
  
    def getBuildConfiguration(): String = {
        val request = new JSONObject
        request.put("method", "GetBuildConfiguration")
        
        var routing = null
        val response = handler(routing, request)
        if (response == null) {
          null.asInstanceOf[String]   // Doesn't work well with primitive types, but we should only see null in cases like discover anyway
        } else {
          val cache = new DeserialisationHelper
          JSONConversions.optional[String](response.opt("result"), null)
        }
    }
  
    def getProcessId(): Int = {
        val request = new JSONObject
        request.put("method", "GetProcessId")
        
        var routing = null
        val response = handler(routing, request)
        if (response == null) {
          null.asInstanceOf[Int]   // Doesn't work well with primitive types, but we should only see null in cases like discover anyway
        } else {
          val cache = new DeserialisationHelper
          JSONConversions.optional[Int](response.opt("result"), 0)
        }
    }
  
  }
}

