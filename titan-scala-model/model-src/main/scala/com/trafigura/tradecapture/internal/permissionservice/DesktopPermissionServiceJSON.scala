/**
 * WARNING: This file was automatically generated by the Trading Hub tooling version 2.15.
 * Any manual changes may be overwritten and lost!
 */


// Generated from model_service_json.rb

package com.trafigura.tradecapture.internal.permissionservice

import com.trafigura.tradecapture.internal.permissionservice._

import org.codehaus.jettison.json.JSONObject
import com.trafigura.tradinghub.support._

// JSON support for DesktopPermissionService

object DesktopPermissionServiceJSON extends JSONServiceDispatcher[DesktopPermissionService] {
  def serviceName = "TradeCapture.Internal.PermissionService.DesktopPermissionService"

  def decodeOperationName(jsonName:String) = {
    jsonName match {
      case "GetTradersAndTrafficOperators" => "GetTradersAndTrafficOperators"
      
    }
  }

  def parseParameters(operation:String, params: JSONObject) = {
    operation match {
      
      case "GetTradersAndTrafficOperators" =>
        
          val cache = new DeserialisationHelper
          Map("gcs" -> (JSONConversions.optionalList(params.opt("Gcs"), x => JSONConversions.optional[String](x, null))))
        
      
    }
  }

  def invoke(target: DesktopPermissionService, operation: String, params: Map[String, Any]): Any = {
    operation match {
      
      case "GetTradersAndTrafficOperators" =>
        target.getTradersAndTrafficOperators(params("gcs").asInstanceOf[List[String]])
      
    }
  }

  def addResponse(operation:String, jsonResponse:JSONObject, response:Any) = {
    val differentiator = new SerialisationHelper
    operation match {
      
      case "GetTradersAndTrafficOperators" =>
        jsonResponse.putOpt("result", new org.codehaus.jettison.json.JSONArray(if(response.asInstanceOf[List[com.trafigura.tradecapture.internal.permissionservice.TrafficOperatorAndTradersForGC]] == null) new java.util.ArrayList() else java.util.Arrays.asList(response.asInstanceOf[List[com.trafigura.tradecapture.internal.permissionservice.TrafficOperatorAndTradersForGC]].map(t => (t) match { case null => null; case o => o.toJson(differentiator) }).toArray: _*)))
      
    }
  }

  
  def serializeGetTradersAndTrafficOperators(gcs: List[String]): JSONObject = {
    val differentiator = new SerialisationHelper
    val params = new JSONObject
    
      params.putOpt("Gcs", new org.codehaus.jettison.json.JSONArray(if(gcs == null) new java.util.ArrayList() else java.util.Arrays.asList(gcs.map(t => t).toArray: _*)))
    
    params
  }
  

  class Proxy(val handler: (String, JSONObject) => JSONObject) extends DesktopPermissionService {
  
    def getTradersAndTrafficOperators(gcs: List[String]): List[com.trafigura.tradecapture.internal.permissionservice.TrafficOperatorAndTradersForGC] = {
        val request = new JSONObject
        request.put("method", "GetTradersAndTrafficOperators")
        
        request.put("params", serializeGetTradersAndTrafficOperators(gcs))
        
        var routing = null
        val response = handler(routing, request)
        if (response == null) {
          null.asInstanceOf[List[com.trafigura.tradecapture.internal.permissionservice.TrafficOperatorAndTradersForGC]]   // Doesn't work well with primitive types, but we should only see null in cases like discover anyway
        } else {
          val cache = new DeserialisationHelper
          JSONConversions.optionalList(response.opt("result"), x => (x) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.tradecapture.internal.permissionservice.TrafficOperatorAndTradersForGC.fromJson(o, cache))) })
        }
    }
  
  }
}

