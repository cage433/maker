/**
 * WARNING: This file was automatically generated by the Trading Hub tooling version 2.15.
 * Any manual changes may be overwritten and lost!
 */


// Generated from model_service_locator.rb

package com.trafigura.tradecapture.internal.permissionservice

import com.trafigura.tradinghub.support._
import com.trafigura.tradinghub.discovery._
import org.jboss.resteasy.client._

import com.trafigura.tradecapture.internal.permissionservice._


/**
 * Locator for finding UserService instances.
 */
trait UserServiceLocator {
  /**
   * Provides a proxy for the given operation to run.
   */
  def proxy:UserService
}

class LocatableUserService(val locator:UserServiceLocator) extends UserService {
  
    def create(user: com.trafigura.tradecapture.internal.permissionservice.User): com.trafigura.tradecapture.internal.permissionservice.PermissionResult =
      locator.proxy.create(user)
  
    def getBySid(sid: String): com.trafigura.tradecapture.internal.permissionservice.User =
      locator.proxy.getBySid(sid)
  
    def getByUserId(userId: com.trafigura.tradecapture.internal.permissionservice.UserId): com.trafigura.tradecapture.internal.permissionservice.User =
      locator.proxy.getByUserId(userId)
  
    def get(oid: Int): com.trafigura.tradecapture.internal.permissionservice.User =
      locator.proxy.get(oid)
  
    def tryGet(oid: Int): List[com.trafigura.tradecapture.internal.permissionservice.User] =
      locator.proxy.tryGet(oid)
  
    def getAll(): List[com.trafigura.tradecapture.internal.permissionservice.User] =
      locator.proxy.getAll()
  
    def update(user: com.trafigura.tradecapture.internal.permissionservice.User): com.trafigura.tradecapture.internal.permissionservice.PermissionResult =
      locator.proxy.update(user)
  
    def delete(oid: Int): Boolean =
      locator.proxy.delete(oid)
  
    def addRole(userOid: Int, roleOid: Int): Boolean =
      locator.proxy.addRole(userOid, roleOid)
  
    def removeRole(userOid: Int, roleOid: Int): Boolean =
      locator.proxy.removeRole(userOid, roleOid)
  
    def getUserRoles(oid: Int): List[com.trafigura.tradecapture.internal.permissionservice.Role] =
      locator.proxy.getUserRoles(oid)
  
    def getUserGroups(oid: Int): List[com.trafigura.tradecapture.internal.permissionservice.Group] =
      locator.proxy.getUserGroups(oid)
  
    def getUserGroupRoles(oid: Int): List[com.trafigura.tradecapture.internal.permissionservice.Role] =
      locator.proxy.getUserGroupRoles(oid)
  
}