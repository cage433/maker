/**
 * WARNING: This file was automatically generated by the Trading Hub tooling version 2.15.
 * Any manual changes may be overwritten and lost!
 */


// Generated from model_object_scala.erb

package com.trafigura.tradecapture.internal.refinedmetal





import com.trafigura.tradinghub.support._
import scala.collection.JavaConversions._




 class ContractDocumentQuotaParameters extends com.trafigura.tradinghub.support.ModelObject  {
  


  
    

var ordinal:Int = 0
    
    
    

var quantity:Double = 0.0
    
    
    

var uom:String = null
    
    
    

var estimatedSales:org.joda.time.LocalDate = null
    
    
    

var shipment:org.joda.time.LocalDate = null
    
    
    

var vatInvoiceDate:org.joda.time.LocalDate = null
    
    
    

var qpTypeId:Int = 0
    
    
    

var qpType:String = null
    
    
    

var qpMonth:String = null
    
    
    

var grade:String = null
    
    
    

var shape:String = null
    
    
    

var presentedDocumentName:String = null
    
    
    

var presentedDocumentIsCopy:Boolean = false
    
    
    

var numberOfDeferredCreditDays:Int = 0
    
    
    

var pricingSpecParams:List[com.trafigura.tradecapture.internal.refinedmetal.DocumentPricingSpecParams] = null
    
    





  override def equals(o: Any) = o match {
    case r: AnyRef =>
        if (o.isInstanceOf[com.trafigura.tradecapture.internal.refinedmetal.ContractDocumentQuotaParameters]) {
            val that = r.asInstanceOf[com.trafigura.tradecapture.internal.refinedmetal.ContractDocumentQuotaParameters]
            that.canEqual(this) && this.estimatedSales == that.estimatedSales && this.grade == that.grade && this.numberOfDeferredCreditDays == that.numberOfDeferredCreditDays && this.ordinal == that.ordinal && this.presentedDocumentIsCopy == that.presentedDocumentIsCopy && this.presentedDocumentName == that.presentedDocumentName && this.pricingSpecParams == that.pricingSpecParams && this.qpMonth == that.qpMonth && this.qpType == that.qpType && this.qpTypeId == that.qpTypeId && this.quantity == that.quantity && this.shape == that.shape && this.shipment == that.shipment && this.uom == that.uom && this.vatInvoiceDate == that.vatInvoiceDate &&  true
        }
        else false
    case _ => false
  }

  override def canEqual(that : Any) = that.isInstanceOf[com.trafigura.tradecapture.internal.refinedmetal.ContractDocumentQuotaParameters]

  override def hashCode = {
    (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 *  1
    ) +
         (if (estimatedSales == null) 0 else estimatedSales.hashCode) 
    ) +
         (if (grade == null) 0 else grade.hashCode) 
    ) +
         numberOfDeferredCreditDays.hashCode
        
    ) +
         ordinal.hashCode
        
    ) +
         presentedDocumentIsCopy.hashCode
        
    ) +
         (if (presentedDocumentName == null) 0 else presentedDocumentName.hashCode) 
    ) +
         (if (pricingSpecParams == null) 0 else pricingSpecParams.hashCode) 
    ) +
         (if (qpMonth == null) 0 else qpMonth.hashCode) 
    ) +
         (if (qpType == null) 0 else qpType.hashCode) 
    ) +
         qpTypeId.hashCode
        
    ) +
         quantity.hashCode
        
    ) +
         (if (shape == null) 0 else shape.hashCode) 
    ) +
         (if (shipment == null) 0 else shipment.hashCode) 
    ) +
         (if (uom == null) 0 else uom.hashCode) 
    ) +
         (if (vatInvoiceDate == null) 0 else vatInvoiceDate.hashCode) 
    
  }

  override def toString = {
    "{com.trafigura.tradecapture.internal.refinedmetal.ContractDocumentQuotaParameters: " + "" + "estimatedSales = " + estimatedSales + ", " + "grade = " + grade + ", " + "numberOfDeferredCreditDays = " + numberOfDeferredCreditDays + ", " + "ordinal = " + ordinal + ", " + "presentedDocumentIsCopy = " + presentedDocumentIsCopy + ", " + "presentedDocumentName = " + presentedDocumentName + ", " + "pricingSpecParams = " + pricingSpecParams + ", " + "qpMonth = " + qpMonth + ", " + "qpType = " + qpType + ", " + "qpTypeId = " + qpTypeId + ", " + "quantity = " + quantity + ", " + "shape = " + shape + ", " + "shipment = " + shipment + ", " + "uom = " + uom + ", " + "vatInvoiceDate = " + vatInvoiceDate +  "}"
  }


  
         def toJson() : org.codehaus.jettison.json.JSONObject = {
      toJson(new SerialisationHelper)
    }

     def toJson(differentiator: SerialisationHelper) : org.codehaus.jettison.json.JSONObject = {
        var result = new org.codehaus.jettison.json.JSONObject();

        result.put("_node", differentiator.idFor(this))

        result.put("Type", "TradeCapture.Internal.RefinedMetal.ContractDocumentQuotaParameters@1@1.0")
        
          
          
          
          
            result.putOpt("Ordinal", this.ordinal);
          
        
          
          
          
          
            result.putOpt("Quantity", this.quantity);
          
        
          
          
          
          
            result.putOpt("Uom", this.uom);
          
        
          
          
          
          
            result.putOpt("EstimatedSales", JSONConversions.optionalMonthYearToJSON(this.estimatedSales));
          
        
          
          
          
          
            result.putOpt("Shipment", JSONConversions.optionalMonthYearToJSON(this.shipment));
          
        
          
          
          
          
            result.putOpt("VatInvoiceDate", JSONConversions.optionalDateToJSON(this.vatInvoiceDate));
          
        
          
          
          
          
            result.putOpt("QpTypeId", this.qpTypeId);
          
        
          
          
          
          
            result.putOpt("QpType", this.qpType);
          
        
          
          
          
          
            result.putOpt("QpMonth", this.qpMonth);
          
        
          
          
          
          
            result.putOpt("Grade", this.grade);
          
        
          
          
          
          
            result.putOpt("Shape", this.shape);
          
        
          
          
          
          
            result.putOpt("PresentedDocumentName", this.presentedDocumentName);
          
        
          
          
          
          
            result.putOpt("PresentedDocumentIsCopy", this.presentedDocumentIsCopy);
          
        
          
          
          
          
            result.putOpt("NumberOfDeferredCreditDays", this.numberOfDeferredCreditDays);
          
        
          
          
          
          
            result.putOpt("PricingSpecParams", new org.codehaus.jettison.json.JSONArray(if(this.pricingSpecParams == null) new java.util.ArrayList() else java.util.Arrays.asList(this.pricingSpecParams.map(t => (t) match { case null => null; case o => o.toJson(differentiator) }).toArray: _*)));
          
        
        return result;
    }

     def loadJson(jobj : org.codehaus.jettison.json.JSONObject, cache: DeserialisationHelper) = {
        
        
          
              ordinal = JSONConversions.optional[Int](jobj.opt("Ordinal"), 0)
          
              quantity = JSONConversions.optionalReal(jobj.opt("Quantity"))
          
              uom = JSONConversions.optional[String](jobj.opt("Uom"), null)
          
              estimatedSales = JSONConversions.optionalMonthYear(jobj.opt("EstimatedSales"))
          
              shipment = JSONConversions.optionalMonthYear(jobj.opt("Shipment"))
          
              vatInvoiceDate = JSONConversions.optionalDate(jobj.opt("VatInvoiceDate"))
          
              qpTypeId = JSONConversions.optional[Int](jobj.opt("QpTypeId"), 0)
          
              qpType = JSONConversions.optional[String](jobj.opt("QpType"), null)
          
              qpMonth = JSONConversions.optional[String](jobj.opt("QpMonth"), null)
          
              grade = JSONConversions.optional[String](jobj.opt("Grade"), null)
          
              shape = JSONConversions.optional[String](jobj.opt("Shape"), null)
          
              presentedDocumentName = JSONConversions.optional[String](jobj.opt("PresentedDocumentName"), null)
          
              presentedDocumentIsCopy = JSONConversions.optional[Boolean](jobj.opt("PresentedDocumentIsCopy"), false)
          
              numberOfDeferredCreditDays = JSONConversions.optional[Int](jobj.opt("NumberOfDeferredCreditDays"), 0)
          
              pricingSpecParams = JSONConversions.optionalList(jobj.opt("PricingSpecParams"), x => (x) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.tradecapture.internal.refinedmetal.DocumentPricingSpecParams.fromJson(o, cache))) })
          
        
    }

  
}

object ContractDocumentQuotaParameters {
  def version = ModelVersion("1")
  def wireFormatVersion = ModelVersion("1.0")

  
        val jsonTypeName = "TradeCapture.Internal.RefinedMetal.ContractDocumentQuotaParameters"

    def fromJson(jobj : org.codehaus.jettison.json.JSONObject, cache: DeserialisationHelper = new DeserialisationHelper) : com.trafigura.tradecapture.internal.refinedmetal.ContractDocumentQuotaParameters = {
      val v = TypeHolder(jobj.optString("Type"))

      v.assertModelVersion(version, "com.trafigura.tradecapture.internal.refinedmetal.ContractDocumentQuotaParameters")
      v.assertWireFormatVersion(wireFormatVersion, "com.trafigura.tradecapture.internal.refinedmetal.ContractDocumentQuotaParameters")

      
        
            val result = new com.trafigura.tradecapture.internal.refinedmetal.ContractDocumentQuotaParameters()
            result.loadJson(jobj, cache)
            result
        
      
    }

  

  

  
    def apply(ordinal: Int = 0, quantity: Double = 0.0, uom: String = null, estimatedSales: org.joda.time.LocalDate = null, shipment: org.joda.time.LocalDate = null, vatInvoiceDate: org.joda.time.LocalDate = null, qpTypeId: Int = 0, qpType: String = null, qpMonth: String = null, grade: String = null, shape: String = null, presentedDocumentName: String = null, presentedDocumentIsCopy: Boolean = false, numberOfDeferredCreditDays: Int = 0, pricingSpecParams: List[com.trafigura.tradecapture.internal.refinedmetal.DocumentPricingSpecParams] = null) = {
      val res = new com.trafigura.tradecapture.internal.refinedmetal.ContractDocumentQuotaParameters
      
        res.ordinal = ordinal
      
        res.quantity = quantity
      
        res.uom = uom
      
        res.estimatedSales = estimatedSales
      
        res.shipment = shipment
      
        res.vatInvoiceDate = vatInvoiceDate
      
        res.qpTypeId = qpTypeId
      
        res.qpType = qpType
      
        res.qpMonth = qpMonth
      
        res.grade = grade
      
        res.shape = shape
      
        res.presentedDocumentName = presentedDocumentName
      
        res.presentedDocumentIsCopy = presentedDocumentIsCopy
      
        res.numberOfDeferredCreditDays = numberOfDeferredCreditDays
      
        res.pricingSpecParams = pricingSpecParams
      
      res
    }
  
}
