/**
 * WARNING: This file was automatically generated by the Trading Hub tooling version 2.15.
 * Any manual changes may be overwritten and lost!
 */


// Generated from model_object_scala.erb

package com.trafigura.tradecapture.internal.permissionservice





import com.trafigura.tradinghub.support._
import scala.collection.JavaConversions._



/**
 Unique User identifier (e.g. AD SID)
 */


 class UserId extends com.trafigura.tradinghub.support.ModelObject  {
  


  
    
    /**
     , :business_key => true
     */

var identifier:String = null
    
    





  override def equals(o: Any) = o match {
    case r: AnyRef =>
        if (o.isInstanceOf[com.trafigura.tradecapture.internal.permissionservice.UserId]) {
            val that = r.asInstanceOf[com.trafigura.tradecapture.internal.permissionservice.UserId]
            that.canEqual(this) && this.identifier == that.identifier &&  true
        }
        else false
    case _ => false
  }

  override def canEqual(that : Any) = that.isInstanceOf[com.trafigura.tradecapture.internal.permissionservice.UserId]

  override def hashCode = {
    (41 *  1
    ) +
         (if (identifier == null) 0 else identifier.hashCode) 
    
  }

  override def toString = {
    "{com.trafigura.tradecapture.internal.permissionservice.UserId: " + "" + "identifier = " + identifier +  "}"
  }


  
         def toJson() : org.codehaus.jettison.json.JSONObject = {
      toJson(new SerialisationHelper)
    }

     def toJson(differentiator: SerialisationHelper) : org.codehaus.jettison.json.JSONObject = {
        var result = new org.codehaus.jettison.json.JSONObject();

        result.put("_node", differentiator.idFor(this))

        result.put("Type", "TradeCapture.Internal.PermissionService.UserId@1@1.0")
        
          
          
          
          
            result.putOpt("Id", this.identifier);
          
        
        return result;
    }

     def loadJson(jobj : org.codehaus.jettison.json.JSONObject, cache: DeserialisationHelper) = {
        
        
          
              identifier = JSONConversions.optional[String](jobj.opt("Id"), null)
          
        
    }

  
}

object UserId {
  def version = ModelVersion("1")
  def wireFormatVersion = ModelVersion("1.0")

  
        val jsonTypeName = "TradeCapture.Internal.PermissionService.UserId"

    def fromJson(jobj : org.codehaus.jettison.json.JSONObject, cache: DeserialisationHelper = new DeserialisationHelper) : com.trafigura.tradecapture.internal.permissionservice.UserId = {
      val v = TypeHolder(jobj.optString("Type"))

      v.assertModelVersion(version, "com.trafigura.tradecapture.internal.permissionservice.UserId")
      v.assertWireFormatVersion(wireFormatVersion, "com.trafigura.tradecapture.internal.permissionservice.UserId")

      
        
            val result = new com.trafigura.tradecapture.internal.permissionservice.UserId()
            result.loadJson(jobj, cache)
            result
        
      
    }

  

  

  
    def apply(identifier: String = null) = {
      val res = new com.trafigura.tradecapture.internal.permissionservice.UserId
      
        res.identifier = identifier
      
      res
    }
  
}
