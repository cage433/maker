/**
 * WARNING: This file was automatically generated by the Trading Hub tooling version 2.15.
 * Any manual changes may be overwritten and lost!
 */


// Generated from model_service_locator.rb

package com.trafigura.tradecapture.internal.permissionservice

import com.trafigura.tradinghub.support._
import com.trafigura.tradinghub.discovery._
import org.jboss.resteasy.client._

import com.trafigura.tradecapture.internal.permissionservice._


/**
 * Locator for finding GroupService instances.
 */
trait GroupServiceLocator {
  /**
   * Provides a proxy for the given operation to run.
   */
  def proxy:GroupService
}

class LocatableGroupService(val locator:GroupServiceLocator) extends GroupService {
  
    def create(group: com.trafigura.tradecapture.internal.permissionservice.Group): com.trafigura.tradecapture.internal.permissionservice.PermissionResult =
      locator.proxy.create(group)
  
    def get(oid: Int): com.trafigura.tradecapture.internal.permissionservice.Group =
      locator.proxy.get(oid)
  
    def getAll(): List[com.trafigura.tradecapture.internal.permissionservice.Group] =
      locator.proxy.getAll()
  
    def update(group: com.trafigura.tradecapture.internal.permissionservice.Group): com.trafigura.tradecapture.internal.permissionservice.PermissionResult =
      locator.proxy.update(group)
  
    def delete(oid: Int): Boolean =
      locator.proxy.delete(oid)
  
    def addUser(groupOid: Int, userOid: Int): Boolean =
      locator.proxy.addUser(groupOid, userOid)
  
    def removeUser(groupOid: Int, userOid: Int): Boolean =
      locator.proxy.removeUser(groupOid, userOid)
  
    def getGroupUsers(oid: Int): List[com.trafigura.tradecapture.internal.permissionservice.User] =
      locator.proxy.getGroupUsers(oid)
  
    def getGroupRoles(oid: Int): List[com.trafigura.tradecapture.internal.permissionservice.Role] =
      locator.proxy.getGroupRoles(oid)
  
    def addRole(groupOid: Int, roleOid: Int): Boolean =
      locator.proxy.addRole(groupOid, roleOid)
  
    def removeRole(groupOid: Int, roleOid: Int): Boolean =
      locator.proxy.removeRole(groupOid, roleOid)
  
}