/**
 * WARNING: This file was automatically generated by the Trading Hub tooling version 2.15.
 * Any manual changes may be overwritten and lost!
 */


// Generated from model_object_scala.erb

package com.trafigura.tradecapture.internal.refinedmetaltradeservice





import com.trafigura.tradinghub.support._
import scala.collection.JavaConversions._




 class GetTradeWithVersionsResult extends com.trafigura.tradinghub.support.ModelObject  {
  


  
    

var trade:com.trafigura.tradecapture.internal.refinedmetal.RefinedMetalTrade = null
    
    
    

var tradeVersions:List[com.trafigura.tradecapture.internal.refinedmetal.RefinedMetalTrade] = null
    
    





  override def equals(o: Any) = o match {
    case r: AnyRef =>
        if (o.isInstanceOf[com.trafigura.tradecapture.internal.refinedmetaltradeservice.GetTradeWithVersionsResult]) {
            val that = r.asInstanceOf[com.trafigura.tradecapture.internal.refinedmetaltradeservice.GetTradeWithVersionsResult]
            that.canEqual(this) && this.trade == that.trade && this.tradeVersions == that.tradeVersions &&  true
        }
        else false
    case _ => false
  }

  override def canEqual(that : Any) = that.isInstanceOf[com.trafigura.tradecapture.internal.refinedmetaltradeservice.GetTradeWithVersionsResult]

  override def hashCode = {
    (41 * (41 *  1
    ) +
         (if (trade == null) 0 else trade.hashCode) 
    ) +
         (if (tradeVersions == null) 0 else tradeVersions.hashCode) 
    
  }

  override def toString = {
    "{com.trafigura.tradecapture.internal.refinedmetaltradeservice.GetTradeWithVersionsResult: " + "" + "trade = " + trade + ", " + "tradeVersions = " + tradeVersions +  "}"
  }


  
         def toJson() : org.codehaus.jettison.json.JSONObject = {
      toJson(new SerialisationHelper)
    }

     def toJson(differentiator: SerialisationHelper) : org.codehaus.jettison.json.JSONObject = {
        var result = new org.codehaus.jettison.json.JSONObject();

        result.put("_node", differentiator.idFor(this))

        result.put("Type", "TradeCapture.Internal.RefinedMetalTradeService.GetTradeWithVersionsResult@1@1.0")
        
          
          
          
          
            result.putOpt("Trade", (this.trade) match { case null => null; case o => o.toJson(differentiator) });
          
        
          
          
          
          
            result.putOpt("TradeVersions", new org.codehaus.jettison.json.JSONArray(if(this.tradeVersions == null) new java.util.ArrayList() else java.util.Arrays.asList(this.tradeVersions.map(t => (t) match { case null => null; case o => o.toJson(differentiator) }).toArray: _*)));
          
        
        return result;
    }

     def loadJson(jobj : org.codehaus.jettison.json.JSONObject, cache: DeserialisationHelper) = {
        
        
          
              trade = (jobj.opt("Trade")) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.tradecapture.internal.refinedmetal.RefinedMetalTrade.fromJson(o, cache))) }
          
              tradeVersions = JSONConversions.optionalList(jobj.opt("TradeVersions"), x => (x) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.tradecapture.internal.refinedmetal.RefinedMetalTrade.fromJson(o, cache))) })
          
        
    }

  
}

object GetTradeWithVersionsResult {
  def version = ModelVersion("1")
  def wireFormatVersion = ModelVersion("1.0")

  
        val jsonTypeName = "TradeCapture.Internal.RefinedMetalTradeService.GetTradeWithVersionsResult"

    def fromJson(jobj : org.codehaus.jettison.json.JSONObject, cache: DeserialisationHelper = new DeserialisationHelper) : com.trafigura.tradecapture.internal.refinedmetaltradeservice.GetTradeWithVersionsResult = {
      val v = TypeHolder(jobj.optString("Type"))

      v.assertModelVersion(version, "com.trafigura.tradecapture.internal.refinedmetaltradeservice.GetTradeWithVersionsResult")
      v.assertWireFormatVersion(wireFormatVersion, "com.trafigura.tradecapture.internal.refinedmetaltradeservice.GetTradeWithVersionsResult")

      
        
            val result = new com.trafigura.tradecapture.internal.refinedmetaltradeservice.GetTradeWithVersionsResult()
            result.loadJson(jobj, cache)
            result
        
      
    }

  

  

  
    def apply(trade: com.trafigura.tradecapture.internal.refinedmetal.RefinedMetalTrade = null, tradeVersions: List[com.trafigura.tradecapture.internal.refinedmetal.RefinedMetalTrade] = null) = {
      val res = new com.trafigura.tradecapture.internal.refinedmetaltradeservice.GetTradeWithVersionsResult
      
        res.trade = trade
      
        res.tradeVersions = tradeVersions
      
      res
    }
  
}
