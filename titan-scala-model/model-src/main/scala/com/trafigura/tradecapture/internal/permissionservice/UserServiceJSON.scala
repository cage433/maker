/**
 * WARNING: This file was automatically generated by the Trading Hub tooling version 2.15.
 * Any manual changes may be overwritten and lost!
 */


// Generated from model_service_json.rb

package com.trafigura.tradecapture.internal.permissionservice

import com.trafigura.tradecapture.internal.permissionservice._

import org.codehaus.jettison.json.JSONObject
import com.trafigura.tradinghub.support._

// JSON support for UserService

object UserServiceJSON extends JSONServiceDispatcher[UserService] {
  def serviceName = "TradeCapture.Internal.PermissionService.UserService"

  def decodeOperationName(jsonName:String) = {
    jsonName match {
      case "Create" => "Create"
      case "GetBySid" => "GetBySid"
      case "GetByUserId" => "GetByUserId"
      case "Get" => "Get"
      case "TryGet" => "TryGet"
      case "GetAll" => "GetAll"
      case "Update" => "Update"
      case "Delete" => "Delete"
      case "AddRole" => "AddRole"
      case "RemoveRole" => "RemoveRole"
      case "GetUserRoles" => "GetUserRoles"
      case "GetUserGroups" => "GetUserGroups"
      case "GetUserGroupRoles" => "GetUserGroupRoles"
      
    }
  }

  def parseParameters(operation:String, params: JSONObject) = {
    operation match {
      
      case "Create" =>
        
          val cache = new DeserialisationHelper
          Map("user" -> ((params.opt("User")) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.tradecapture.internal.permissionservice.User.fromJson(o, cache))) }))
        
      
      case "GetBySid" =>
        
          val cache = new DeserialisationHelper
          Map("sid" -> (JSONConversions.optional[String](params.opt("Sid"), null)))
        
      
      case "GetByUserId" =>
        
          val cache = new DeserialisationHelper
          Map("userId" -> ((params.opt("UserId")) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.tradecapture.internal.permissionservice.UserId.fromJson(o, cache))) }))
        
      
      case "Get" =>
        
          val cache = new DeserialisationHelper
          Map("oid" -> (JSONConversions.optional[Int](params.opt("Oid"), 0)))
        
      
      case "TryGet" =>
        
          val cache = new DeserialisationHelper
          Map("oid" -> (JSONConversions.optional[Int](params.opt("Oid"), 0)))
        
      
      case "GetAll" =>
        
          Map()
        
      
      case "Update" =>
        
          val cache = new DeserialisationHelper
          Map("user" -> ((params.opt("User")) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.tradecapture.internal.permissionservice.User.fromJson(o, cache))) }))
        
      
      case "Delete" =>
        
          val cache = new DeserialisationHelper
          Map("oid" -> (JSONConversions.optional[Int](params.opt("Oid"), 0)))
        
      
      case "AddRole" =>
        
          val cache = new DeserialisationHelper
          Map("userOid" -> (JSONConversions.optional[Int](params.opt("UserOid"), 0)), "roleOid" -> (JSONConversions.optional[Int](params.opt("RoleOid"), 0)))
        
      
      case "RemoveRole" =>
        
          val cache = new DeserialisationHelper
          Map("userOid" -> (JSONConversions.optional[Int](params.opt("UserOid"), 0)), "roleOid" -> (JSONConversions.optional[Int](params.opt("RoleOid"), 0)))
        
      
      case "GetUserRoles" =>
        
          val cache = new DeserialisationHelper
          Map("oid" -> (JSONConversions.optional[Int](params.opt("Oid"), 0)))
        
      
      case "GetUserGroups" =>
        
          val cache = new DeserialisationHelper
          Map("oid" -> (JSONConversions.optional[Int](params.opt("Oid"), 0)))
        
      
      case "GetUserGroupRoles" =>
        
          val cache = new DeserialisationHelper
          Map("oid" -> (JSONConversions.optional[Int](params.opt("Oid"), 0)))
        
      
    }
  }

  def invoke(target: UserService, operation: String, params: Map[String, Any]): Any = {
    operation match {
      
      case "Create" =>
        target.create(params("user").asInstanceOf[com.trafigura.tradecapture.internal.permissionservice.User])
      
      case "GetBySid" =>
        target.getBySid(params("sid").asInstanceOf[String])
      
      case "GetByUserId" =>
        target.getByUserId(params("userId").asInstanceOf[com.trafigura.tradecapture.internal.permissionservice.UserId])
      
      case "Get" =>
        target.get(params("oid").asInstanceOf[Int])
      
      case "TryGet" =>
        target.tryGet(params("oid").asInstanceOf[Int])
      
      case "GetAll" =>
        target.getAll()
      
      case "Update" =>
        target.update(params("user").asInstanceOf[com.trafigura.tradecapture.internal.permissionservice.User])
      
      case "Delete" =>
        target.delete(params("oid").asInstanceOf[Int])
      
      case "AddRole" =>
        target.addRole(params("userOid").asInstanceOf[Int], params("roleOid").asInstanceOf[Int])
      
      case "RemoveRole" =>
        target.removeRole(params("userOid").asInstanceOf[Int], params("roleOid").asInstanceOf[Int])
      
      case "GetUserRoles" =>
        target.getUserRoles(params("oid").asInstanceOf[Int])
      
      case "GetUserGroups" =>
        target.getUserGroups(params("oid").asInstanceOf[Int])
      
      case "GetUserGroupRoles" =>
        target.getUserGroupRoles(params("oid").asInstanceOf[Int])
      
    }
  }

  def addResponse(operation:String, jsonResponse:JSONObject, response:Any) = {
    val differentiator = new SerialisationHelper
    operation match {
      
      case "Create" =>
        jsonResponse.putOpt("result", (response.asInstanceOf[com.trafigura.tradecapture.internal.permissionservice.PermissionResult]) match { case null => null; case o => o.toJson(differentiator) })
      
      case "GetBySid" =>
        jsonResponse.putOpt("result", (response.asInstanceOf[com.trafigura.tradecapture.internal.permissionservice.User]) match { case null => null; case o => o.toJson(differentiator) })
      
      case "GetByUserId" =>
        jsonResponse.putOpt("result", (response.asInstanceOf[com.trafigura.tradecapture.internal.permissionservice.User]) match { case null => null; case o => o.toJson(differentiator) })
      
      case "Get" =>
        jsonResponse.putOpt("result", (response.asInstanceOf[com.trafigura.tradecapture.internal.permissionservice.User]) match { case null => null; case o => o.toJson(differentiator) })
      
      case "TryGet" =>
        jsonResponse.putOpt("result", new org.codehaus.jettison.json.JSONArray(if(response.asInstanceOf[List[com.trafigura.tradecapture.internal.permissionservice.User]] == null) new java.util.ArrayList() else java.util.Arrays.asList(response.asInstanceOf[List[com.trafigura.tradecapture.internal.permissionservice.User]].map(t => (t) match { case null => null; case o => o.toJson(differentiator) }).toArray: _*)))
      
      case "GetAll" =>
        jsonResponse.putOpt("result", new org.codehaus.jettison.json.JSONArray(if(response.asInstanceOf[List[com.trafigura.tradecapture.internal.permissionservice.User]] == null) new java.util.ArrayList() else java.util.Arrays.asList(response.asInstanceOf[List[com.trafigura.tradecapture.internal.permissionservice.User]].map(t => (t) match { case null => null; case o => o.toJson(differentiator) }).toArray: _*)))
      
      case "Update" =>
        jsonResponse.putOpt("result", (response.asInstanceOf[com.trafigura.tradecapture.internal.permissionservice.PermissionResult]) match { case null => null; case o => o.toJson(differentiator) })
      
      case "Delete" =>
        jsonResponse.putOpt("result", response.asInstanceOf[Boolean])
      
      case "AddRole" =>
        jsonResponse.putOpt("result", response.asInstanceOf[Boolean])
      
      case "RemoveRole" =>
        jsonResponse.putOpt("result", response.asInstanceOf[Boolean])
      
      case "GetUserRoles" =>
        jsonResponse.putOpt("result", new org.codehaus.jettison.json.JSONArray(if(response.asInstanceOf[List[com.trafigura.tradecapture.internal.permissionservice.Role]] == null) new java.util.ArrayList() else java.util.Arrays.asList(response.asInstanceOf[List[com.trafigura.tradecapture.internal.permissionservice.Role]].map(t => (t) match { case null => null; case o => o.toJson(differentiator) }).toArray: _*)))
      
      case "GetUserGroups" =>
        jsonResponse.putOpt("result", new org.codehaus.jettison.json.JSONArray(if(response.asInstanceOf[List[com.trafigura.tradecapture.internal.permissionservice.Group]] == null) new java.util.ArrayList() else java.util.Arrays.asList(response.asInstanceOf[List[com.trafigura.tradecapture.internal.permissionservice.Group]].map(t => (t) match { case null => null; case o => o.toJson(differentiator) }).toArray: _*)))
      
      case "GetUserGroupRoles" =>
        jsonResponse.putOpt("result", new org.codehaus.jettison.json.JSONArray(if(response.asInstanceOf[List[com.trafigura.tradecapture.internal.permissionservice.Role]] == null) new java.util.ArrayList() else java.util.Arrays.asList(response.asInstanceOf[List[com.trafigura.tradecapture.internal.permissionservice.Role]].map(t => (t) match { case null => null; case o => o.toJson(differentiator) }).toArray: _*)))
      
    }
  }

  
  def serializeCreate(user: com.trafigura.tradecapture.internal.permissionservice.User): JSONObject = {
    val differentiator = new SerialisationHelper
    val params = new JSONObject
    
      params.putOpt("User", (user) match { case null => null; case o => o.toJson(differentiator) })
    
    params
  }
  
  def serializeGetBySid(sid: String): JSONObject = {
    val differentiator = new SerialisationHelper
    val params = new JSONObject
    
      params.putOpt("Sid", sid)
    
    params
  }
  
  def serializeGetByUserId(userId: com.trafigura.tradecapture.internal.permissionservice.UserId): JSONObject = {
    val differentiator = new SerialisationHelper
    val params = new JSONObject
    
      params.putOpt("UserId", (userId) match { case null => null; case o => o.toJson(differentiator) })
    
    params
  }
  
  def serializeGet(oid: Int): JSONObject = {
    val differentiator = new SerialisationHelper
    val params = new JSONObject
    
      params.putOpt("Oid", oid)
    
    params
  }
  
  def serializeTryGet(oid: Int): JSONObject = {
    val differentiator = new SerialisationHelper
    val params = new JSONObject
    
      params.putOpt("Oid", oid)
    
    params
  }
  
  def serializeGetAll(): JSONObject = {
    val differentiator = new SerialisationHelper
    val params = new JSONObject
    
    params
  }
  
  def serializeUpdate(user: com.trafigura.tradecapture.internal.permissionservice.User): JSONObject = {
    val differentiator = new SerialisationHelper
    val params = new JSONObject
    
      params.putOpt("User", (user) match { case null => null; case o => o.toJson(differentiator) })
    
    params
  }
  
  def serializeDelete(oid: Int): JSONObject = {
    val differentiator = new SerialisationHelper
    val params = new JSONObject
    
      params.putOpt("Oid", oid)
    
    params
  }
  
  def serializeAddRole(userOid: Int, roleOid: Int): JSONObject = {
    val differentiator = new SerialisationHelper
    val params = new JSONObject
    
      params.putOpt("UserOid", userOid)
    
      params.putOpt("RoleOid", roleOid)
    
    params
  }
  
  def serializeRemoveRole(userOid: Int, roleOid: Int): JSONObject = {
    val differentiator = new SerialisationHelper
    val params = new JSONObject
    
      params.putOpt("UserOid", userOid)
    
      params.putOpt("RoleOid", roleOid)
    
    params
  }
  
  def serializeGetUserRoles(oid: Int): JSONObject = {
    val differentiator = new SerialisationHelper
    val params = new JSONObject
    
      params.putOpt("Oid", oid)
    
    params
  }
  
  def serializeGetUserGroups(oid: Int): JSONObject = {
    val differentiator = new SerialisationHelper
    val params = new JSONObject
    
      params.putOpt("Oid", oid)
    
    params
  }
  
  def serializeGetUserGroupRoles(oid: Int): JSONObject = {
    val differentiator = new SerialisationHelper
    val params = new JSONObject
    
      params.putOpt("Oid", oid)
    
    params
  }
  

  class Proxy(val handler: (String, JSONObject) => JSONObject) extends UserService {
  
    def create(user: com.trafigura.tradecapture.internal.permissionservice.User): com.trafigura.tradecapture.internal.permissionservice.PermissionResult = {
        val request = new JSONObject
        request.put("method", "Create")
        
        request.put("params", serializeCreate(user))
        
        var routing = null
        val response = handler(routing, request)
        if (response == null) {
          null.asInstanceOf[com.trafigura.tradecapture.internal.permissionservice.PermissionResult]   // Doesn't work well with primitive types, but we should only see null in cases like discover anyway
        } else {
          val cache = new DeserialisationHelper
          (response.opt("result")) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.tradecapture.internal.permissionservice.PermissionResult.fromJson(o, cache))) }
        }
    }
  
    def getBySid(sid: String): com.trafigura.tradecapture.internal.permissionservice.User = {
        val request = new JSONObject
        request.put("method", "GetBySid")
        
        request.put("params", serializeGetBySid(sid))
        
        var routing = null
        val response = handler(routing, request)
        if (response == null) {
          null.asInstanceOf[com.trafigura.tradecapture.internal.permissionservice.User]   // Doesn't work well with primitive types, but we should only see null in cases like discover anyway
        } else {
          val cache = new DeserialisationHelper
          (response.opt("result")) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.tradecapture.internal.permissionservice.User.fromJson(o, cache))) }
        }
    }
  
    def getByUserId(userId: com.trafigura.tradecapture.internal.permissionservice.UserId): com.trafigura.tradecapture.internal.permissionservice.User = {
        val request = new JSONObject
        request.put("method", "GetByUserId")
        
        request.put("params", serializeGetByUserId(userId))
        
        var routing = null
        val response = handler(routing, request)
        if (response == null) {
          null.asInstanceOf[com.trafigura.tradecapture.internal.permissionservice.User]   // Doesn't work well with primitive types, but we should only see null in cases like discover anyway
        } else {
          val cache = new DeserialisationHelper
          (response.opt("result")) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.tradecapture.internal.permissionservice.User.fromJson(o, cache))) }
        }
    }
  
    def get(oid: Int): com.trafigura.tradecapture.internal.permissionservice.User = {
        val request = new JSONObject
        request.put("method", "Get")
        
        request.put("params", serializeGet(oid))
        
        var routing = null
        val response = handler(routing, request)
        if (response == null) {
          null.asInstanceOf[com.trafigura.tradecapture.internal.permissionservice.User]   // Doesn't work well with primitive types, but we should only see null in cases like discover anyway
        } else {
          val cache = new DeserialisationHelper
          (response.opt("result")) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.tradecapture.internal.permissionservice.User.fromJson(o, cache))) }
        }
    }
  
    def tryGet(oid: Int): List[com.trafigura.tradecapture.internal.permissionservice.User] = {
        val request = new JSONObject
        request.put("method", "TryGet")
        
        request.put("params", serializeTryGet(oid))
        
        var routing = null
        val response = handler(routing, request)
        if (response == null) {
          null.asInstanceOf[List[com.trafigura.tradecapture.internal.permissionservice.User]]   // Doesn't work well with primitive types, but we should only see null in cases like discover anyway
        } else {
          val cache = new DeserialisationHelper
          JSONConversions.optionalList(response.opt("result"), x => (x) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.tradecapture.internal.permissionservice.User.fromJson(o, cache))) })
        }
    }
  
    def getAll(): List[com.trafigura.tradecapture.internal.permissionservice.User] = {
        val request = new JSONObject
        request.put("method", "GetAll")
        
        var routing = null
        val response = handler(routing, request)
        if (response == null) {
          null.asInstanceOf[List[com.trafigura.tradecapture.internal.permissionservice.User]]   // Doesn't work well with primitive types, but we should only see null in cases like discover anyway
        } else {
          val cache = new DeserialisationHelper
          JSONConversions.optionalList(response.opt("result"), x => (x) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.tradecapture.internal.permissionservice.User.fromJson(o, cache))) })
        }
    }
  
    def update(user: com.trafigura.tradecapture.internal.permissionservice.User): com.trafigura.tradecapture.internal.permissionservice.PermissionResult = {
        val request = new JSONObject
        request.put("method", "Update")
        
        request.put("params", serializeUpdate(user))
        
        var routing = null
        val response = handler(routing, request)
        if (response == null) {
          null.asInstanceOf[com.trafigura.tradecapture.internal.permissionservice.PermissionResult]   // Doesn't work well with primitive types, but we should only see null in cases like discover anyway
        } else {
          val cache = new DeserialisationHelper
          (response.opt("result")) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.tradecapture.internal.permissionservice.PermissionResult.fromJson(o, cache))) }
        }
    }
  
    def delete(oid: Int): Boolean = {
        val request = new JSONObject
        request.put("method", "Delete")
        
        request.put("params", serializeDelete(oid))
        
        var routing = null
        val response = handler(routing, request)
        if (response == null) {
          null.asInstanceOf[Boolean]   // Doesn't work well with primitive types, but we should only see null in cases like discover anyway
        } else {
          val cache = new DeserialisationHelper
          JSONConversions.optional[Boolean](response.opt("result"), false)
        }
    }
  
    def addRole(userOid: Int, roleOid: Int): Boolean = {
        val request = new JSONObject
        request.put("method", "AddRole")
        
        request.put("params", serializeAddRole(userOid, roleOid))
        
        var routing = null
        val response = handler(routing, request)
        if (response == null) {
          null.asInstanceOf[Boolean]   // Doesn't work well with primitive types, but we should only see null in cases like discover anyway
        } else {
          val cache = new DeserialisationHelper
          JSONConversions.optional[Boolean](response.opt("result"), false)
        }
    }
  
    def removeRole(userOid: Int, roleOid: Int): Boolean = {
        val request = new JSONObject
        request.put("method", "RemoveRole")
        
        request.put("params", serializeRemoveRole(userOid, roleOid))
        
        var routing = null
        val response = handler(routing, request)
        if (response == null) {
          null.asInstanceOf[Boolean]   // Doesn't work well with primitive types, but we should only see null in cases like discover anyway
        } else {
          val cache = new DeserialisationHelper
          JSONConversions.optional[Boolean](response.opt("result"), false)
        }
    }
  
    def getUserRoles(oid: Int): List[com.trafigura.tradecapture.internal.permissionservice.Role] = {
        val request = new JSONObject
        request.put("method", "GetUserRoles")
        
        request.put("params", serializeGetUserRoles(oid))
        
        var routing = null
        val response = handler(routing, request)
        if (response == null) {
          null.asInstanceOf[List[com.trafigura.tradecapture.internal.permissionservice.Role]]   // Doesn't work well with primitive types, but we should only see null in cases like discover anyway
        } else {
          val cache = new DeserialisationHelper
          JSONConversions.optionalList(response.opt("result"), x => (x) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.tradecapture.internal.permissionservice.Role.fromJson(o, cache))) })
        }
    }
  
    def getUserGroups(oid: Int): List[com.trafigura.tradecapture.internal.permissionservice.Group] = {
        val request = new JSONObject
        request.put("method", "GetUserGroups")
        
        request.put("params", serializeGetUserGroups(oid))
        
        var routing = null
        val response = handler(routing, request)
        if (response == null) {
          null.asInstanceOf[List[com.trafigura.tradecapture.internal.permissionservice.Group]]   // Doesn't work well with primitive types, but we should only see null in cases like discover anyway
        } else {
          val cache = new DeserialisationHelper
          JSONConversions.optionalList(response.opt("result"), x => (x) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.tradecapture.internal.permissionservice.Group.fromJson(o, cache))) })
        }
    }
  
    def getUserGroupRoles(oid: Int): List[com.trafigura.tradecapture.internal.permissionservice.Role] = {
        val request = new JSONObject
        request.put("method", "GetUserGroupRoles")
        
        request.put("params", serializeGetUserGroupRoles(oid))
        
        var routing = null
        val response = handler(routing, request)
        if (response == null) {
          null.asInstanceOf[List[com.trafigura.tradecapture.internal.permissionservice.Role]]   // Doesn't work well with primitive types, but we should only see null in cases like discover anyway
        } else {
          val cache = new DeserialisationHelper
          JSONConversions.optionalList(response.opt("result"), x => (x) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.tradecapture.internal.permissionservice.Role.fromJson(o, cache))) })
        }
    }
  
  }
}

