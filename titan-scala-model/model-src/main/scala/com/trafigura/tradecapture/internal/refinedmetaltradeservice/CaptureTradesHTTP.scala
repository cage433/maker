/**
 * WARNING: This file was automatically generated by the Trading Hub tooling version 2.15.
 * Any manual changes may be overwritten and lost!
 */


// Generated from model_service_http.rb

package com.trafigura.tradecapture.internal.refinedmetaltradeservice

import com.trafigura.tradecapture.internal.refinedmetal._
import com.trafigura.edm.shared.types._

import org.codehaus.jettison.json.JSONObject
import com.trafigura.tradinghub.support._
import javax.ws.rs._
import javax.ws.rs.core.Response
import org.jboss.resteasy.client.ClientResponse
import org.jboss.resteasy.annotations._
import scala.collection.JavaConversions._

// Some of the objects from the system namespace responses are
// used in handwritten code, so this hybrid resolution is required.
import com.trafigura.responses._


// JAX-RS support for CaptureTrades


// A resource trait corresponding to CaptureTrades

@Path("/CaptureTrades")
trait CaptureTradesResource {
  
  @Path("Update")
  @POST @Consumes(Array("application/json")) @Produces(Array("application/json"))
  def update(@HeaderParam("User") _userHeader:String, in: String): Response
  
  @Path("Create")
  @POST @Consumes(Array("application/json")) @Produces(Array("application/json"))
  def create(@HeaderParam("User") _userHeader:String, in: String): Response
  
  @Path("Cancel")
  @POST @Consumes(Array("application/json")) @Produces(Array("application/json"))
  def cancel(@HeaderParam("User") _userHeader:String, in: String): Response
  
  @Path("Complete")
  @POST @Consumes(Array("application/json")) @Produces(Array("application/json"))
  def complete(@HeaderParam("User") _userHeader:String, in: String): Response
  
  @Path("CalculatePremia")
  @POST @Consumes(Array("application/json")) @Produces(Array("application/json"))
  def calculatePremia(@HeaderParam("User") _userHeader:String, in: String): Response
  
  @Path("RegisterDocumentCreationInTrade")
  @POST @Consumes(Array("application/json")) @Produces(Array("application/json"))
  def registerDocumentCreationInTrade(@HeaderParam("User") _userHeader:String, in: String): Response
  
}


// Wrap a CaptureTradesResource (provided by RESTEasy's client
// support) as a CaptureTrades
//
// Note: will throw an exception on parse/status code errors, exception will contain details of the error
//
class CaptureTradesResourceProxy(val resource: CaptureTradesResource) extends CaptureTrades {

  val log = org.slf4j.LoggerFactory.getLogger(this.getClass.getName)

  
  def update(trade: com.trafigura.tradecapture.internal.refinedmetal.RefinedMetalTrade) = update(trade,null)
  def update(trade: com.trafigura.tradecapture.internal.refinedmetal.RefinedMetalTrade, securityContext:SecurityContext = null): com.trafigura.tradecapture.internal.refinedmetal.RefinedMetalTradeSubmissionResult = {
    val _userHeader = if (securityContext != null) { securityContext.user } else { null }
    val response = resource.update(_userHeader, CaptureTradesJSON.serializeUpdate(trade).toString)
    val content = response.asInstanceOf[ClientResponse[String]].getEntity(classOf[String])

    log.debug("Completed call to update: " + response.getStatus() + " - " + content)

    if (response.getStatus() == Response.Status.OK.getStatusCode()) {
      
	      try {
          val obj = JSONConversions.parseJSON(content)
          val cache = new DeserialisationHelper
          (obj) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.tradecapture.internal.refinedmetal.RefinedMetalTradeSubmissionResult.fromJson(o, cache))) }
	      } catch {
          case ex : Exception => {
            log.error("Parse exception from Status-Code: " + response.getStatus() + " on content: " + content + "; throwing exception...", ex)
            throw new Exception("Service invocation, response parse exception: Status Code: " + response.getStatus() + ", Content: '" + content + "'")
          }
        }
      
    }
    else { // non OK 200 status response
      log.debug("status NOT OK 200, throwing exception...")

      val obj = JSONConversions.parseJSON(content)

      val err = (obj) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => Result.fromJson(o, new DeserialisationHelper) }
        err match {
          case er : Result => {
            log.error("error response: " + er.message  + " { " + er.toString + " } status: " + response.getStatus)
            val ex = new Exception(er.message  + " { " + er.toString + " } status: " + response.getStatus)
            //ex.setStackTrace(er.stackTrace) // todo, need to add server stack trace, probably to customer application exception class
            throw ex
          }
          case _ => {
            log.error("unknown response, not an error response, content: " + content)
            throw new Exception("Unhandled response received, content: " + content)
          }
        }
    }
  }
  
  def create(trade: com.trafigura.tradecapture.internal.refinedmetal.RefinedMetalTrade) = create(trade,null)
  def create(trade: com.trafigura.tradecapture.internal.refinedmetal.RefinedMetalTrade, securityContext:SecurityContext = null): com.trafigura.tradecapture.internal.refinedmetal.RefinedMetalTradeSubmissionResult = {
    val _userHeader = if (securityContext != null) { securityContext.user } else { null }
    val response = resource.create(_userHeader, CaptureTradesJSON.serializeCreate(trade).toString)
    val content = response.asInstanceOf[ClientResponse[String]].getEntity(classOf[String])

    log.debug("Completed call to create: " + response.getStatus() + " - " + content)

    if (response.getStatus() == Response.Status.OK.getStatusCode()) {
      
	      try {
          val obj = JSONConversions.parseJSON(content)
          val cache = new DeserialisationHelper
          (obj) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.tradecapture.internal.refinedmetal.RefinedMetalTradeSubmissionResult.fromJson(o, cache))) }
	      } catch {
          case ex : Exception => {
            log.error("Parse exception from Status-Code: " + response.getStatus() + " on content: " + content + "; throwing exception...", ex)
            throw new Exception("Service invocation, response parse exception: Status Code: " + response.getStatus() + ", Content: '" + content + "'")
          }
        }
      
    }
    else { // non OK 200 status response
      log.debug("status NOT OK 200, throwing exception...")

      val obj = JSONConversions.parseJSON(content)

      val err = (obj) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => Result.fromJson(o, new DeserialisationHelper) }
        err match {
          case er : Result => {
            log.error("error response: " + er.message  + " { " + er.toString + " } status: " + response.getStatus)
            val ex = new Exception(er.message  + " { " + er.toString + " } status: " + response.getStatus)
            //ex.setStackTrace(er.stackTrace) // todo, need to add server stack trace, probably to customer application exception class
            throw ex
          }
          case _ => {
            log.error("unknown response, not an error response, content: " + content)
            throw new Exception("Unhandled response received, content: " + content)
          }
        }
    }
  }
  
  def cancel(trade: com.trafigura.tradecapture.internal.refinedmetal.RefinedMetalTrade) = cancel(trade,null)
  def cancel(trade: com.trafigura.tradecapture.internal.refinedmetal.RefinedMetalTrade, securityContext:SecurityContext = null): com.trafigura.tradecapture.internal.refinedmetal.RefinedMetalTradeSubmissionResult = {
    val _userHeader = if (securityContext != null) { securityContext.user } else { null }
    val response = resource.cancel(_userHeader, CaptureTradesJSON.serializeCancel(trade).toString)
    val content = response.asInstanceOf[ClientResponse[String]].getEntity(classOf[String])

    log.debug("Completed call to cancel: " + response.getStatus() + " - " + content)

    if (response.getStatus() == Response.Status.OK.getStatusCode()) {
      
	      try {
          val obj = JSONConversions.parseJSON(content)
          val cache = new DeserialisationHelper
          (obj) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.tradecapture.internal.refinedmetal.RefinedMetalTradeSubmissionResult.fromJson(o, cache))) }
	      } catch {
          case ex : Exception => {
            log.error("Parse exception from Status-Code: " + response.getStatus() + " on content: " + content + "; throwing exception...", ex)
            throw new Exception("Service invocation, response parse exception: Status Code: " + response.getStatus() + ", Content: '" + content + "'")
          }
        }
      
    }
    else { // non OK 200 status response
      log.debug("status NOT OK 200, throwing exception...")

      val obj = JSONConversions.parseJSON(content)

      val err = (obj) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => Result.fromJson(o, new DeserialisationHelper) }
        err match {
          case er : Result => {
            log.error("error response: " + er.message  + " { " + er.toString + " } status: " + response.getStatus)
            val ex = new Exception(er.message  + " { " + er.toString + " } status: " + response.getStatus)
            //ex.setStackTrace(er.stackTrace) // todo, need to add server stack trace, probably to customer application exception class
            throw ex
          }
          case _ => {
            log.error("unknown response, not an error response, content: " + content)
            throw new Exception("Unhandled response received, content: " + content)
          }
        }
    }
  }
  
  def complete(trade: com.trafigura.tradecapture.internal.refinedmetal.RefinedMetalTrade) = complete(trade,null)
  def complete(trade: com.trafigura.tradecapture.internal.refinedmetal.RefinedMetalTrade, securityContext:SecurityContext = null): com.trafigura.tradecapture.internal.refinedmetal.RefinedMetalTradeSubmissionResult = {
    val _userHeader = if (securityContext != null) { securityContext.user } else { null }
    val response = resource.complete(_userHeader, CaptureTradesJSON.serializeComplete(trade).toString)
    val content = response.asInstanceOf[ClientResponse[String]].getEntity(classOf[String])

    log.debug("Completed call to complete: " + response.getStatus() + " - " + content)

    if (response.getStatus() == Response.Status.OK.getStatusCode()) {
      
	      try {
          val obj = JSONConversions.parseJSON(content)
          val cache = new DeserialisationHelper
          (obj) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.tradecapture.internal.refinedmetal.RefinedMetalTradeSubmissionResult.fromJson(o, cache))) }
	      } catch {
          case ex : Exception => {
            log.error("Parse exception from Status-Code: " + response.getStatus() + " on content: " + content + "; throwing exception...", ex)
            throw new Exception("Service invocation, response parse exception: Status Code: " + response.getStatus() + ", Content: '" + content + "'")
          }
        }
      
    }
    else { // non OK 200 status response
      log.debug("status NOT OK 200, throwing exception...")

      val obj = JSONConversions.parseJSON(content)

      val err = (obj) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => Result.fromJson(o, new DeserialisationHelper) }
        err match {
          case er : Result => {
            log.error("error response: " + er.message  + " { " + er.toString + " } status: " + response.getStatus)
            val ex = new Exception(er.message  + " { " + er.toString + " } status: " + response.getStatus)
            //ex.setStackTrace(er.stackTrace) // todo, need to add server stack trace, probably to customer application exception class
            throw ex
          }
          case _ => {
            log.error("unknown response, not an error response, content: " + content)
            throw new Exception("Unhandled response received, content: " + content)
          }
        }
    }
  }
  
  def calculatePremia(trade: com.trafigura.tradecapture.internal.refinedmetal.RefinedMetalTrade) = calculatePremia(trade,null)
  def calculatePremia(trade: com.trafigura.tradecapture.internal.refinedmetal.RefinedMetalTrade, securityContext:SecurityContext = null): com.trafigura.tradecapture.internal.refinedmetal.RefinedMetalTrade = {
    val _userHeader = if (securityContext != null) { securityContext.user } else { null }
    val response = resource.calculatePremia(_userHeader, CaptureTradesJSON.serializeCalculatePremia(trade).toString)
    val content = response.asInstanceOf[ClientResponse[String]].getEntity(classOf[String])

    log.debug("Completed call to calculatePremia: " + response.getStatus() + " - " + content)

    if (response.getStatus() == Response.Status.OK.getStatusCode()) {
      
	      try {
          val obj = JSONConversions.parseJSON(content)
          val cache = new DeserialisationHelper
          (obj) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.tradecapture.internal.refinedmetal.RefinedMetalTrade.fromJson(o, cache))) }
	      } catch {
          case ex : Exception => {
            log.error("Parse exception from Status-Code: " + response.getStatus() + " on content: " + content + "; throwing exception...", ex)
            throw new Exception("Service invocation, response parse exception: Status Code: " + response.getStatus() + ", Content: '" + content + "'")
          }
        }
      
    }
    else { // non OK 200 status response
      log.debug("status NOT OK 200, throwing exception...")

      val obj = JSONConversions.parseJSON(content)

      val err = (obj) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => Result.fromJson(o, new DeserialisationHelper) }
        err match {
          case er : Result => {
            log.error("error response: " + er.message  + " { " + er.toString + " } status: " + response.getStatus)
            val ex = new Exception(er.message  + " { " + er.toString + " } status: " + response.getStatus)
            //ex.setStackTrace(er.stackTrace) // todo, need to add server stack trace, probably to customer application exception class
            throw ex
          }
          case _ => {
            log.error("unknown response, not an error response, content: " + content)
            throw new Exception("Unhandled response received, content: " + content)
          }
        }
    }
  }
  
  def registerDocumentCreationInTrade(tradeId: com.trafigura.edm.shared.types.TitanId, lang: String, docType: String, version: org.joda.time.DateTime) = registerDocumentCreationInTrade(tradeId, lang, docType, version,null)
  def registerDocumentCreationInTrade(tradeId: com.trafigura.edm.shared.types.TitanId, lang: String, docType: String, version: org.joda.time.DateTime, securityContext:SecurityContext = null): Boolean = {
    val _userHeader = if (securityContext != null) { securityContext.user } else { null }
    val response = resource.registerDocumentCreationInTrade(_userHeader, CaptureTradesJSON.serializeRegisterDocumentCreationInTrade(tradeId, lang, docType, version).toString)
    val content = response.asInstanceOf[ClientResponse[String]].getEntity(classOf[String])

    log.debug("Completed call to registerDocumentCreationInTrade: " + response.getStatus() + " - " + content)

    if (response.getStatus() == Response.Status.OK.getStatusCode()) {
      
	      try {
          val obj = JSONConversions.parseJSON(content)
          val cache = new DeserialisationHelper
          JSONConversions.optional[Boolean](obj, false)
	      } catch {
          case ex : Exception => {
            log.error("Parse exception from Status-Code: " + response.getStatus() + " on content: " + content + "; throwing exception...", ex)
            throw new Exception("Service invocation, response parse exception: Status Code: " + response.getStatus() + ", Content: '" + content + "'")
          }
        }
      
    }
    else { // non OK 200 status response
      log.debug("status NOT OK 200, throwing exception...")

      val obj = JSONConversions.parseJSON(content)

      val err = (obj) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => Result.fromJson(o, new DeserialisationHelper) }
        err match {
          case er : Result => {
            log.error("error response: " + er.message  + " { " + er.toString + " } status: " + response.getStatus)
            val ex = new Exception(er.message  + " { " + er.toString + " } status: " + response.getStatus)
            //ex.setStackTrace(er.stackTrace) // todo, need to add server stack trace, probably to customer application exception class
            throw ex
          }
          case _ => {
            log.error("unknown response, not an error response, content: " + content)
            throw new Exception("Unhandled response received, content: " + content)
          }
        }
    }
  }
  
}

// Wrap a CaptureTrades as a CaptureTradesResource (e.g. to be
// exposed by a JAX-RS implementation).

class CaptureTradesResourceStub(val target: CaptureTrades, filters: java.util.List[ServiceFilter])
    extends AbstractResourceStub(filters)
    with CaptureTradesResource {

  def this(target: CaptureTrades) = this(target, new java.util.ArrayList[ServiceFilter])

  requireFilters("com.trafigura.tradinghub.support.PermissionFilter","com.trafigura.services.security.ServiceOperationFilterBase")

  
  def update(_userHeader:String, in: String): Response = {

    try {
    val params = new JSONObject(in)
     val res = 
      CaptureTradesJSON.dispatch(target, filters.toSeq, "Update", params, buildSecurityContext(_userHeader))

    
    Response.ok(JSONConversions.stringifyJSON(res.opt("result"))).build
    
    } catch {
      case ex:Throwable => generateErrorEntity(ex)
    }
  }
  
  def create(_userHeader:String, in: String): Response = {

    try {
    val params = new JSONObject(in)
     val res = 
      CaptureTradesJSON.dispatch(target, filters.toSeq, "Create", params, buildSecurityContext(_userHeader))

    
    Response.ok(JSONConversions.stringifyJSON(res.opt("result"))).build
    
    } catch {
      case ex:Throwable => generateErrorEntity(ex)
    }
  }
  
  def cancel(_userHeader:String, in: String): Response = {

    try {
    val params = new JSONObject(in)
     val res = 
      CaptureTradesJSON.dispatch(target, filters.toSeq, "Cancel", params, buildSecurityContext(_userHeader))

    
    Response.ok(JSONConversions.stringifyJSON(res.opt("result"))).build
    
    } catch {
      case ex:Throwable => generateErrorEntity(ex)
    }
  }
  
  def complete(_userHeader:String, in: String): Response = {

    try {
    val params = new JSONObject(in)
     val res = 
      CaptureTradesJSON.dispatch(target, filters.toSeq, "Complete", params, buildSecurityContext(_userHeader))

    
    Response.ok(JSONConversions.stringifyJSON(res.opt("result"))).build
    
    } catch {
      case ex:Throwable => generateErrorEntity(ex)
    }
  }
  
  def calculatePremia(_userHeader:String, in: String): Response = {

    try {
    val params = new JSONObject(in)
     val res = 
      CaptureTradesJSON.dispatch(target, filters.toSeq, "CalculatePremia", params, buildSecurityContext(_userHeader))

    
    Response.ok(JSONConversions.stringifyJSON(res.opt("result"))).build
    
    } catch {
      case ex:Throwable => generateErrorEntity(ex)
    }
  }
  
  def registerDocumentCreationInTrade(_userHeader:String, in: String): Response = {

    try {
    val params = new JSONObject(in)
     val res = 
      CaptureTradesJSON.dispatch(target, filters.toSeq, "RegisterDocumentCreationInTrade", params, buildSecurityContext(_userHeader))

    
    Response.ok(JSONConversions.stringifyJSON(res.opt("result"))).build
    
    } catch {
      case ex:Throwable => generateErrorEntity(ex)
    }
  }
  
}
