/**
 * WARNING: This file was automatically generated by the Trading Hub tooling version 2.15.
 * Any manual changes may be overwritten and lost!
 */


// Generated from model_service_locator.rb

package com.trafigura.tradecapture.internal.permissionservice

import com.trafigura.tradinghub.support._
import com.trafigura.tradinghub.discovery._
import org.jboss.resteasy.client._

import com.trafigura.tradecapture.internal.permissionservice._


/**
 * Locator for finding RoleService instances.
 */
trait RoleServiceLocator {
  /**
   * Provides a proxy for the given operation to run.
   */
  def proxy:RoleService
}

class LocatableRoleService(val locator:RoleServiceLocator) extends RoleService {
  
    def create(role: com.trafigura.tradecapture.internal.permissionservice.Role): com.trafigura.tradecapture.internal.permissionservice.PermissionResult =
      locator.proxy.create(role)
  
    def get(oid: Int): com.trafigura.tradecapture.internal.permissionservice.Role =
      locator.proxy.get(oid)
  
    def getAll(): List[com.trafigura.tradecapture.internal.permissionservice.Role] =
      locator.proxy.getAll()
  
    def update(role: com.trafigura.tradecapture.internal.permissionservice.Role): com.trafigura.tradecapture.internal.permissionservice.PermissionResult =
      locator.proxy.update(role)
  
    def delete(oid: Int): Boolean =
      locator.proxy.delete(oid)
  
    def getRoleGroups(oid: Int): List[com.trafigura.tradecapture.internal.permissionservice.Group] =
      locator.proxy.getRoleGroups(oid)
  
    def addPermissionRole(permission: com.trafigura.tradecapture.internal.permissionservice.Permission, role: com.trafigura.tradecapture.internal.permissionservice.Role): com.trafigura.tradecapture.internal.permissionservice.PermissionRole =
      locator.proxy.addPermissionRole(permission, role)
  
    def removePermissionRole(permission: com.trafigura.tradecapture.internal.permissionservice.Permission, role: com.trafigura.tradecapture.internal.permissionservice.Role): Boolean =
      locator.proxy.removePermissionRole(permission, role)
  
    def getRoleUsers(oid: Int): List[com.trafigura.tradecapture.internal.permissionservice.User] =
      locator.proxy.getRoleUsers(oid)
  
    def getDirectRoleUsers(oid: Int): List[com.trafigura.tradecapture.internal.permissionservice.User] =
      locator.proxy.getDirectRoleUsers(oid)
  
}