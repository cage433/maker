/**
 * WARNING: This file was automatically generated by the Trading Hub tooling version 2.15.
 * Any manual changes may be overwritten and lost!
 */


// Generated from model_service_json.rb

package com.trafigura.tradecapture.internal.refinedmetaltradeservice

import com.trafigura.tradecapture.internal.refinedmetaltradeservice._

import org.codehaus.jettison.json.JSONObject
import com.trafigura.tradinghub.support._

// JSON support for SyncTrades

object SyncTradesJSON extends JSONServiceDispatcher[SyncTrades] {
  def serviceName = "TradeCapture.Internal.RefinedMetalTradeService.SyncTrades"

  def decodeOperationName(jsonName:String) = {
    jsonName match {
      case "SyncCompletedTradeWithNeptune" => "SyncCompletedTradeWithNeptune"
      
    }
  }

  def parseParameters(operation:String, params: JSONObject) = {
    operation match {
      
      case "SyncCompletedTradeWithNeptune" =>
        
          val cache = new DeserialisationHelper
          Map("neptuneId" -> (JSONConversions.optional[String](params.opt("NeptuneId"), null)))
        
      
    }
  }

  def invoke(target: SyncTrades, operation: String, params: Map[String, Any]): Any = {
    operation match {
      
      case "SyncCompletedTradeWithNeptune" =>
        target.syncCompletedTradeWithNeptune(params("neptuneId").asInstanceOf[String])
      
    }
  }

  def addResponse(operation:String, jsonResponse:JSONObject, response:Any) = {
    val differentiator = new SerialisationHelper
    operation match {
      
      case "SyncCompletedTradeWithNeptune" =>
        jsonResponse.putOpt("result", (response.asInstanceOf[com.trafigura.tradecapture.internal.refinedmetaltradeservice.SyncResult]) match { case null => null; case o => o.toJson(differentiator) })
      
    }
  }

  
  def serializeSyncCompletedTradeWithNeptune(neptuneId: String): JSONObject = {
    val differentiator = new SerialisationHelper
    val params = new JSONObject
    
      params.putOpt("NeptuneId", neptuneId)
    
    params
  }
  

  class Proxy(val handler: (String, JSONObject) => JSONObject) extends SyncTrades {
  
    def syncCompletedTradeWithNeptune(neptuneId: String): com.trafigura.tradecapture.internal.refinedmetaltradeservice.SyncResult = {
        val request = new JSONObject
        request.put("method", "SyncCompletedTradeWithNeptune")
        
        request.put("params", serializeSyncCompletedTradeWithNeptune(neptuneId))
        
        var routing = null
        val response = handler(routing, request)
        if (response == null) {
          null.asInstanceOf[com.trafigura.tradecapture.internal.refinedmetaltradeservice.SyncResult]   // Doesn't work well with primitive types, but we should only see null in cases like discover anyway
        } else {
          val cache = new DeserialisationHelper
          (response.opt("result")) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.tradecapture.internal.refinedmetaltradeservice.SyncResult.fromJson(o, cache))) }
        }
    }
  
  }
}

