/**
 * WARNING: This file was automatically generated by the Trading Hub tooling version 2.15.
 * Any manual changes may be overwritten and lost!
 */


// Generated from model_object_scala.erb

package com.trafigura.tradecapture.internal.refinedmetal





import com.trafigura.tradinghub.support._
import scala.collection.JavaConversions._




 class Counterparty extends com.trafigura.tradinghub.support.ModelObject  {
  


  
    

var oid:Int = 0
    
    
    

var guid:GUID = null
    
    
    

var expired:Boolean = false
    
    
    

var code:String = null
    
    
    

var mappingCode:String = null
    
    
    

var companyCode:String = null
    
    
    

var name:String = null
    
    
    

var addressId:Int = 0
    
    
    

var address:String = null
    
    
    

var nonKYC:Boolean = false
    
    
    

var postcode:String = null
    
    
    

var phoneNumber:String = null
    
    
    

var faxNumber:String = null
    
    
    

var accountNumber:String = null
    
    
    

var contactName:String = null
    
    
    

var refDataBaseId:Int = 0
    
    





  override def equals(o: Any) = o match {
    case r: AnyRef =>
        if (o.isInstanceOf[com.trafigura.tradecapture.internal.refinedmetal.Counterparty]) {
            val that = r.asInstanceOf[com.trafigura.tradecapture.internal.refinedmetal.Counterparty]
            that.canEqual(this) && this.accountNumber == that.accountNumber && this.address == that.address && this.addressId == that.addressId && this.code == that.code && this.companyCode == that.companyCode && this.contactName == that.contactName && this.expired == that.expired && this.faxNumber == that.faxNumber && this.guid == that.guid && this.mappingCode == that.mappingCode && this.name == that.name && this.nonKYC == that.nonKYC && this.oid == that.oid && this.phoneNumber == that.phoneNumber && this.postcode == that.postcode && this.refDataBaseId == that.refDataBaseId &&  true
        }
        else false
    case _ => false
  }

  override def canEqual(that : Any) = that.isInstanceOf[com.trafigura.tradecapture.internal.refinedmetal.Counterparty]

  override def hashCode = {
    (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 *  1
    ) +
         (if (accountNumber == null) 0 else accountNumber.hashCode) 
    ) +
         (if (address == null) 0 else address.hashCode) 
    ) +
         addressId.hashCode
        
    ) +
         (if (code == null) 0 else code.hashCode) 
    ) +
         (if (companyCode == null) 0 else companyCode.hashCode) 
    ) +
         (if (contactName == null) 0 else contactName.hashCode) 
    ) +
         expired.hashCode
        
    ) +
         (if (faxNumber == null) 0 else faxNumber.hashCode) 
    ) +
         (if (guid == null) 0 else guid.hashCode) 
    ) +
         (if (mappingCode == null) 0 else mappingCode.hashCode) 
    ) +
         (if (name == null) 0 else name.hashCode) 
    ) +
         nonKYC.hashCode
        
    ) +
         oid.hashCode
        
    ) +
         (if (phoneNumber == null) 0 else phoneNumber.hashCode) 
    ) +
         (if (postcode == null) 0 else postcode.hashCode) 
    ) +
         refDataBaseId.hashCode
        
    
  }

  override def toString = {
    "{com.trafigura.tradecapture.internal.refinedmetal.Counterparty: " + "" + "accountNumber = " + accountNumber + ", " + "address = " + address + ", " + "addressId = " + addressId + ", " + "code = " + code + ", " + "companyCode = " + companyCode + ", " + "contactName = " + contactName + ", " + "expired = " + expired + ", " + "faxNumber = " + faxNumber + ", " + "guid = " + guid + ", " + "mappingCode = " + mappingCode + ", " + "name = " + name + ", " + "nonKYC = " + nonKYC + ", " + "oid = " + oid + ", " + "phoneNumber = " + phoneNumber + ", " + "postcode = " + postcode + ", " + "refDataBaseId = " + refDataBaseId +  "}"
  }


  
         def toJson() : org.codehaus.jettison.json.JSONObject = {
      toJson(new SerialisationHelper)
    }

     def toJson(differentiator: SerialisationHelper) : org.codehaus.jettison.json.JSONObject = {
        var result = new org.codehaus.jettison.json.JSONObject();

        result.put("_node", differentiator.idFor(this))

        result.put("Type", "TradeCapture.Internal.RefinedMetal.Counterparty@1@1.0")
        
          
          
          
          
            result.putOpt("Oid", this.oid);
          
        
          
          
          
          
            result.putOpt("Guid", if (this.guid == null) null else this.guid.toJson);
          
        
          
          
          
          
            result.putOpt("Expired", this.expired);
          
        
          
          
          
          
            result.putOpt("Code", this.code);
          
        
          
          
          
          
            result.putOpt("MappingCode", this.mappingCode);
          
        
          
          
          
          
            result.putOpt("CompanyCode", this.companyCode);
          
        
          
          
          
          
            result.putOpt("Name", this.name);
          
        
          
          
          
          
            result.putOpt("AddressId", this.addressId);
          
        
          
          
          
          
            result.putOpt("Address", this.address);
          
        
          
          
          
          
            result.putOpt("NonKYC", this.nonKYC);
          
        
          
          
          
          
            result.putOpt("Postcode", this.postcode);
          
        
          
          
          
          
            result.putOpt("PhoneNumber", this.phoneNumber);
          
        
          
          
          
          
            result.putOpt("FaxNumber", this.faxNumber);
          
        
          
          
          
          
            result.putOpt("AccountNumber", this.accountNumber);
          
        
          
          
          
          
            result.putOpt("ContactName", this.contactName);
          
        
          
          
          
          
            result.putOpt("RefDataBaseId", this.refDataBaseId);
          
        
        return result;
    }

     def loadJson(jobj : org.codehaus.jettison.json.JSONObject, cache: DeserialisationHelper) = {
        
        
          
              oid = JSONConversions.optional[Int](jobj.opt("Oid"), 0)
          
              guid = if (jobj.opt("Guid") == null) null else GUID(JSONConversions.optional[String](jobj.opt("Guid"), null))
          
              expired = JSONConversions.optional[Boolean](jobj.opt("Expired"), false)
          
              code = JSONConversions.optional[String](jobj.opt("Code"), null)
          
              mappingCode = JSONConversions.optional[String](jobj.opt("MappingCode"), null)
          
              companyCode = JSONConversions.optional[String](jobj.opt("CompanyCode"), null)
          
              name = JSONConversions.optional[String](jobj.opt("Name"), null)
          
              addressId = JSONConversions.optional[Int](jobj.opt("AddressId"), 0)
          
              address = JSONConversions.optional[String](jobj.opt("Address"), null)
          
              nonKYC = JSONConversions.optional[Boolean](jobj.opt("NonKYC"), false)
          
              postcode = JSONConversions.optional[String](jobj.opt("Postcode"), null)
          
              phoneNumber = JSONConversions.optional[String](jobj.opt("PhoneNumber"), null)
          
              faxNumber = JSONConversions.optional[String](jobj.opt("FaxNumber"), null)
          
              accountNumber = JSONConversions.optional[String](jobj.opt("AccountNumber"), null)
          
              contactName = JSONConversions.optional[String](jobj.opt("ContactName"), null)
          
              refDataBaseId = jobj.optInt("RefDataBaseId")
          
        
    }

  
}

object Counterparty {
  def version = ModelVersion("1")
  def wireFormatVersion = ModelVersion("1.0")

  
        val jsonTypeName = "TradeCapture.Internal.RefinedMetal.Counterparty"

    def fromJson(jobj : org.codehaus.jettison.json.JSONObject, cache: DeserialisationHelper = new DeserialisationHelper) : com.trafigura.tradecapture.internal.refinedmetal.Counterparty = {
      val v = TypeHolder(jobj.optString("Type"))

      v.assertModelVersion(version, "com.trafigura.tradecapture.internal.refinedmetal.Counterparty")
      v.assertWireFormatVersion(wireFormatVersion, "com.trafigura.tradecapture.internal.refinedmetal.Counterparty")

      
        
            val result = new com.trafigura.tradecapture.internal.refinedmetal.Counterparty()
            result.loadJson(jobj, cache)
            result
        
      
    }

  

  

  
    def apply(oid: Int = 0, guid: GUID = null, expired: Boolean = false, code: String = null, mappingCode: String = null, companyCode: String = null, name: String = null, addressId: Int = 0, address: String = null, nonKYC: Boolean = false, postcode: String = null, phoneNumber: String = null, faxNumber: String = null, accountNumber: String = null, contactName: String = null, refDataBaseId: Int = 0) = {
      val res = new com.trafigura.tradecapture.internal.refinedmetal.Counterparty
      
        res.oid = oid
      
        res.guid = guid
      
        res.expired = expired
      
        res.code = code
      
        res.mappingCode = mappingCode
      
        res.companyCode = companyCode
      
        res.name = name
      
        res.addressId = addressId
      
        res.address = address
      
        res.nonKYC = nonKYC
      
        res.postcode = postcode
      
        res.phoneNumber = phoneNumber
      
        res.faxNumber = faxNumber
      
        res.accountNumber = accountNumber
      
        res.contactName = contactName
      
        res.refDataBaseId = refDataBaseId
      
      res
    }
  
}
