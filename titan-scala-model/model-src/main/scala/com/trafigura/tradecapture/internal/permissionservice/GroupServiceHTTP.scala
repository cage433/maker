/**
 * WARNING: This file was automatically generated by the Trading Hub tooling version 2.15.
 * Any manual changes may be overwritten and lost!
 */


// Generated from model_service_http.rb

package com.trafigura.tradecapture.internal.permissionservice

import com.trafigura.tradecapture.internal.permissionservice._

import org.codehaus.jettison.json.JSONObject
import com.trafigura.tradinghub.support._
import javax.ws.rs._
import javax.ws.rs.core.Response
import org.jboss.resteasy.client.ClientResponse
import org.jboss.resteasy.annotations._
import scala.collection.JavaConversions._

// Some of the objects from the system namespace responses are
// used in handwritten code, so this hybrid resolution is required.
import com.trafigura.responses._


// JAX-RS support for GroupService


// A resource trait corresponding to GroupService

@Path("/GroupService")
trait GroupServiceResource {
  
  @Path("Create")
  @POST @Consumes(Array("application/json")) @Produces(Array("application/json"))
  def create(@HeaderParam("User") _userHeader:String, in: String): Response
  
  @Path("Get")
  @POST @Consumes(Array("application/json")) @Produces(Array("application/json"))
  def get(@HeaderParam("User") _userHeader:String, in: String): Response
  
  @Path("GetAll")
  @POST  @Produces(Array("application/json"))
  def getAll(@HeaderParam("User") _userHeader:String): Response
  
  @Path("Update")
  @POST @Consumes(Array("application/json")) @Produces(Array("application/json"))
  def update(@HeaderParam("User") _userHeader:String, in: String): Response
  
  @Path("Delete")
  @POST @Consumes(Array("application/json")) @Produces(Array("application/json"))
  def delete(@HeaderParam("User") _userHeader:String, in: String): Response
  
  @Path("AddUser")
  @POST @Consumes(Array("application/json")) @Produces(Array("application/json"))
  def addUser(@HeaderParam("User") _userHeader:String, in: String): Response
  
  @Path("RemoveUser")
  @POST @Consumes(Array("application/json")) @Produces(Array("application/json"))
  def removeUser(@HeaderParam("User") _userHeader:String, in: String): Response
  
  @Path("GetGroupUsers")
  @POST @Consumes(Array("application/json")) @Produces(Array("application/json"))
  def getGroupUsers(@HeaderParam("User") _userHeader:String, in: String): Response
  
  @Path("GetGroupRoles")
  @POST @Consumes(Array("application/json")) @Produces(Array("application/json"))
  def getGroupRoles(@HeaderParam("User") _userHeader:String, in: String): Response
  
  @Path("AddRole")
  @POST @Consumes(Array("application/json")) @Produces(Array("application/json"))
  def addRole(@HeaderParam("User") _userHeader:String, in: String): Response
  
  @Path("RemoveRole")
  @POST @Consumes(Array("application/json")) @Produces(Array("application/json"))
  def removeRole(@HeaderParam("User") _userHeader:String, in: String): Response
  
}


// Wrap a GroupServiceResource (provided by RESTEasy's client
// support) as a GroupService
//
// Note: will throw an exception on parse/status code errors, exception will contain details of the error
//
class GroupServiceResourceProxy(val resource: GroupServiceResource) extends GroupService {

  val log = org.slf4j.LoggerFactory.getLogger(this.getClass.getName)

  
  def create(group: com.trafigura.tradecapture.internal.permissionservice.Group) = create(group,null)
  def create(group: com.trafigura.tradecapture.internal.permissionservice.Group, securityContext:SecurityContext = null): com.trafigura.tradecapture.internal.permissionservice.PermissionResult = {
    val _userHeader = if (securityContext != null) { securityContext.user } else { null }
    val response = resource.create(_userHeader, GroupServiceJSON.serializeCreate(group).toString)
    val content = response.asInstanceOf[ClientResponse[String]].getEntity(classOf[String])

    log.debug("Completed call to create: " + response.getStatus() + " - " + content)

    if (response.getStatus() == Response.Status.OK.getStatusCode()) {
      
	      try {
          val obj = JSONConversions.parseJSON(content)
          val cache = new DeserialisationHelper
          (obj) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.tradecapture.internal.permissionservice.PermissionResult.fromJson(o, cache))) }
	      } catch {
          case ex : Exception => {
            log.error("Parse exception from Status-Code: " + response.getStatus() + " on content: " + content + "; throwing exception...", ex)
            throw new Exception("Service invocation, response parse exception: Status Code: " + response.getStatus() + ", Content: '" + content + "'")
          }
        }
      
    }
    else { // non OK 200 status response
      log.debug("status NOT OK 200, throwing exception...")

      val obj = JSONConversions.parseJSON(content)

      val err = (obj) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => Result.fromJson(o, new DeserialisationHelper) }
        err match {
          case er : Result => {
            log.error("error response: " + er.message  + " { " + er.toString + " } status: " + response.getStatus)
            val ex = new Exception(er.message  + " { " + er.toString + " } status: " + response.getStatus)
            //ex.setStackTrace(er.stackTrace) // todo, need to add server stack trace, probably to customer application exception class
            throw ex
          }
          case _ => {
            log.error("unknown response, not an error response, content: " + content)
            throw new Exception("Unhandled response received, content: " + content)
          }
        }
    }
  }
  
  def get(oid: Int) = get(oid,null)
  def get(oid: Int, securityContext:SecurityContext = null): com.trafigura.tradecapture.internal.permissionservice.Group = {
    val _userHeader = if (securityContext != null) { securityContext.user } else { null }
    val response = resource.get(_userHeader, GroupServiceJSON.serializeGet(oid).toString)
    val content = response.asInstanceOf[ClientResponse[String]].getEntity(classOf[String])

    log.debug("Completed call to get: " + response.getStatus() + " - " + content)

    if (response.getStatus() == Response.Status.OK.getStatusCode()) {
      
	      try {
          val obj = JSONConversions.parseJSON(content)
          val cache = new DeserialisationHelper
          (obj) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.tradecapture.internal.permissionservice.Group.fromJson(o, cache))) }
	      } catch {
          case ex : Exception => {
            log.error("Parse exception from Status-Code: " + response.getStatus() + " on content: " + content + "; throwing exception...", ex)
            throw new Exception("Service invocation, response parse exception: Status Code: " + response.getStatus() + ", Content: '" + content + "'")
          }
        }
      
    }
    else { // non OK 200 status response
      log.debug("status NOT OK 200, throwing exception...")

      val obj = JSONConversions.parseJSON(content)

      val err = (obj) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => Result.fromJson(o, new DeserialisationHelper) }
        err match {
          case er : Result => {
            log.error("error response: " + er.message  + " { " + er.toString + " } status: " + response.getStatus)
            val ex = new Exception(er.message  + " { " + er.toString + " } status: " + response.getStatus)
            //ex.setStackTrace(er.stackTrace) // todo, need to add server stack trace, probably to customer application exception class
            throw ex
          }
          case _ => {
            log.error("unknown response, not an error response, content: " + content)
            throw new Exception("Unhandled response received, content: " + content)
          }
        }
    }
  }
  
  def getAll() = getAll(null)
  def getAll( securityContext:SecurityContext = null): List[com.trafigura.tradecapture.internal.permissionservice.Group] = {
    val _userHeader = if (securityContext != null) { securityContext.user } else { null }
    val response = resource.getAll(_userHeader)
    val content = response.asInstanceOf[ClientResponse[String]].getEntity(classOf[String])

    log.debug("Completed call to getAll: " + response.getStatus() + " - " + content)

    if (response.getStatus() == Response.Status.OK.getStatusCode()) {
      
	      try {
          val obj = JSONConversions.parseJSON(content)
          val cache = new DeserialisationHelper
          JSONConversions.optionalList(obj, x => (x) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.tradecapture.internal.permissionservice.Group.fromJson(o, cache))) })
	      } catch {
          case ex : Exception => {
            log.error("Parse exception from Status-Code: " + response.getStatus() + " on content: " + content + "; throwing exception...", ex)
            throw new Exception("Service invocation, response parse exception: Status Code: " + response.getStatus() + ", Content: '" + content + "'")
          }
        }
      
    }
    else { // non OK 200 status response
      log.debug("status NOT OK 200, throwing exception...")

      val obj = JSONConversions.parseJSON(content)

      val err = (obj) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => Result.fromJson(o, new DeserialisationHelper) }
        err match {
          case er : Result => {
            log.error("error response: " + er.message  + " { " + er.toString + " } status: " + response.getStatus)
            val ex = new Exception(er.message  + " { " + er.toString + " } status: " + response.getStatus)
            //ex.setStackTrace(er.stackTrace) // todo, need to add server stack trace, probably to customer application exception class
            throw ex
          }
          case _ => {
            log.error("unknown response, not an error response, content: " + content)
            throw new Exception("Unhandled response received, content: " + content)
          }
        }
    }
  }
  
  def update(group: com.trafigura.tradecapture.internal.permissionservice.Group) = update(group,null)
  def update(group: com.trafigura.tradecapture.internal.permissionservice.Group, securityContext:SecurityContext = null): com.trafigura.tradecapture.internal.permissionservice.PermissionResult = {
    val _userHeader = if (securityContext != null) { securityContext.user } else { null }
    val response = resource.update(_userHeader, GroupServiceJSON.serializeUpdate(group).toString)
    val content = response.asInstanceOf[ClientResponse[String]].getEntity(classOf[String])

    log.debug("Completed call to update: " + response.getStatus() + " - " + content)

    if (response.getStatus() == Response.Status.OK.getStatusCode()) {
      
	      try {
          val obj = JSONConversions.parseJSON(content)
          val cache = new DeserialisationHelper
          (obj) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.tradecapture.internal.permissionservice.PermissionResult.fromJson(o, cache))) }
	      } catch {
          case ex : Exception => {
            log.error("Parse exception from Status-Code: " + response.getStatus() + " on content: " + content + "; throwing exception...", ex)
            throw new Exception("Service invocation, response parse exception: Status Code: " + response.getStatus() + ", Content: '" + content + "'")
          }
        }
      
    }
    else { // non OK 200 status response
      log.debug("status NOT OK 200, throwing exception...")

      val obj = JSONConversions.parseJSON(content)

      val err = (obj) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => Result.fromJson(o, new DeserialisationHelper) }
        err match {
          case er : Result => {
            log.error("error response: " + er.message  + " { " + er.toString + " } status: " + response.getStatus)
            val ex = new Exception(er.message  + " { " + er.toString + " } status: " + response.getStatus)
            //ex.setStackTrace(er.stackTrace) // todo, need to add server stack trace, probably to customer application exception class
            throw ex
          }
          case _ => {
            log.error("unknown response, not an error response, content: " + content)
            throw new Exception("Unhandled response received, content: " + content)
          }
        }
    }
  }
  
  def delete(oid: Int) = delete(oid,null)
  def delete(oid: Int, securityContext:SecurityContext = null): Boolean = {
    val _userHeader = if (securityContext != null) { securityContext.user } else { null }
    val response = resource.delete(_userHeader, GroupServiceJSON.serializeDelete(oid).toString)
    val content = response.asInstanceOf[ClientResponse[String]].getEntity(classOf[String])

    log.debug("Completed call to delete: " + response.getStatus() + " - " + content)

    if (response.getStatus() == Response.Status.OK.getStatusCode()) {
      
	      try {
          val obj = JSONConversions.parseJSON(content)
          val cache = new DeserialisationHelper
          JSONConversions.optional[Boolean](obj, false)
	      } catch {
          case ex : Exception => {
            log.error("Parse exception from Status-Code: " + response.getStatus() + " on content: " + content + "; throwing exception...", ex)
            throw new Exception("Service invocation, response parse exception: Status Code: " + response.getStatus() + ", Content: '" + content + "'")
          }
        }
      
    }
    else { // non OK 200 status response
      log.debug("status NOT OK 200, throwing exception...")

      val obj = JSONConversions.parseJSON(content)

      val err = (obj) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => Result.fromJson(o, new DeserialisationHelper) }
        err match {
          case er : Result => {
            log.error("error response: " + er.message  + " { " + er.toString + " } status: " + response.getStatus)
            val ex = new Exception(er.message  + " { " + er.toString + " } status: " + response.getStatus)
            //ex.setStackTrace(er.stackTrace) // todo, need to add server stack trace, probably to customer application exception class
            throw ex
          }
          case _ => {
            log.error("unknown response, not an error response, content: " + content)
            throw new Exception("Unhandled response received, content: " + content)
          }
        }
    }
  }
  
  def addUser(groupOid: Int, userOid: Int) = addUser(groupOid, userOid,null)
  def addUser(groupOid: Int, userOid: Int, securityContext:SecurityContext = null): Boolean = {
    val _userHeader = if (securityContext != null) { securityContext.user } else { null }
    val response = resource.addUser(_userHeader, GroupServiceJSON.serializeAddUser(groupOid, userOid).toString)
    val content = response.asInstanceOf[ClientResponse[String]].getEntity(classOf[String])

    log.debug("Completed call to addUser: " + response.getStatus() + " - " + content)

    if (response.getStatus() == Response.Status.OK.getStatusCode()) {
      
	      try {
          val obj = JSONConversions.parseJSON(content)
          val cache = new DeserialisationHelper
          JSONConversions.optional[Boolean](obj, false)
	      } catch {
          case ex : Exception => {
            log.error("Parse exception from Status-Code: " + response.getStatus() + " on content: " + content + "; throwing exception...", ex)
            throw new Exception("Service invocation, response parse exception: Status Code: " + response.getStatus() + ", Content: '" + content + "'")
          }
        }
      
    }
    else { // non OK 200 status response
      log.debug("status NOT OK 200, throwing exception...")

      val obj = JSONConversions.parseJSON(content)

      val err = (obj) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => Result.fromJson(o, new DeserialisationHelper) }
        err match {
          case er : Result => {
            log.error("error response: " + er.message  + " { " + er.toString + " } status: " + response.getStatus)
            val ex = new Exception(er.message  + " { " + er.toString + " } status: " + response.getStatus)
            //ex.setStackTrace(er.stackTrace) // todo, need to add server stack trace, probably to customer application exception class
            throw ex
          }
          case _ => {
            log.error("unknown response, not an error response, content: " + content)
            throw new Exception("Unhandled response received, content: " + content)
          }
        }
    }
  }
  
  def removeUser(groupOid: Int, userOid: Int) = removeUser(groupOid, userOid,null)
  def removeUser(groupOid: Int, userOid: Int, securityContext:SecurityContext = null): Boolean = {
    val _userHeader = if (securityContext != null) { securityContext.user } else { null }
    val response = resource.removeUser(_userHeader, GroupServiceJSON.serializeRemoveUser(groupOid, userOid).toString)
    val content = response.asInstanceOf[ClientResponse[String]].getEntity(classOf[String])

    log.debug("Completed call to removeUser: " + response.getStatus() + " - " + content)

    if (response.getStatus() == Response.Status.OK.getStatusCode()) {
      
	      try {
          val obj = JSONConversions.parseJSON(content)
          val cache = new DeserialisationHelper
          JSONConversions.optional[Boolean](obj, false)
	      } catch {
          case ex : Exception => {
            log.error("Parse exception from Status-Code: " + response.getStatus() + " on content: " + content + "; throwing exception...", ex)
            throw new Exception("Service invocation, response parse exception: Status Code: " + response.getStatus() + ", Content: '" + content + "'")
          }
        }
      
    }
    else { // non OK 200 status response
      log.debug("status NOT OK 200, throwing exception...")

      val obj = JSONConversions.parseJSON(content)

      val err = (obj) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => Result.fromJson(o, new DeserialisationHelper) }
        err match {
          case er : Result => {
            log.error("error response: " + er.message  + " { " + er.toString + " } status: " + response.getStatus)
            val ex = new Exception(er.message  + " { " + er.toString + " } status: " + response.getStatus)
            //ex.setStackTrace(er.stackTrace) // todo, need to add server stack trace, probably to customer application exception class
            throw ex
          }
          case _ => {
            log.error("unknown response, not an error response, content: " + content)
            throw new Exception("Unhandled response received, content: " + content)
          }
        }
    }
  }
  
  def getGroupUsers(oid: Int) = getGroupUsers(oid,null)
  def getGroupUsers(oid: Int, securityContext:SecurityContext = null): List[com.trafigura.tradecapture.internal.permissionservice.User] = {
    val _userHeader = if (securityContext != null) { securityContext.user } else { null }
    val response = resource.getGroupUsers(_userHeader, GroupServiceJSON.serializeGetGroupUsers(oid).toString)
    val content = response.asInstanceOf[ClientResponse[String]].getEntity(classOf[String])

    log.debug("Completed call to getGroupUsers: " + response.getStatus() + " - " + content)

    if (response.getStatus() == Response.Status.OK.getStatusCode()) {
      
	      try {
          val obj = JSONConversions.parseJSON(content)
          val cache = new DeserialisationHelper
          JSONConversions.optionalList(obj, x => (x) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.tradecapture.internal.permissionservice.User.fromJson(o, cache))) })
	      } catch {
          case ex : Exception => {
            log.error("Parse exception from Status-Code: " + response.getStatus() + " on content: " + content + "; throwing exception...", ex)
            throw new Exception("Service invocation, response parse exception: Status Code: " + response.getStatus() + ", Content: '" + content + "'")
          }
        }
      
    }
    else { // non OK 200 status response
      log.debug("status NOT OK 200, throwing exception...")

      val obj = JSONConversions.parseJSON(content)

      val err = (obj) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => Result.fromJson(o, new DeserialisationHelper) }
        err match {
          case er : Result => {
            log.error("error response: " + er.message  + " { " + er.toString + " } status: " + response.getStatus)
            val ex = new Exception(er.message  + " { " + er.toString + " } status: " + response.getStatus)
            //ex.setStackTrace(er.stackTrace) // todo, need to add server stack trace, probably to customer application exception class
            throw ex
          }
          case _ => {
            log.error("unknown response, not an error response, content: " + content)
            throw new Exception("Unhandled response received, content: " + content)
          }
        }
    }
  }
  
  def getGroupRoles(oid: Int) = getGroupRoles(oid,null)
  def getGroupRoles(oid: Int, securityContext:SecurityContext = null): List[com.trafigura.tradecapture.internal.permissionservice.Role] = {
    val _userHeader = if (securityContext != null) { securityContext.user } else { null }
    val response = resource.getGroupRoles(_userHeader, GroupServiceJSON.serializeGetGroupRoles(oid).toString)
    val content = response.asInstanceOf[ClientResponse[String]].getEntity(classOf[String])

    log.debug("Completed call to getGroupRoles: " + response.getStatus() + " - " + content)

    if (response.getStatus() == Response.Status.OK.getStatusCode()) {
      
	      try {
          val obj = JSONConversions.parseJSON(content)
          val cache = new DeserialisationHelper
          JSONConversions.optionalList(obj, x => (x) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.tradecapture.internal.permissionservice.Role.fromJson(o, cache))) })
	      } catch {
          case ex : Exception => {
            log.error("Parse exception from Status-Code: " + response.getStatus() + " on content: " + content + "; throwing exception...", ex)
            throw new Exception("Service invocation, response parse exception: Status Code: " + response.getStatus() + ", Content: '" + content + "'")
          }
        }
      
    }
    else { // non OK 200 status response
      log.debug("status NOT OK 200, throwing exception...")

      val obj = JSONConversions.parseJSON(content)

      val err = (obj) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => Result.fromJson(o, new DeserialisationHelper) }
        err match {
          case er : Result => {
            log.error("error response: " + er.message  + " { " + er.toString + " } status: " + response.getStatus)
            val ex = new Exception(er.message  + " { " + er.toString + " } status: " + response.getStatus)
            //ex.setStackTrace(er.stackTrace) // todo, need to add server stack trace, probably to customer application exception class
            throw ex
          }
          case _ => {
            log.error("unknown response, not an error response, content: " + content)
            throw new Exception("Unhandled response received, content: " + content)
          }
        }
    }
  }
  
  def addRole(groupOid: Int, roleOid: Int) = addRole(groupOid, roleOid,null)
  def addRole(groupOid: Int, roleOid: Int, securityContext:SecurityContext = null): Boolean = {
    val _userHeader = if (securityContext != null) { securityContext.user } else { null }
    val response = resource.addRole(_userHeader, GroupServiceJSON.serializeAddRole(groupOid, roleOid).toString)
    val content = response.asInstanceOf[ClientResponse[String]].getEntity(classOf[String])

    log.debug("Completed call to addRole: " + response.getStatus() + " - " + content)

    if (response.getStatus() == Response.Status.OK.getStatusCode()) {
      
	      try {
          val obj = JSONConversions.parseJSON(content)
          val cache = new DeserialisationHelper
          JSONConversions.optional[Boolean](obj, false)
	      } catch {
          case ex : Exception => {
            log.error("Parse exception from Status-Code: " + response.getStatus() + " on content: " + content + "; throwing exception...", ex)
            throw new Exception("Service invocation, response parse exception: Status Code: " + response.getStatus() + ", Content: '" + content + "'")
          }
        }
      
    }
    else { // non OK 200 status response
      log.debug("status NOT OK 200, throwing exception...")

      val obj = JSONConversions.parseJSON(content)

      val err = (obj) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => Result.fromJson(o, new DeserialisationHelper) }
        err match {
          case er : Result => {
            log.error("error response: " + er.message  + " { " + er.toString + " } status: " + response.getStatus)
            val ex = new Exception(er.message  + " { " + er.toString + " } status: " + response.getStatus)
            //ex.setStackTrace(er.stackTrace) // todo, need to add server stack trace, probably to customer application exception class
            throw ex
          }
          case _ => {
            log.error("unknown response, not an error response, content: " + content)
            throw new Exception("Unhandled response received, content: " + content)
          }
        }
    }
  }
  
  def removeRole(groupOid: Int, roleOid: Int) = removeRole(groupOid, roleOid,null)
  def removeRole(groupOid: Int, roleOid: Int, securityContext:SecurityContext = null): Boolean = {
    val _userHeader = if (securityContext != null) { securityContext.user } else { null }
    val response = resource.removeRole(_userHeader, GroupServiceJSON.serializeRemoveRole(groupOid, roleOid).toString)
    val content = response.asInstanceOf[ClientResponse[String]].getEntity(classOf[String])

    log.debug("Completed call to removeRole: " + response.getStatus() + " - " + content)

    if (response.getStatus() == Response.Status.OK.getStatusCode()) {
      
	      try {
          val obj = JSONConversions.parseJSON(content)
          val cache = new DeserialisationHelper
          JSONConversions.optional[Boolean](obj, false)
	      } catch {
          case ex : Exception => {
            log.error("Parse exception from Status-Code: " + response.getStatus() + " on content: " + content + "; throwing exception...", ex)
            throw new Exception("Service invocation, response parse exception: Status Code: " + response.getStatus() + ", Content: '" + content + "'")
          }
        }
      
    }
    else { // non OK 200 status response
      log.debug("status NOT OK 200, throwing exception...")

      val obj = JSONConversions.parseJSON(content)

      val err = (obj) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => Result.fromJson(o, new DeserialisationHelper) }
        err match {
          case er : Result => {
            log.error("error response: " + er.message  + " { " + er.toString + " } status: " + response.getStatus)
            val ex = new Exception(er.message  + " { " + er.toString + " } status: " + response.getStatus)
            //ex.setStackTrace(er.stackTrace) // todo, need to add server stack trace, probably to customer application exception class
            throw ex
          }
          case _ => {
            log.error("unknown response, not an error response, content: " + content)
            throw new Exception("Unhandled response received, content: " + content)
          }
        }
    }
  }
  
}

// Wrap a GroupService as a GroupServiceResource (e.g. to be
// exposed by a JAX-RS implementation).

class GroupServiceResourceStub(val target: GroupService, filters: java.util.List[ServiceFilter])
    extends AbstractResourceStub(filters)
    with GroupServiceResource {

  def this(target: GroupService) = this(target, new java.util.ArrayList[ServiceFilter])

  requireFilters("com.trafigura.tradinghub.support.PermissionFilter","com.trafigura.services.security.ServiceOperationFilterBase")

  
  def create(_userHeader:String, in: String): Response = {

    try {
    val params = new JSONObject(in)
     val res = 
      GroupServiceJSON.dispatch(target, filters.toSeq, "Create", params, buildSecurityContext(_userHeader))

    
    Response.ok(JSONConversions.stringifyJSON(res.opt("result"))).build
    
    } catch {
      case ex:Throwable => generateErrorEntity(ex)
    }
  }
  
  def get(_userHeader:String, in: String): Response = {

    try {
    val params = new JSONObject(in)
     val res = 
      GroupServiceJSON.dispatch(target, filters.toSeq, "Get", params, buildSecurityContext(_userHeader))

    
    Response.ok(JSONConversions.stringifyJSON(res.opt("result"))).build
    
    } catch {
      case ex:Throwable => generateErrorEntity(ex)
    }
  }
  
  def getAll(_userHeader:String): Response = {

    try {
    val params = new JSONObject()
     val res = 
      GroupServiceJSON.dispatch(target, filters.toSeq, "GetAll", params, buildSecurityContext(_userHeader))

    
    Response.ok(JSONConversions.stringifyJSON(res.opt("result"))).build
    
    } catch {
      case ex:Throwable => generateErrorEntity(ex)
    }
  }
  
  def update(_userHeader:String, in: String): Response = {

    try {
    val params = new JSONObject(in)
     val res = 
      GroupServiceJSON.dispatch(target, filters.toSeq, "Update", params, buildSecurityContext(_userHeader))

    
    Response.ok(JSONConversions.stringifyJSON(res.opt("result"))).build
    
    } catch {
      case ex:Throwable => generateErrorEntity(ex)
    }
  }
  
  def delete(_userHeader:String, in: String): Response = {

    try {
    val params = new JSONObject(in)
     val res = 
      GroupServiceJSON.dispatch(target, filters.toSeq, "Delete", params, buildSecurityContext(_userHeader))

    
    Response.ok(JSONConversions.stringifyJSON(res.opt("result"))).build
    
    } catch {
      case ex:Throwable => generateErrorEntity(ex)
    }
  }
  
  def addUser(_userHeader:String, in: String): Response = {

    try {
    val params = new JSONObject(in)
     val res = 
      GroupServiceJSON.dispatch(target, filters.toSeq, "AddUser", params, buildSecurityContext(_userHeader))

    
    Response.ok(JSONConversions.stringifyJSON(res.opt("result"))).build
    
    } catch {
      case ex:Throwable => generateErrorEntity(ex)
    }
  }
  
  def removeUser(_userHeader:String, in: String): Response = {

    try {
    val params = new JSONObject(in)
     val res = 
      GroupServiceJSON.dispatch(target, filters.toSeq, "RemoveUser", params, buildSecurityContext(_userHeader))

    
    Response.ok(JSONConversions.stringifyJSON(res.opt("result"))).build
    
    } catch {
      case ex:Throwable => generateErrorEntity(ex)
    }
  }
  
  def getGroupUsers(_userHeader:String, in: String): Response = {

    try {
    val params = new JSONObject(in)
     val res = 
      GroupServiceJSON.dispatch(target, filters.toSeq, "GetGroupUsers", params, buildSecurityContext(_userHeader))

    
    Response.ok(JSONConversions.stringifyJSON(res.opt("result"))).build
    
    } catch {
      case ex:Throwable => generateErrorEntity(ex)
    }
  }
  
  def getGroupRoles(_userHeader:String, in: String): Response = {

    try {
    val params = new JSONObject(in)
     val res = 
      GroupServiceJSON.dispatch(target, filters.toSeq, "GetGroupRoles", params, buildSecurityContext(_userHeader))

    
    Response.ok(JSONConversions.stringifyJSON(res.opt("result"))).build
    
    } catch {
      case ex:Throwable => generateErrorEntity(ex)
    }
  }
  
  def addRole(_userHeader:String, in: String): Response = {

    try {
    val params = new JSONObject(in)
     val res = 
      GroupServiceJSON.dispatch(target, filters.toSeq, "AddRole", params, buildSecurityContext(_userHeader))

    
    Response.ok(JSONConversions.stringifyJSON(res.opt("result"))).build
    
    } catch {
      case ex:Throwable => generateErrorEntity(ex)
    }
  }
  
  def removeRole(_userHeader:String, in: String): Response = {

    try {
    val params = new JSONObject(in)
     val res = 
      GroupServiceJSON.dispatch(target, filters.toSeq, "RemoveRole", params, buildSecurityContext(_userHeader))

    
    Response.ok(JSONConversions.stringifyJSON(res.opt("result"))).build
    
    } catch {
      case ex:Throwable => generateErrorEntity(ex)
    }
  }
  
}
