/**
 * WARNING: This file was automatically generated by the Trading Hub tooling version 2.15.
 * Any manual changes may be overwritten and lost!
 */


// Generated from model_service_json.rb

package com.trafigura.tradecapture.internal.permissionservice

import com.trafigura.tradecapture.internal.permissionservice._

import org.codehaus.jettison.json.JSONObject
import com.trafigura.tradinghub.support._

// JSON support for GroupService

object GroupServiceJSON extends JSONServiceDispatcher[GroupService] {
  def serviceName = "TradeCapture.Internal.PermissionService.GroupService"

  def decodeOperationName(jsonName:String) = {
    jsonName match {
      case "Create" => "Create"
      case "Get" => "Get"
      case "GetAll" => "GetAll"
      case "Update" => "Update"
      case "Delete" => "Delete"
      case "AddUser" => "AddUser"
      case "RemoveUser" => "RemoveUser"
      case "GetGroupUsers" => "GetGroupUsers"
      case "GetGroupRoles" => "GetGroupRoles"
      case "AddRole" => "AddRole"
      case "RemoveRole" => "RemoveRole"
      
    }
  }

  def parseParameters(operation:String, params: JSONObject) = {
    operation match {
      
      case "Create" =>
        
          val cache = new DeserialisationHelper
          Map("group" -> ((params.opt("Group")) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.tradecapture.internal.permissionservice.Group.fromJson(o, cache))) }))
        
      
      case "Get" =>
        
          val cache = new DeserialisationHelper
          Map("oid" -> (JSONConversions.optional[Int](params.opt("Oid"), 0)))
        
      
      case "GetAll" =>
        
          Map()
        
      
      case "Update" =>
        
          val cache = new DeserialisationHelper
          Map("group" -> ((params.opt("Group")) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.tradecapture.internal.permissionservice.Group.fromJson(o, cache))) }))
        
      
      case "Delete" =>
        
          val cache = new DeserialisationHelper
          Map("oid" -> (JSONConversions.optional[Int](params.opt("Oid"), 0)))
        
      
      case "AddUser" =>
        
          val cache = new DeserialisationHelper
          Map("groupOid" -> (JSONConversions.optional[Int](params.opt("GroupOid"), 0)), "userOid" -> (JSONConversions.optional[Int](params.opt("UserOid"), 0)))
        
      
      case "RemoveUser" =>
        
          val cache = new DeserialisationHelper
          Map("groupOid" -> (JSONConversions.optional[Int](params.opt("GroupOid"), 0)), "userOid" -> (JSONConversions.optional[Int](params.opt("UserOid"), 0)))
        
      
      case "GetGroupUsers" =>
        
          val cache = new DeserialisationHelper
          Map("oid" -> (JSONConversions.optional[Int](params.opt("Oid"), 0)))
        
      
      case "GetGroupRoles" =>
        
          val cache = new DeserialisationHelper
          Map("oid" -> (JSONConversions.optional[Int](params.opt("Oid"), 0)))
        
      
      case "AddRole" =>
        
          val cache = new DeserialisationHelper
          Map("groupOid" -> (JSONConversions.optional[Int](params.opt("GroupOid"), 0)), "roleOid" -> (JSONConversions.optional[Int](params.opt("RoleOid"), 0)))
        
      
      case "RemoveRole" =>
        
          val cache = new DeserialisationHelper
          Map("groupOid" -> (JSONConversions.optional[Int](params.opt("GroupOid"), 0)), "roleOid" -> (JSONConversions.optional[Int](params.opt("RoleOid"), 0)))
        
      
    }
  }

  def invoke(target: GroupService, operation: String, params: Map[String, Any]): Any = {
    operation match {
      
      case "Create" =>
        target.create(params("group").asInstanceOf[com.trafigura.tradecapture.internal.permissionservice.Group])
      
      case "Get" =>
        target.get(params("oid").asInstanceOf[Int])
      
      case "GetAll" =>
        target.getAll()
      
      case "Update" =>
        target.update(params("group").asInstanceOf[com.trafigura.tradecapture.internal.permissionservice.Group])
      
      case "Delete" =>
        target.delete(params("oid").asInstanceOf[Int])
      
      case "AddUser" =>
        target.addUser(params("groupOid").asInstanceOf[Int], params("userOid").asInstanceOf[Int])
      
      case "RemoveUser" =>
        target.removeUser(params("groupOid").asInstanceOf[Int], params("userOid").asInstanceOf[Int])
      
      case "GetGroupUsers" =>
        target.getGroupUsers(params("oid").asInstanceOf[Int])
      
      case "GetGroupRoles" =>
        target.getGroupRoles(params("oid").asInstanceOf[Int])
      
      case "AddRole" =>
        target.addRole(params("groupOid").asInstanceOf[Int], params("roleOid").asInstanceOf[Int])
      
      case "RemoveRole" =>
        target.removeRole(params("groupOid").asInstanceOf[Int], params("roleOid").asInstanceOf[Int])
      
    }
  }

  def addResponse(operation:String, jsonResponse:JSONObject, response:Any) = {
    val differentiator = new SerialisationHelper
    operation match {
      
      case "Create" =>
        jsonResponse.putOpt("result", (response.asInstanceOf[com.trafigura.tradecapture.internal.permissionservice.PermissionResult]) match { case null => null; case o => o.toJson(differentiator) })
      
      case "Get" =>
        jsonResponse.putOpt("result", (response.asInstanceOf[com.trafigura.tradecapture.internal.permissionservice.Group]) match { case null => null; case o => o.toJson(differentiator) })
      
      case "GetAll" =>
        jsonResponse.putOpt("result", new org.codehaus.jettison.json.JSONArray(if(response.asInstanceOf[List[com.trafigura.tradecapture.internal.permissionservice.Group]] == null) new java.util.ArrayList() else java.util.Arrays.asList(response.asInstanceOf[List[com.trafigura.tradecapture.internal.permissionservice.Group]].map(t => (t) match { case null => null; case o => o.toJson(differentiator) }).toArray: _*)))
      
      case "Update" =>
        jsonResponse.putOpt("result", (response.asInstanceOf[com.trafigura.tradecapture.internal.permissionservice.PermissionResult]) match { case null => null; case o => o.toJson(differentiator) })
      
      case "Delete" =>
        jsonResponse.putOpt("result", response.asInstanceOf[Boolean])
      
      case "AddUser" =>
        jsonResponse.putOpt("result", response.asInstanceOf[Boolean])
      
      case "RemoveUser" =>
        jsonResponse.putOpt("result", response.asInstanceOf[Boolean])
      
      case "GetGroupUsers" =>
        jsonResponse.putOpt("result", new org.codehaus.jettison.json.JSONArray(if(response.asInstanceOf[List[com.trafigura.tradecapture.internal.permissionservice.User]] == null) new java.util.ArrayList() else java.util.Arrays.asList(response.asInstanceOf[List[com.trafigura.tradecapture.internal.permissionservice.User]].map(t => (t) match { case null => null; case o => o.toJson(differentiator) }).toArray: _*)))
      
      case "GetGroupRoles" =>
        jsonResponse.putOpt("result", new org.codehaus.jettison.json.JSONArray(if(response.asInstanceOf[List[com.trafigura.tradecapture.internal.permissionservice.Role]] == null) new java.util.ArrayList() else java.util.Arrays.asList(response.asInstanceOf[List[com.trafigura.tradecapture.internal.permissionservice.Role]].map(t => (t) match { case null => null; case o => o.toJson(differentiator) }).toArray: _*)))
      
      case "AddRole" =>
        jsonResponse.putOpt("result", response.asInstanceOf[Boolean])
      
      case "RemoveRole" =>
        jsonResponse.putOpt("result", response.asInstanceOf[Boolean])
      
    }
  }

  
  def serializeCreate(group: com.trafigura.tradecapture.internal.permissionservice.Group): JSONObject = {
    val differentiator = new SerialisationHelper
    val params = new JSONObject
    
      params.putOpt("Group", (group) match { case null => null; case o => o.toJson(differentiator) })
    
    params
  }
  
  def serializeGet(oid: Int): JSONObject = {
    val differentiator = new SerialisationHelper
    val params = new JSONObject
    
      params.putOpt("Oid", oid)
    
    params
  }
  
  def serializeGetAll(): JSONObject = {
    val differentiator = new SerialisationHelper
    val params = new JSONObject
    
    params
  }
  
  def serializeUpdate(group: com.trafigura.tradecapture.internal.permissionservice.Group): JSONObject = {
    val differentiator = new SerialisationHelper
    val params = new JSONObject
    
      params.putOpt("Group", (group) match { case null => null; case o => o.toJson(differentiator) })
    
    params
  }
  
  def serializeDelete(oid: Int): JSONObject = {
    val differentiator = new SerialisationHelper
    val params = new JSONObject
    
      params.putOpt("Oid", oid)
    
    params
  }
  
  def serializeAddUser(groupOid: Int, userOid: Int): JSONObject = {
    val differentiator = new SerialisationHelper
    val params = new JSONObject
    
      params.putOpt("GroupOid", groupOid)
    
      params.putOpt("UserOid", userOid)
    
    params
  }
  
  def serializeRemoveUser(groupOid: Int, userOid: Int): JSONObject = {
    val differentiator = new SerialisationHelper
    val params = new JSONObject
    
      params.putOpt("GroupOid", groupOid)
    
      params.putOpt("UserOid", userOid)
    
    params
  }
  
  def serializeGetGroupUsers(oid: Int): JSONObject = {
    val differentiator = new SerialisationHelper
    val params = new JSONObject
    
      params.putOpt("Oid", oid)
    
    params
  }
  
  def serializeGetGroupRoles(oid: Int): JSONObject = {
    val differentiator = new SerialisationHelper
    val params = new JSONObject
    
      params.putOpt("Oid", oid)
    
    params
  }
  
  def serializeAddRole(groupOid: Int, roleOid: Int): JSONObject = {
    val differentiator = new SerialisationHelper
    val params = new JSONObject
    
      params.putOpt("GroupOid", groupOid)
    
      params.putOpt("RoleOid", roleOid)
    
    params
  }
  
  def serializeRemoveRole(groupOid: Int, roleOid: Int): JSONObject = {
    val differentiator = new SerialisationHelper
    val params = new JSONObject
    
      params.putOpt("GroupOid", groupOid)
    
      params.putOpt("RoleOid", roleOid)
    
    params
  }
  

  class Proxy(val handler: (String, JSONObject) => JSONObject) extends GroupService {
  
    def create(group: com.trafigura.tradecapture.internal.permissionservice.Group): com.trafigura.tradecapture.internal.permissionservice.PermissionResult = {
        val request = new JSONObject
        request.put("method", "Create")
        
        request.put("params", serializeCreate(group))
        
        var routing = null
        val response = handler(routing, request)
        if (response == null) {
          null.asInstanceOf[com.trafigura.tradecapture.internal.permissionservice.PermissionResult]   // Doesn't work well with primitive types, but we should only see null in cases like discover anyway
        } else {
          val cache = new DeserialisationHelper
          (response.opt("result")) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.tradecapture.internal.permissionservice.PermissionResult.fromJson(o, cache))) }
        }
    }
  
    def get(oid: Int): com.trafigura.tradecapture.internal.permissionservice.Group = {
        val request = new JSONObject
        request.put("method", "Get")
        
        request.put("params", serializeGet(oid))
        
        var routing = null
        val response = handler(routing, request)
        if (response == null) {
          null.asInstanceOf[com.trafigura.tradecapture.internal.permissionservice.Group]   // Doesn't work well with primitive types, but we should only see null in cases like discover anyway
        } else {
          val cache = new DeserialisationHelper
          (response.opt("result")) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.tradecapture.internal.permissionservice.Group.fromJson(o, cache))) }
        }
    }
  
    def getAll(): List[com.trafigura.tradecapture.internal.permissionservice.Group] = {
        val request = new JSONObject
        request.put("method", "GetAll")
        
        var routing = null
        val response = handler(routing, request)
        if (response == null) {
          null.asInstanceOf[List[com.trafigura.tradecapture.internal.permissionservice.Group]]   // Doesn't work well with primitive types, but we should only see null in cases like discover anyway
        } else {
          val cache = new DeserialisationHelper
          JSONConversions.optionalList(response.opt("result"), x => (x) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.tradecapture.internal.permissionservice.Group.fromJson(o, cache))) })
        }
    }
  
    def update(group: com.trafigura.tradecapture.internal.permissionservice.Group): com.trafigura.tradecapture.internal.permissionservice.PermissionResult = {
        val request = new JSONObject
        request.put("method", "Update")
        
        request.put("params", serializeUpdate(group))
        
        var routing = null
        val response = handler(routing, request)
        if (response == null) {
          null.asInstanceOf[com.trafigura.tradecapture.internal.permissionservice.PermissionResult]   // Doesn't work well with primitive types, but we should only see null in cases like discover anyway
        } else {
          val cache = new DeserialisationHelper
          (response.opt("result")) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.tradecapture.internal.permissionservice.PermissionResult.fromJson(o, cache))) }
        }
    }
  
    def delete(oid: Int): Boolean = {
        val request = new JSONObject
        request.put("method", "Delete")
        
        request.put("params", serializeDelete(oid))
        
        var routing = null
        val response = handler(routing, request)
        if (response == null) {
          null.asInstanceOf[Boolean]   // Doesn't work well with primitive types, but we should only see null in cases like discover anyway
        } else {
          val cache = new DeserialisationHelper
          JSONConversions.optional[Boolean](response.opt("result"), false)
        }
    }
  
    def addUser(groupOid: Int, userOid: Int): Boolean = {
        val request = new JSONObject
        request.put("method", "AddUser")
        
        request.put("params", serializeAddUser(groupOid, userOid))
        
        var routing = null
        val response = handler(routing, request)
        if (response == null) {
          null.asInstanceOf[Boolean]   // Doesn't work well with primitive types, but we should only see null in cases like discover anyway
        } else {
          val cache = new DeserialisationHelper
          JSONConversions.optional[Boolean](response.opt("result"), false)
        }
    }
  
    def removeUser(groupOid: Int, userOid: Int): Boolean = {
        val request = new JSONObject
        request.put("method", "RemoveUser")
        
        request.put("params", serializeRemoveUser(groupOid, userOid))
        
        var routing = null
        val response = handler(routing, request)
        if (response == null) {
          null.asInstanceOf[Boolean]   // Doesn't work well with primitive types, but we should only see null in cases like discover anyway
        } else {
          val cache = new DeserialisationHelper
          JSONConversions.optional[Boolean](response.opt("result"), false)
        }
    }
  
    def getGroupUsers(oid: Int): List[com.trafigura.tradecapture.internal.permissionservice.User] = {
        val request = new JSONObject
        request.put("method", "GetGroupUsers")
        
        request.put("params", serializeGetGroupUsers(oid))
        
        var routing = null
        val response = handler(routing, request)
        if (response == null) {
          null.asInstanceOf[List[com.trafigura.tradecapture.internal.permissionservice.User]]   // Doesn't work well with primitive types, but we should only see null in cases like discover anyway
        } else {
          val cache = new DeserialisationHelper
          JSONConversions.optionalList(response.opt("result"), x => (x) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.tradecapture.internal.permissionservice.User.fromJson(o, cache))) })
        }
    }
  
    def getGroupRoles(oid: Int): List[com.trafigura.tradecapture.internal.permissionservice.Role] = {
        val request = new JSONObject
        request.put("method", "GetGroupRoles")
        
        request.put("params", serializeGetGroupRoles(oid))
        
        var routing = null
        val response = handler(routing, request)
        if (response == null) {
          null.asInstanceOf[List[com.trafigura.tradecapture.internal.permissionservice.Role]]   // Doesn't work well with primitive types, but we should only see null in cases like discover anyway
        } else {
          val cache = new DeserialisationHelper
          JSONConversions.optionalList(response.opt("result"), x => (x) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.tradecapture.internal.permissionservice.Role.fromJson(o, cache))) })
        }
    }
  
    def addRole(groupOid: Int, roleOid: Int): Boolean = {
        val request = new JSONObject
        request.put("method", "AddRole")
        
        request.put("params", serializeAddRole(groupOid, roleOid))
        
        var routing = null
        val response = handler(routing, request)
        if (response == null) {
          null.asInstanceOf[Boolean]   // Doesn't work well with primitive types, but we should only see null in cases like discover anyway
        } else {
          val cache = new DeserialisationHelper
          JSONConversions.optional[Boolean](response.opt("result"), false)
        }
    }
  
    def removeRole(groupOid: Int, roleOid: Int): Boolean = {
        val request = new JSONObject
        request.put("method", "RemoveRole")
        
        request.put("params", serializeRemoveRole(groupOid, roleOid))
        
        var routing = null
        val response = handler(routing, request)
        if (response == null) {
          null.asInstanceOf[Boolean]   // Doesn't work well with primitive types, but we should only see null in cases like discover anyway
        } else {
          val cache = new DeserialisationHelper
          JSONConversions.optional[Boolean](response.opt("result"), false)
        }
    }
  
  }
}

