/**
 * WARNING: This file was automatically generated by the Trading Hub tooling version 2.15.
 * Any manual changes may be overwritten and lost!
 */


// Generated from model_object_scala.erb

package com.trafigura.tradecapture.internal.refinedmetal





import com.trafigura.tradinghub.support._
import scala.collection.JavaConversions._



/**
 used in document summaries to represent a hedge request
 */


 class DocumentHedgeRequestParams extends com.trafigura.tradinghub.support.ModelObject  {
  


  
    

var ordinal:Int = 0
    
    
    

var market:String = null
    
    
    

var marketId:Int = 0
    
    
    

var contractMonthName:String = null
    
    
    

var price:Double = 0.0
    
    
    

var currency:String = null
    
    
    

var currencyId:Int = 0
    
    
    

var currencyUom:String = null
    
    
    

var currencyUomId:Int = 0
    
    
    

var lots:Int = 0
    
    
    

var direction:String = null
    
    
    

var hrNumber:String = null
    
    





  override def equals(o: Any) = o match {
    case r: AnyRef =>
        if (o.isInstanceOf[com.trafigura.tradecapture.internal.refinedmetal.DocumentHedgeRequestParams]) {
            val that = r.asInstanceOf[com.trafigura.tradecapture.internal.refinedmetal.DocumentHedgeRequestParams]
            that.canEqual(this) && this.contractMonthName == that.contractMonthName && this.currency == that.currency && this.currencyId == that.currencyId && this.currencyUom == that.currencyUom && this.currencyUomId == that.currencyUomId && this.direction == that.direction && this.hrNumber == that.hrNumber && this.lots == that.lots && this.market == that.market && this.marketId == that.marketId && this.ordinal == that.ordinal && this.price == that.price &&  true
        }
        else false
    case _ => false
  }

  override def canEqual(that : Any) = that.isInstanceOf[com.trafigura.tradecapture.internal.refinedmetal.DocumentHedgeRequestParams]

  override def hashCode = {
    (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 *  1
    ) +
         (if (contractMonthName == null) 0 else contractMonthName.hashCode) 
    ) +
         (if (currency == null) 0 else currency.hashCode) 
    ) +
         currencyId.hashCode
        
    ) +
         (if (currencyUom == null) 0 else currencyUom.hashCode) 
    ) +
         currencyUomId.hashCode
        
    ) +
         (if (direction == null) 0 else direction.hashCode) 
    ) +
         (if (hrNumber == null) 0 else hrNumber.hashCode) 
    ) +
         lots.hashCode
        
    ) +
         (if (market == null) 0 else market.hashCode) 
    ) +
         marketId.hashCode
        
    ) +
         ordinal.hashCode
        
    ) +
         price.hashCode
        
    
  }

  override def toString = {
    "{com.trafigura.tradecapture.internal.refinedmetal.DocumentHedgeRequestParams: " + "" + "contractMonthName = " + contractMonthName + ", " + "currency = " + currency + ", " + "currencyId = " + currencyId + ", " + "currencyUom = " + currencyUom + ", " + "currencyUomId = " + currencyUomId + ", " + "direction = " + direction + ", " + "hrNumber = " + hrNumber + ", " + "lots = " + lots + ", " + "market = " + market + ", " + "marketId = " + marketId + ", " + "ordinal = " + ordinal + ", " + "price = " + price +  "}"
  }


  
         def toJson() : org.codehaus.jettison.json.JSONObject = {
      toJson(new SerialisationHelper)
    }

     def toJson(differentiator: SerialisationHelper) : org.codehaus.jettison.json.JSONObject = {
        var result = new org.codehaus.jettison.json.JSONObject();

        result.put("_node", differentiator.idFor(this))

        result.put("Type", "TradeCapture.Internal.RefinedMetal.DocumentHedgeRequestParams@1@1.0")
        
          
          
          
          
            result.putOpt("Ordinal", this.ordinal);
          
        
          
          
          
          
            result.putOpt("Market", this.market);
          
        
          
          
          
          
            result.putOpt("MarketId", this.marketId);
          
        
          
          
          
          
            result.putOpt("ContractMonthName", this.contractMonthName);
          
        
          
          
          
          
            result.putOpt("Price", this.price);
          
        
          
          
          
          
            result.putOpt("Currency", this.currency);
          
        
          
          
          
          
            result.putOpt("CurrencyId", this.currencyId);
          
        
          
          
          
          
            result.putOpt("CurrencyUom", this.currencyUom);
          
        
          
          
          
          
            result.putOpt("CurrencyUomId", this.currencyUomId);
          
        
          
          
          
          
            result.putOpt("Lots", this.lots);
          
        
          
          
          
          
            result.putOpt("Direction", this.direction);
          
        
          
          
          
          
            result.putOpt("HrNumber", this.hrNumber);
          
        
        return result;
    }

     def loadJson(jobj : org.codehaus.jettison.json.JSONObject, cache: DeserialisationHelper) = {
        
        
          
              ordinal = JSONConversions.optional[Int](jobj.opt("Ordinal"), 0)
          
              market = JSONConversions.optional[String](jobj.opt("Market"), null)
          
              marketId = JSONConversions.optional[Int](jobj.opt("MarketId"), 0)
          
              contractMonthName = JSONConversions.optional[String](jobj.opt("ContractMonthName"), null)
          
              price = JSONConversions.optionalReal(jobj.opt("Price"))
          
              currency = JSONConversions.optional[String](jobj.opt("Currency"), null)
          
              currencyId = JSONConversions.optional[Int](jobj.opt("CurrencyId"), 0)
          
              currencyUom = JSONConversions.optional[String](jobj.opt("CurrencyUom"), null)
          
              currencyUomId = JSONConversions.optional[Int](jobj.opt("CurrencyUomId"), 0)
          
              lots = JSONConversions.optional[Int](jobj.opt("Lots"), 0)
          
              direction = JSONConversions.optional[String](jobj.opt("Direction"), null)
          
              hrNumber = JSONConversions.optional[String](jobj.opt("HrNumber"), null)
          
        
    }

  
}

object DocumentHedgeRequestParams {
  def version = ModelVersion("1")
  def wireFormatVersion = ModelVersion("1.0")

  
        val jsonTypeName = "TradeCapture.Internal.RefinedMetal.DocumentHedgeRequestParams"

    def fromJson(jobj : org.codehaus.jettison.json.JSONObject, cache: DeserialisationHelper = new DeserialisationHelper) : com.trafigura.tradecapture.internal.refinedmetal.DocumentHedgeRequestParams = {
      val v = TypeHolder(jobj.optString("Type"))

      v.assertModelVersion(version, "com.trafigura.tradecapture.internal.refinedmetal.DocumentHedgeRequestParams")
      v.assertWireFormatVersion(wireFormatVersion, "com.trafigura.tradecapture.internal.refinedmetal.DocumentHedgeRequestParams")

      
        
              v.typeName match {
              
                case "TradeCapture.Internal.RefinedMetal.DocumentFxHedgeRequestParams" =>
                  
                     val result = new com.trafigura.tradecapture.internal.refinedmetal.DocumentFxHedgeRequestParams()
                     result.loadJson(jobj, cache)
                     result
                  
              
                case _ =>
                  
                     val result = new com.trafigura.tradecapture.internal.refinedmetal.DocumentHedgeRequestParams()
                     result.loadJson(jobj, cache)
                     result
                  
            }
        
      
    }

  

  

  
    def apply(ordinal: Int = 0, market: String = null, marketId: Int = 0, contractMonthName: String = null, price: Double = 0.0, currency: String = null, currencyId: Int = 0, currencyUom: String = null, currencyUomId: Int = 0, lots: Int = 0, direction: String = null, hrNumber: String = null) = {
      val res = new com.trafigura.tradecapture.internal.refinedmetal.DocumentHedgeRequestParams
      
        res.ordinal = ordinal
      
        res.market = market
      
        res.marketId = marketId
      
        res.contractMonthName = contractMonthName
      
        res.price = price
      
        res.currency = currency
      
        res.currencyId = currencyId
      
        res.currencyUom = currencyUom
      
        res.currencyUomId = currencyUomId
      
        res.lots = lots
      
        res.direction = direction
      
        res.hrNumber = hrNumber
      
      res
    }
  
}
