/**
 * WARNING: This file was automatically generated by the Trading Hub tooling version 2.15.
 * Any manual changes may be overwritten and lost!
 */


// Generated from model_object_scala.erb

package com.trafigura.tradecapture.internal.permissionservice





import com.trafigura.tradinghub.support._
import scala.collection.JavaConversions._




 class TrafficOperatorAndTradersForGC extends com.trafigura.tradinghub.support.ModelObject  {
  


  
    

var gcCode:String = null
    
    
    

var traders:List[com.trafigura.tradecapture.internal.permissionservice.User] = null
    
    
    

var trafficOperators:List[com.trafigura.tradecapture.internal.permissionservice.User] = null
    
    





  override def equals(o: Any) = o match {
    case r: AnyRef =>
        if (o.isInstanceOf[com.trafigura.tradecapture.internal.permissionservice.TrafficOperatorAndTradersForGC]) {
            val that = r.asInstanceOf[com.trafigura.tradecapture.internal.permissionservice.TrafficOperatorAndTradersForGC]
            that.canEqual(this) && this.gcCode == that.gcCode && this.traders == that.traders && this.trafficOperators == that.trafficOperators &&  true
        }
        else false
    case _ => false
  }

  override def canEqual(that : Any) = that.isInstanceOf[com.trafigura.tradecapture.internal.permissionservice.TrafficOperatorAndTradersForGC]

  override def hashCode = {
    (41 * (41 * (41 *  1
    ) +
         (if (gcCode == null) 0 else gcCode.hashCode) 
    ) +
         (if (traders == null) 0 else traders.hashCode) 
    ) +
         (if (trafficOperators == null) 0 else trafficOperators.hashCode) 
    
  }

  override def toString = {
    "{com.trafigura.tradecapture.internal.permissionservice.TrafficOperatorAndTradersForGC: " + "" + "gcCode = " + gcCode + ", " + "traders = " + traders + ", " + "trafficOperators = " + trafficOperators +  "}"
  }


  
         def toJson() : org.codehaus.jettison.json.JSONObject = {
      toJson(new SerialisationHelper)
    }

     def toJson(differentiator: SerialisationHelper) : org.codehaus.jettison.json.JSONObject = {
        var result = new org.codehaus.jettison.json.JSONObject();

        result.put("_node", differentiator.idFor(this))

        result.put("Type", "TradeCapture.Internal.PermissionService.TrafficOperatorAndTradersForGC@1@1.0")
        
          
          
          
          
            result.putOpt("GcCode", this.gcCode);
          
        
          
          
          
          
            result.putOpt("Traders", new org.codehaus.jettison.json.JSONArray(if(this.traders == null) new java.util.ArrayList() else java.util.Arrays.asList(this.traders.map(t => (t) match { case null => null; case o => o.toJson(differentiator) }).toArray: _*)));
          
        
          
          
          
          
            result.putOpt("TrafficOperators", new org.codehaus.jettison.json.JSONArray(if(this.trafficOperators == null) new java.util.ArrayList() else java.util.Arrays.asList(this.trafficOperators.map(t => (t) match { case null => null; case o => o.toJson(differentiator) }).toArray: _*)));
          
        
        return result;
    }

     def loadJson(jobj : org.codehaus.jettison.json.JSONObject, cache: DeserialisationHelper) = {
        
        
          
              gcCode = JSONConversions.optional[String](jobj.opt("GcCode"), null)
          
              traders = JSONConversions.optionalList(jobj.opt("Traders"), x => (x) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.tradecapture.internal.permissionservice.User.fromJson(o, cache))) })
          
              trafficOperators = JSONConversions.optionalList(jobj.opt("TrafficOperators"), x => (x) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.tradecapture.internal.permissionservice.User.fromJson(o, cache))) })
          
        
    }

  
}

object TrafficOperatorAndTradersForGC {
  def version = ModelVersion("1")
  def wireFormatVersion = ModelVersion("1.0")

  
        val jsonTypeName = "TradeCapture.Internal.PermissionService.TrafficOperatorAndTradersForGC"

    def fromJson(jobj : org.codehaus.jettison.json.JSONObject, cache: DeserialisationHelper = new DeserialisationHelper) : com.trafigura.tradecapture.internal.permissionservice.TrafficOperatorAndTradersForGC = {
      val v = TypeHolder(jobj.optString("Type"))

      v.assertModelVersion(version, "com.trafigura.tradecapture.internal.permissionservice.TrafficOperatorAndTradersForGC")
      v.assertWireFormatVersion(wireFormatVersion, "com.trafigura.tradecapture.internal.permissionservice.TrafficOperatorAndTradersForGC")

      
        
            val result = new com.trafigura.tradecapture.internal.permissionservice.TrafficOperatorAndTradersForGC()
            result.loadJson(jobj, cache)
            result
        
      
    }

  

  

  
    def apply(gcCode: String = null, traders: List[com.trafigura.tradecapture.internal.permissionservice.User] = null, trafficOperators: List[com.trafigura.tradecapture.internal.permissionservice.User] = null) = {
      val res = new com.trafigura.tradecapture.internal.permissionservice.TrafficOperatorAndTradersForGC
      
        res.gcCode = gcCode
      
        res.traders = traders
      
        res.trafficOperators = trafficOperators
      
      res
    }
  
}
