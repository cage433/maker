/**
 * WARNING: This file was automatically generated by the Trading Hub tooling version 2.15.
 * Any manual changes may be overwritten and lost!
 */


// Generated from model_service_json.rb

package com.trafigura.tradecapture.internal.refinedmetaltradeservice

import com.trafigura.tradecapture.internal.refinedmetal._
import com.trafigura.edm.shared.types._

import org.codehaus.jettison.json.JSONObject
import com.trafigura.tradinghub.support._

// JSON support for CaptureTrades

object CaptureTradesJSON extends JSONServiceDispatcher[CaptureTrades] {
  def serviceName = "TradeCapture.Internal.RefinedMetalTradeService.CaptureTrades"

  def decodeOperationName(jsonName:String) = {
    jsonName match {
      case "Update" => "Update"
      case "Create" => "Create"
      case "Cancel" => "Cancel"
      case "Complete" => "Complete"
      case "CalculatePremia" => "CalculatePremia"
      case "RegisterDocumentCreationInTrade" => "RegisterDocumentCreationInTrade"
      
    }
  }

  def parseParameters(operation:String, params: JSONObject) = {
    operation match {
      
      case "Update" =>
        
          val cache = new DeserialisationHelper
          Map("trade" -> ((params.opt("Trade")) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.tradecapture.internal.refinedmetal.RefinedMetalTrade.fromJson(o, cache))) }))
        
      
      case "Create" =>
        
          val cache = new DeserialisationHelper
          Map("trade" -> ((params.opt("Trade")) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.tradecapture.internal.refinedmetal.RefinedMetalTrade.fromJson(o, cache))) }))
        
      
      case "Cancel" =>
        
          val cache = new DeserialisationHelper
          Map("trade" -> ((params.opt("Trade")) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.tradecapture.internal.refinedmetal.RefinedMetalTrade.fromJson(o, cache))) }))
        
      
      case "Complete" =>
        
          val cache = new DeserialisationHelper
          Map("trade" -> ((params.opt("Trade")) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.tradecapture.internal.refinedmetal.RefinedMetalTrade.fromJson(o, cache))) }))
        
      
      case "CalculatePremia" =>
        
          val cache = new DeserialisationHelper
          Map("trade" -> ((params.opt("Trade")) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.tradecapture.internal.refinedmetal.RefinedMetalTrade.fromJson(o, cache))) }))
        
      
      case "RegisterDocumentCreationInTrade" =>
        
          val cache = new DeserialisationHelper
          Map("tradeId" -> ((params.opt("TradeId")) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.edm.shared.types.TitanId.fromJson(o, cache))) }), "lang" -> (JSONConversions.optional[String](params.opt("Lang"), null)), "docType" -> (JSONConversions.optional[String](params.opt("DocType"), null)), "version" -> (JSONConversions.optionalDatetime(params.opt("Version"))))
        
      
    }
  }

  def invoke(target: CaptureTrades, operation: String, params: Map[String, Any]): Any = {
    operation match {
      
      case "Update" =>
        target.update(params("trade").asInstanceOf[com.trafigura.tradecapture.internal.refinedmetal.RefinedMetalTrade])
      
      case "Create" =>
        target.create(params("trade").asInstanceOf[com.trafigura.tradecapture.internal.refinedmetal.RefinedMetalTrade])
      
      case "Cancel" =>
        target.cancel(params("trade").asInstanceOf[com.trafigura.tradecapture.internal.refinedmetal.RefinedMetalTrade])
      
      case "Complete" =>
        target.complete(params("trade").asInstanceOf[com.trafigura.tradecapture.internal.refinedmetal.RefinedMetalTrade])
      
      case "CalculatePremia" =>
        target.calculatePremia(params("trade").asInstanceOf[com.trafigura.tradecapture.internal.refinedmetal.RefinedMetalTrade])
      
      case "RegisterDocumentCreationInTrade" =>
        target.registerDocumentCreationInTrade(params("tradeId").asInstanceOf[com.trafigura.edm.shared.types.TitanId], params("lang").asInstanceOf[String], params("docType").asInstanceOf[String], params("version").asInstanceOf[org.joda.time.DateTime])
      
    }
  }

  def addResponse(operation:String, jsonResponse:JSONObject, response:Any) = {
    val differentiator = new SerialisationHelper
    operation match {
      
      case "Update" =>
        jsonResponse.putOpt("result", (response.asInstanceOf[com.trafigura.tradecapture.internal.refinedmetal.RefinedMetalTradeSubmissionResult]) match { case null => null; case o => o.toJson(differentiator) })
      
      case "Create" =>
        jsonResponse.putOpt("result", (response.asInstanceOf[com.trafigura.tradecapture.internal.refinedmetal.RefinedMetalTradeSubmissionResult]) match { case null => null; case o => o.toJson(differentiator) })
      
      case "Cancel" =>
        jsonResponse.putOpt("result", (response.asInstanceOf[com.trafigura.tradecapture.internal.refinedmetal.RefinedMetalTradeSubmissionResult]) match { case null => null; case o => o.toJson(differentiator) })
      
      case "Complete" =>
        jsonResponse.putOpt("result", (response.asInstanceOf[com.trafigura.tradecapture.internal.refinedmetal.RefinedMetalTradeSubmissionResult]) match { case null => null; case o => o.toJson(differentiator) })
      
      case "CalculatePremia" =>
        jsonResponse.putOpt("result", (response.asInstanceOf[com.trafigura.tradecapture.internal.refinedmetal.RefinedMetalTrade]) match { case null => null; case o => o.toJson(differentiator) })
      
      case "RegisterDocumentCreationInTrade" =>
        jsonResponse.putOpt("result", response.asInstanceOf[Boolean])
      
    }
  }

  
  def serializeUpdate(trade: com.trafigura.tradecapture.internal.refinedmetal.RefinedMetalTrade): JSONObject = {
    val differentiator = new SerialisationHelper
    val params = new JSONObject
    
      params.putOpt("Trade", (trade) match { case null => null; case o => o.toJson(differentiator) })
    
    params
  }
  
  def serializeCreate(trade: com.trafigura.tradecapture.internal.refinedmetal.RefinedMetalTrade): JSONObject = {
    val differentiator = new SerialisationHelper
    val params = new JSONObject
    
      params.putOpt("Trade", (trade) match { case null => null; case o => o.toJson(differentiator) })
    
    params
  }
  
  def serializeCancel(trade: com.trafigura.tradecapture.internal.refinedmetal.RefinedMetalTrade): JSONObject = {
    val differentiator = new SerialisationHelper
    val params = new JSONObject
    
      params.putOpt("Trade", (trade) match { case null => null; case o => o.toJson(differentiator) })
    
    params
  }
  
  def serializeComplete(trade: com.trafigura.tradecapture.internal.refinedmetal.RefinedMetalTrade): JSONObject = {
    val differentiator = new SerialisationHelper
    val params = new JSONObject
    
      params.putOpt("Trade", (trade) match { case null => null; case o => o.toJson(differentiator) })
    
    params
  }
  
  def serializeCalculatePremia(trade: com.trafigura.tradecapture.internal.refinedmetal.RefinedMetalTrade): JSONObject = {
    val differentiator = new SerialisationHelper
    val params = new JSONObject
    
      params.putOpt("Trade", (trade) match { case null => null; case o => o.toJson(differentiator) })
    
    params
  }
  
  def serializeRegisterDocumentCreationInTrade(tradeId: com.trafigura.edm.shared.types.TitanId, lang: String, docType: String, version: org.joda.time.DateTime): JSONObject = {
    val differentiator = new SerialisationHelper
    val params = new JSONObject
    
      params.putOpt("TradeId", (tradeId) match { case null => null; case o => o.toJson(differentiator) })
    
      params.putOpt("Lang", lang)
    
      params.putOpt("DocType", docType)
    
      params.putOpt("Version", JSONConversions.optionalDatetimeToJSON(version))
    
    params
  }
  

  class Proxy(val handler: (String, JSONObject) => JSONObject) extends CaptureTrades {
  
    def update(trade: com.trafigura.tradecapture.internal.refinedmetal.RefinedMetalTrade): com.trafigura.tradecapture.internal.refinedmetal.RefinedMetalTradeSubmissionResult = {
        val request = new JSONObject
        request.put("method", "Update")
        
        request.put("params", serializeUpdate(trade))
        
        var routing = null
        val response = handler(routing, request)
        if (response == null) {
          null.asInstanceOf[com.trafigura.tradecapture.internal.refinedmetal.RefinedMetalTradeSubmissionResult]   // Doesn't work well with primitive types, but we should only see null in cases like discover anyway
        } else {
          val cache = new DeserialisationHelper
          (response.opt("result")) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.tradecapture.internal.refinedmetal.RefinedMetalTradeSubmissionResult.fromJson(o, cache))) }
        }
    }
  
    def create(trade: com.trafigura.tradecapture.internal.refinedmetal.RefinedMetalTrade): com.trafigura.tradecapture.internal.refinedmetal.RefinedMetalTradeSubmissionResult = {
        val request = new JSONObject
        request.put("method", "Create")
        
        request.put("params", serializeCreate(trade))
        
        var routing = null
        val response = handler(routing, request)
        if (response == null) {
          null.asInstanceOf[com.trafigura.tradecapture.internal.refinedmetal.RefinedMetalTradeSubmissionResult]   // Doesn't work well with primitive types, but we should only see null in cases like discover anyway
        } else {
          val cache = new DeserialisationHelper
          (response.opt("result")) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.tradecapture.internal.refinedmetal.RefinedMetalTradeSubmissionResult.fromJson(o, cache))) }
        }
    }
  
    def cancel(trade: com.trafigura.tradecapture.internal.refinedmetal.RefinedMetalTrade): com.trafigura.tradecapture.internal.refinedmetal.RefinedMetalTradeSubmissionResult = {
        val request = new JSONObject
        request.put("method", "Cancel")
        
        request.put("params", serializeCancel(trade))
        
        var routing = null
        val response = handler(routing, request)
        if (response == null) {
          null.asInstanceOf[com.trafigura.tradecapture.internal.refinedmetal.RefinedMetalTradeSubmissionResult]   // Doesn't work well with primitive types, but we should only see null in cases like discover anyway
        } else {
          val cache = new DeserialisationHelper
          (response.opt("result")) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.tradecapture.internal.refinedmetal.RefinedMetalTradeSubmissionResult.fromJson(o, cache))) }
        }
    }
  
    def complete(trade: com.trafigura.tradecapture.internal.refinedmetal.RefinedMetalTrade): com.trafigura.tradecapture.internal.refinedmetal.RefinedMetalTradeSubmissionResult = {
        val request = new JSONObject
        request.put("method", "Complete")
        
        request.put("params", serializeComplete(trade))
        
        var routing = null
        val response = handler(routing, request)
        if (response == null) {
          null.asInstanceOf[com.trafigura.tradecapture.internal.refinedmetal.RefinedMetalTradeSubmissionResult]   // Doesn't work well with primitive types, but we should only see null in cases like discover anyway
        } else {
          val cache = new DeserialisationHelper
          (response.opt("result")) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.tradecapture.internal.refinedmetal.RefinedMetalTradeSubmissionResult.fromJson(o, cache))) }
        }
    }
  
    def calculatePremia(trade: com.trafigura.tradecapture.internal.refinedmetal.RefinedMetalTrade): com.trafigura.tradecapture.internal.refinedmetal.RefinedMetalTrade = {
        val request = new JSONObject
        request.put("method", "CalculatePremia")
        
        request.put("params", serializeCalculatePremia(trade))
        
        var routing = null
        val response = handler(routing, request)
        if (response == null) {
          null.asInstanceOf[com.trafigura.tradecapture.internal.refinedmetal.RefinedMetalTrade]   // Doesn't work well with primitive types, but we should only see null in cases like discover anyway
        } else {
          val cache = new DeserialisationHelper
          (response.opt("result")) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.tradecapture.internal.refinedmetal.RefinedMetalTrade.fromJson(o, cache))) }
        }
    }
  
    def registerDocumentCreationInTrade(tradeId: com.trafigura.edm.shared.types.TitanId, lang: String, docType: String, version: org.joda.time.DateTime): Boolean = {
        val request = new JSONObject
        request.put("method", "RegisterDocumentCreationInTrade")
        
        request.put("params", serializeRegisterDocumentCreationInTrade(tradeId, lang, docType, version))
        
        var routing = null
        val response = handler(routing, request)
        if (response == null) {
          null.asInstanceOf[Boolean]   // Doesn't work well with primitive types, but we should only see null in cases like discover anyway
        } else {
          val cache = new DeserialisationHelper
          JSONConversions.optional[Boolean](response.opt("result"), false)
        }
    }
  
  }
}

