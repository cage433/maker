/**
 * WARNING: This file was automatically generated by the Trading Hub tooling version 2.15.
 * Any manual changes may be overwritten and lost!
 */


// Generated from model_object_scala.erb

package com.trafigura.tradecapture.internal.refinedmetal





import com.trafigura.tradinghub.support._
import scala.collection.JavaConversions._



/**
 this is the model as used for Release 1 of RMET
 */


 class PaymentMethod extends com.trafigura.tradinghub.support.ModelObject  {
  


  
    

var oid:Int = 0
    
    





  override def equals(o: Any) = o match {
    case r: AnyRef =>
        if (o.isInstanceOf[com.trafigura.tradecapture.internal.refinedmetal.PaymentMethod]) {
            val that = r.asInstanceOf[com.trafigura.tradecapture.internal.refinedmetal.PaymentMethod]
            that.canEqual(this) && this.oid == that.oid &&  true
        }
        else false
    case _ => false
  }

  override def canEqual(that : Any) = that.isInstanceOf[com.trafigura.tradecapture.internal.refinedmetal.PaymentMethod]

  override def hashCode = {
    (41 *  1
    ) +
         oid.hashCode
        
    
  }

  override def toString = {
    "{com.trafigura.tradecapture.internal.refinedmetal.PaymentMethod: " + "" + "oid = " + oid +  "}"
  }


  
         def toJson() : org.codehaus.jettison.json.JSONObject = {
      toJson(new SerialisationHelper)
    }

     def toJson(differentiator: SerialisationHelper) : org.codehaus.jettison.json.JSONObject = {
        var result = new org.codehaus.jettison.json.JSONObject();

        result.put("_node", differentiator.idFor(this))

        result.put("Type", "TradeCapture.Internal.RefinedMetal.PaymentMethod@1@1.0")
        
          
          
          
          
            result.putOpt("Oid", this.oid);
          
        
        return result;
    }

     def loadJson(jobj : org.codehaus.jettison.json.JSONObject, cache: DeserialisationHelper) = {
        
        
          
              oid = JSONConversions.optional[Int](jobj.opt("Oid"), 0)
          
        
    }

  
}

object PaymentMethod {
  def version = ModelVersion("1")
  def wireFormatVersion = ModelVersion("1.0")

  
        val jsonTypeName = "TradeCapture.Internal.RefinedMetal.PaymentMethod"

    def fromJson(jobj : org.codehaus.jettison.json.JSONObject, cache: DeserialisationHelper = new DeserialisationHelper) : com.trafigura.tradecapture.internal.refinedmetal.PaymentMethod = {
      val v = TypeHolder(jobj.optString("Type"))

      v.assertModelVersion(version, "com.trafigura.tradecapture.internal.refinedmetal.PaymentMethod")
      v.assertWireFormatVersion(wireFormatVersion, "com.trafigura.tradecapture.internal.refinedmetal.PaymentMethod")

      
        
              v.typeName match {
              
                case "TradeCapture.Internal.RefinedMetal.TelegraphicTransfer" =>
                  
                     val result = new com.trafigura.tradecapture.internal.refinedmetal.TelegraphicTransfer()
                     result.loadJson(jobj, cache)
                     result
                  
              
                case "TradeCapture.Internal.RefinedMetal.LetterOfCredit" =>
                  
                     val result = new com.trafigura.tradecapture.internal.refinedmetal.LetterOfCredit()
                     result.loadJson(jobj, cache)
                     result
                  
              
                case "TradeCapture.Internal.RefinedMetal.OpenAccount" =>
                  
                     val result = new com.trafigura.tradecapture.internal.refinedmetal.OpenAccount()
                     result.loadJson(jobj, cache)
                     result
                  
              
                case _ =>
                  
                     val result = new com.trafigura.tradecapture.internal.refinedmetal.PaymentMethod()
                     result.loadJson(jobj, cache)
                     result
                  
            }
        
      
    }

  

  

  
    def apply(oid: Int = 0) = {
      val res = new com.trafigura.tradecapture.internal.refinedmetal.PaymentMethod
      
        res.oid = oid
      
      res
    }
  
}
