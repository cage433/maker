/**
 * WARNING: This file was automatically generated by the Trading Hub tooling version 2.15.
 * Any manual changes may be overwritten and lost!
 */


// Generated from model_object_scala.erb

package com.trafigura.tradecapture.internal.refinedmetal





import com.trafigura.tradinghub.support._
import scala.collection.JavaConversions._




 class PaymentSpec extends com.trafigura.tradinghub.support.ModelObject  {
  


  
    

var paymentCurrencyId:scala.Option[Int] = None
    
    
    

var sellerChargesRechargedToBuyer:scala.Option[Boolean] = None
    
    
    

var riskApproved:scala.Option[Boolean] = None
    
    
    

var notes:String = null
    
    
    

var paymentMethods:List[com.trafigura.tradecapture.internal.refinedmetal.PaymentMethod] = null
    
    
    
    /**
     artificially shortened name to avoid tooling bugs
     */

var gt:com.trafigura.tradecapture.internal.refinedmetal.Guarantee = null
    
    
    

var paymentDates:List[com.trafigura.tradecapture.internal.refinedmetal.PaymentDate] = null
    
    
    

var presentedDocuments:List[com.trafigura.tradecapture.internal.refinedmetal.PresentedDocument] = null
    
    





  override def equals(o: Any) = o match {
    case r: AnyRef =>
        if (o.isInstanceOf[com.trafigura.tradecapture.internal.refinedmetal.PaymentSpec]) {
            val that = r.asInstanceOf[com.trafigura.tradecapture.internal.refinedmetal.PaymentSpec]
            that.canEqual(this) && this.gt == that.gt && this.notes == that.notes && this.paymentCurrencyId == that.paymentCurrencyId && this.paymentDates == that.paymentDates && this.paymentMethods == that.paymentMethods && this.presentedDocuments == that.presentedDocuments && this.riskApproved == that.riskApproved && this.sellerChargesRechargedToBuyer == that.sellerChargesRechargedToBuyer &&  true
        }
        else false
    case _ => false
  }

  override def canEqual(that : Any) = that.isInstanceOf[com.trafigura.tradecapture.internal.refinedmetal.PaymentSpec]

  override def hashCode = {
    (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 *  1
    ) +
         (if (gt == null) 0 else gt.hashCode) 
    ) +
         (if (notes == null) 0 else notes.hashCode) 
    ) +
         (if (paymentCurrencyId == null) 0 else paymentCurrencyId.hashCode) 
    ) +
         (if (paymentDates == null) 0 else paymentDates.hashCode) 
    ) +
         (if (paymentMethods == null) 0 else paymentMethods.hashCode) 
    ) +
         (if (presentedDocuments == null) 0 else presentedDocuments.hashCode) 
    ) +
         (if (riskApproved == null) 0 else riskApproved.hashCode) 
    ) +
         (if (sellerChargesRechargedToBuyer == null) 0 else sellerChargesRechargedToBuyer.hashCode) 
    
  }

  override def toString = {
    "{com.trafigura.tradecapture.internal.refinedmetal.PaymentSpec: " + "" + "gt = " + gt + ", " + "notes = " + notes + ", " + "paymentCurrencyId = " + paymentCurrencyId + ", " + "paymentDates = " + paymentDates + ", " + "paymentMethods = " + paymentMethods + ", " + "presentedDocuments = " + presentedDocuments + ", " + "riskApproved = " + riskApproved + ", " + "sellerChargesRechargedToBuyer = " + sellerChargesRechargedToBuyer +  "}"
  }


  
         def toJson() : org.codehaus.jettison.json.JSONObject = {
      toJson(new SerialisationHelper)
    }

     def toJson(differentiator: SerialisationHelper) : org.codehaus.jettison.json.JSONObject = {
        var result = new org.codehaus.jettison.json.JSONObject();

        result.put("_node", differentiator.idFor(this))

        result.put("Type", "TradeCapture.Internal.RefinedMetal.PaymentSpec@1@1.0")
        
          
          
          
          if(this.paymentCurrencyId != None) {
            result.putOpt("PaymentCurrencyId", (this.paymentCurrencyId.get));
          }
        
          
          
          
          if(this.sellerChargesRechargedToBuyer != None) {
            result.putOpt("SellerChargesRechargedToBuyer", this.sellerChargesRechargedToBuyer.getOrElse(null));
          }
        
          
          
          
          if(this.riskApproved != None) {
            result.putOpt("RiskApproved", this.riskApproved.getOrElse(null));
          }
        
          
          
          
          
            result.putOpt("Notes", this.notes);
          
        
          
          
          
          
            result.putOpt("PaymentMethods", new org.codehaus.jettison.json.JSONArray(if(this.paymentMethods == null) new java.util.ArrayList() else java.util.Arrays.asList(this.paymentMethods.map(t => (t) match { case null => null; case o => o.toJson(differentiator) }).toArray: _*)));
          
        
          
          
          
          
            result.putOpt("Gt", (this.gt) match { case null => null; case o => o.toJson(differentiator) });
          
        
          
          
          
          
            result.putOpt("PaymentDates", new org.codehaus.jettison.json.JSONArray(if(this.paymentDates == null) new java.util.ArrayList() else java.util.Arrays.asList(this.paymentDates.map(t => (t) match { case null => null; case o => o.toJson(differentiator) }).toArray: _*)));
          
        
          
          
          
          
            result.putOpt("PresentedDocuments", new org.codehaus.jettison.json.JSONArray(if(this.presentedDocuments == null) new java.util.ArrayList() else java.util.Arrays.asList(this.presentedDocuments.map(t => (t) match { case null => null; case o => o.toJson(differentiator) }).toArray: _*)));
          
        
        return result;
    }

     def loadJson(jobj : org.codehaus.jettison.json.JSONObject, cache: DeserialisationHelper) = {
        
        
          
              paymentCurrencyId = (jobj.opt("PaymentCurrencyId")) match {case null => None; case n:Number => Some(n.intValue()); case _ => None}
          
              sellerChargesRechargedToBuyer = (jobj.opt("SellerChargesRechargedToBuyer")) match { case null => None; case b:java.lang.Boolean => Some(b.booleanValue()); case _ => None }
          
              riskApproved = (jobj.opt("RiskApproved")) match { case null => None; case b:java.lang.Boolean => Some(b.booleanValue()); case _ => None }
          
              notes = JSONConversions.optional[String](jobj.opt("Notes"), null)
          
              paymentMethods = JSONConversions.optionalList(jobj.opt("PaymentMethods"), x => (x) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.tradecapture.internal.refinedmetal.PaymentMethod.fromJson(o, cache))) })
          
              gt = (jobj.opt("Gt")) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.tradecapture.internal.refinedmetal.Guarantee.fromJson(o, cache))) }
          
              paymentDates = JSONConversions.optionalList(jobj.opt("PaymentDates"), x => (x) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.tradecapture.internal.refinedmetal.PaymentDate.fromJson(o, cache))) })
          
              presentedDocuments = JSONConversions.optionalList(jobj.opt("PresentedDocuments"), x => (x) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.tradecapture.internal.refinedmetal.PresentedDocument.fromJson(o, cache))) })
          
        
    }

  
}

object PaymentSpec {
  def version = ModelVersion("1")
  def wireFormatVersion = ModelVersion("1.0")

  
        val jsonTypeName = "TradeCapture.Internal.RefinedMetal.PaymentSpec"

    def fromJson(jobj : org.codehaus.jettison.json.JSONObject, cache: DeserialisationHelper = new DeserialisationHelper) : com.trafigura.tradecapture.internal.refinedmetal.PaymentSpec = {
      val v = TypeHolder(jobj.optString("Type"))

      v.assertModelVersion(version, "com.trafigura.tradecapture.internal.refinedmetal.PaymentSpec")
      v.assertWireFormatVersion(wireFormatVersion, "com.trafigura.tradecapture.internal.refinedmetal.PaymentSpec")

      
        
            val result = new com.trafigura.tradecapture.internal.refinedmetal.PaymentSpec()
            result.loadJson(jobj, cache)
            result
        
      
    }

  

  
  val NotesLength = 4000
  

  
    def apply(paymentCurrencyId: scala.Option[Int] = None, sellerChargesRechargedToBuyer: scala.Option[Boolean] = None, riskApproved: scala.Option[Boolean] = None, notes: String = null, paymentMethods: List[com.trafigura.tradecapture.internal.refinedmetal.PaymentMethod] = null, gt: com.trafigura.tradecapture.internal.refinedmetal.Guarantee = null, paymentDates: List[com.trafigura.tradecapture.internal.refinedmetal.PaymentDate] = null, presentedDocuments: List[com.trafigura.tradecapture.internal.refinedmetal.PresentedDocument] = null) = {
      val res = new com.trafigura.tradecapture.internal.refinedmetal.PaymentSpec
      
        res.paymentCurrencyId = paymentCurrencyId
      
        res.sellerChargesRechargedToBuyer = sellerChargesRechargedToBuyer
      
        res.riskApproved = riskApproved
      
        res.notes = notes
      
        res.paymentMethods = paymentMethods
      
        res.gt = gt
      
        res.paymentDates = paymentDates
      
        res.presentedDocuments = presentedDocuments
      
      res
    }
  
}
