/**
 * WARNING: This file was automatically generated by the Trading Hub tooling version 2.15.
 * Any manual changes may be overwritten and lost!
 */


// Generated from model_object_scala.erb

package com.trafigura.tradecapture.internal.refinedmetal





import com.trafigura.tradinghub.support._
import scala.collection.JavaConversions._



/**
 the real trade object
TODO DEE 2011-07-08 eliminate version workaround when model generation fixed D-05529
There are workaround fields in RefinedMetalTrade and RefinedMetalTradeLite to allow hibernate restrictions when
getting trade versions.  They contain copies of the two subfield values of the version field.
This is needed temporarily because it appears to be impossible to use hibernate restrictions on subfields generated
from the model, the property names are somehow not set correctly.  The workaround fields should only needed by the
tradeservice.
 */


 class RefinedMetalTrade extends com.trafigura.tradinghub.support.ModelObject  {
  


  
    

var oid:Int = 0
    
    
    

var directionId:scala.Option[Int] = None
    
    
    

var audit:com.trafigura.tradecapture.internal.auditing.Audit = null
    
    
    

var neptuneId:String = null
    
    
    

var metalId:scala.Option[Int] = None
    
    
    

var ctptyHolder:com.trafigura.tradecapture.internal.refinedmetal.CounterpartyAndTypeHolder = null
    
    
    

var traderId:scala.Option[Int] = None
    
    
    

var trafficOperatorId:scala.Option[Int] = None
    
    
    

var contractDate:org.joda.time.LocalDate = null
    
    
    

var submittedById:Int = 0
    
    
    

var comments:String = null
    
    
    

var groupCompanyId:scala.Option[Int] = None
    
    
    

var trafficHubId:scala.Option[Int] = None
    
    
    

var creditDays:Int = 0
    
    
    

var quotas:List[com.trafigura.tradecapture.internal.refinedmetal.Quota] = null
    
    
    

var submittedDate:org.joda.time.DateTime = null
    
    
    

var state:RefinedMetalTradeStateEnum = null
    
    
    

var tolerance:Double = 0.0
    
    
    

var sourceSystem:RefinedMetalTradeSourceSystemEnum = null
    
    
    

var titanId:com.trafigura.edm.shared.types.TitanId = null
    
    
    

var titanIdWorkaround:String = null
    
    
    

var businessId:String = null
    
    
    

var version:com.trafigura.tradecapture.internal.refinedmetal.Version = null
    
    
    

var versionStartWorkaround:org.joda.time.DateTime = null
    
    
    

var versionEndWorkaround:org.joda.time.DateTime = null
    
    
    

var docInfo:List[com.trafigura.tradecapture.internal.refinedmetal.DocLangDetails] = null
    
    
    

var amendmentInfo:List[com.trafigura.tradecapture.internal.refinedmetal.AmendmentLangDetails] = null
    
    
    

var docAmendmentsDisabled:Boolean = false
    
    





  override def equals(o: Any) = o match {
    case r: AnyRef =>
        if (o.isInstanceOf[com.trafigura.tradecapture.internal.refinedmetal.RefinedMetalTrade]) {
            val that = r.asInstanceOf[com.trafigura.tradecapture.internal.refinedmetal.RefinedMetalTrade]
            that.canEqual(this) && this.amendmentInfo == that.amendmentInfo && this.audit == that.audit && this.businessId == that.businessId && this.comments == that.comments && this.contractDate == that.contractDate && this.creditDays == that.creditDays && this.ctptyHolder == that.ctptyHolder && this.directionId == that.directionId && this.docAmendmentsDisabled == that.docAmendmentsDisabled && this.docInfo == that.docInfo && this.groupCompanyId == that.groupCompanyId && this.metalId == that.metalId && this.neptuneId == that.neptuneId && this.oid == that.oid && this.quotas == that.quotas && this.sourceSystem == that.sourceSystem && this.state == that.state && this.submittedById == that.submittedById && this.submittedDate == that.submittedDate && this.titanId == that.titanId && this.titanIdWorkaround == that.titanIdWorkaround && this.tolerance == that.tolerance && this.traderId == that.traderId && this.trafficHubId == that.trafficHubId && this.trafficOperatorId == that.trafficOperatorId && this.version == that.version && this.versionEndWorkaround == that.versionEndWorkaround && this.versionStartWorkaround == that.versionStartWorkaround &&  true
        }
        else false
    case _ => false
  }

  override def canEqual(that : Any) = that.isInstanceOf[com.trafigura.tradecapture.internal.refinedmetal.RefinedMetalTrade]

  override def hashCode = {
    (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 *  1
    ) +
         (if (amendmentInfo == null) 0 else amendmentInfo.hashCode) 
    ) +
         (if (audit == null) 0 else audit.hashCode) 
    ) +
         (if (businessId == null) 0 else businessId.hashCode) 
    ) +
         (if (comments == null) 0 else comments.hashCode) 
    ) +
         (if (contractDate == null) 0 else contractDate.hashCode) 
    ) +
         creditDays.hashCode
        
    ) +
         (if (ctptyHolder == null) 0 else ctptyHolder.hashCode) 
    ) +
         (if (directionId == null) 0 else directionId.hashCode) 
    ) +
         docAmendmentsDisabled.hashCode
        
    ) +
         (if (docInfo == null) 0 else docInfo.hashCode) 
    ) +
         (if (groupCompanyId == null) 0 else groupCompanyId.hashCode) 
    ) +
         (if (metalId == null) 0 else metalId.hashCode) 
    ) +
         (if (neptuneId == null) 0 else neptuneId.hashCode) 
    ) +
         oid.hashCode
        
    ) +
         (if (quotas == null) 0 else quotas.hashCode) 
    ) +
         (if (sourceSystem == null) 0 else sourceSystem.hashCode) 
    ) +
         (if (state == null) 0 else state.hashCode) 
    ) +
         submittedById.hashCode
        
    ) +
         (if (submittedDate == null) 0 else submittedDate.hashCode) 
    ) +
         (if (titanId == null) 0 else titanId.hashCode) 
    ) +
         (if (titanIdWorkaround == null) 0 else titanIdWorkaround.hashCode) 
    ) +
         tolerance.hashCode
        
    ) +
         (if (traderId == null) 0 else traderId.hashCode) 
    ) +
         (if (trafficHubId == null) 0 else trafficHubId.hashCode) 
    ) +
         (if (trafficOperatorId == null) 0 else trafficOperatorId.hashCode) 
    ) +
         (if (version == null) 0 else version.hashCode) 
    ) +
         (if (versionEndWorkaround == null) 0 else versionEndWorkaround.hashCode) 
    ) +
         (if (versionStartWorkaround == null) 0 else versionStartWorkaround.hashCode) 
    
  }

  override def toString = {
    "{com.trafigura.tradecapture.internal.refinedmetal.RefinedMetalTrade: " + "" + "amendmentInfo = " + amendmentInfo + ", " + "audit = " + audit + ", " + "businessId = " + businessId + ", " + "comments = " + comments + ", " + "contractDate = " + contractDate + ", " + "creditDays = " + creditDays + ", " + "ctptyHolder = " + ctptyHolder + ", " + "directionId = " + directionId + ", " + "docAmendmentsDisabled = " + docAmendmentsDisabled + ", " + "docInfo = " + docInfo + ", " + "groupCompanyId = " + groupCompanyId + ", " + "metalId = " + metalId + ", " + "neptuneId = " + neptuneId + ", " + "oid = " + oid + ", " + "quotas = " + quotas + ", " + "sourceSystem = " + sourceSystem + ", " + "state = " + state + ", " + "submittedById = " + submittedById + ", " + "submittedDate = " + submittedDate + ", " + "titanId = " + titanId + ", " + "titanIdWorkaround = " + titanIdWorkaround + ", " + "tolerance = " + tolerance + ", " + "traderId = " + traderId + ", " + "trafficHubId = " + trafficHubId + ", " + "trafficOperatorId = " + trafficOperatorId + ", " + "version = " + version + ", " + "versionEndWorkaround = " + versionEndWorkaround + ", " + "versionStartWorkaround = " + versionStartWorkaround +  "}"
  }


  
         def toJson() : org.codehaus.jettison.json.JSONObject = {
      toJson(new SerialisationHelper)
    }

     def toJson(differentiator: SerialisationHelper) : org.codehaus.jettison.json.JSONObject = {
        var result = new org.codehaus.jettison.json.JSONObject();

        result.put("_node", differentiator.idFor(this))

        result.put("Type", "TradeCapture.Internal.RefinedMetal.RefinedMetalTrade@1@1.0")
        
          
          
          
          
            result.putOpt("Oid", this.oid);
          
        
          
          
          
          if(this.directionId != None) {
            result.putOpt("DirectionId", (this.directionId.get));
          }
        
          
          
          
          
            result.putOpt("Audit", (this.audit) match { case null => null; case o => o.toJson(differentiator) });
          
        
          
          
          
          
            result.putOpt("NeptuneId", this.neptuneId);
          
        
          
          
          
          if(this.metalId != None) {
            result.putOpt("MetalId", (this.metalId.get));
          }
        
          
          
          
          
            result.putOpt("CtptyHolder", (this.ctptyHolder) match { case null => null; case o => o.toJson(differentiator) });
          
        
          
          
          
          if(this.traderId != None) {
            result.putOpt("TraderId", (this.traderId.get));
          }
        
          
          
          
          if(this.trafficOperatorId != None) {
            result.putOpt("TrafficOperatorId", (this.trafficOperatorId.get));
          }
        
          
          
          
          
            result.putOpt("ContractDate", JSONConversions.optionalDateToJSON(this.contractDate));
          
        
          
          
          
          
            result.putOpt("SubmittedById", this.submittedById);
          
        
          
          
          
          
            result.putOpt("Comments", this.comments);
          
        
          
          
          
          if(this.groupCompanyId != None) {
            result.putOpt("GroupCompanyId", (this.groupCompanyId.get));
          }
        
          
          
          
          if(this.trafficHubId != None) {
            result.putOpt("TrafficHubId", (this.trafficHubId.get));
          }
        
          
          
          
          
            result.putOpt("CreditDays", this.creditDays);
          
        
          
          
          
          
            result.putOpt("Quotas", new org.codehaus.jettison.json.JSONArray(if(this.quotas == null) new java.util.ArrayList() else java.util.Arrays.asList(this.quotas.map(t => (t) match { case null => null; case o => o.toJson(differentiator) }).toArray: _*)));
          
        
          
          
          
          
            result.putOpt("SubmittedDate", JSONConversions.optionalDatetimeToJSON(this.submittedDate));
          
        
          
          
          
          
            result.putOpt("State", (this.state) match { case null => null; case o => o.toJson });
          
        
          
          
          
          
            result.putOpt("Tolerance", this.tolerance);
          
        
          
          
          
          
            result.putOpt("SourceSystem", (this.sourceSystem) match { case null => null; case o => o.toJson });
          
        
          
          
          
          
            result.putOpt("TitanId", (this.titanId) match { case null => null; case o => o.toJson(differentiator) });
          
        
          
          
          
          
            result.putOpt("TitanIdWorkaround", this.titanIdWorkaround);
          
        
          
          
          
          
            result.putOpt("BusinessId", this.businessId);
          
        
          
          
          
          
            result.putOpt("Version", (this.version) match { case null => null; case o => o.toJson(differentiator) });
          
        
          
          
          
          
            result.putOpt("VersionStartWorkaround", JSONConversions.optionalDatetimeToJSON(this.versionStartWorkaround));
          
        
          
          
          
          
            result.putOpt("VersionEndWorkaround", JSONConversions.optionalDatetimeToJSON(this.versionEndWorkaround));
          
        
          
          
          
          
            result.putOpt("DocInfo", new org.codehaus.jettison.json.JSONArray(if(this.docInfo == null) new java.util.ArrayList() else java.util.Arrays.asList(this.docInfo.map(t => (t) match { case null => null; case o => o.toJson(differentiator) }).toArray: _*)));
          
        
          
          
          
          
            result.putOpt("AmendmentInfo", new org.codehaus.jettison.json.JSONArray(if(this.amendmentInfo == null) new java.util.ArrayList() else java.util.Arrays.asList(this.amendmentInfo.map(t => (t) match { case null => null; case o => o.toJson(differentiator) }).toArray: _*)));
          
        
          
          
          
          
            result.putOpt("DocAmendmentsDisabled", this.docAmendmentsDisabled);
          
        
        return result;
    }

     def loadJson(jobj : org.codehaus.jettison.json.JSONObject, cache: DeserialisationHelper) = {
        
        
          
              oid = JSONConversions.optional[Int](jobj.opt("Oid"), 0)
          
              directionId = (jobj.opt("DirectionId")) match {case null => None; case n:Number => Some(n.intValue()); case _ => None}
          
              audit = (jobj.opt("Audit")) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.tradecapture.internal.auditing.Audit.fromJson(o, cache))) }
          
              neptuneId = JSONConversions.optional[String](jobj.opt("NeptuneId"), null)
          
              metalId = (jobj.opt("MetalId")) match {case null => None; case n:Number => Some(n.intValue()); case _ => None}
          
              ctptyHolder = (jobj.opt("CtptyHolder")) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.tradecapture.internal.refinedmetal.CounterpartyAndTypeHolder.fromJson(o, cache))) }
          
              traderId = (jobj.opt("TraderId")) match {case null => None; case n:Number => Some(n.intValue()); case _ => None}
          
              trafficOperatorId = (jobj.opt("TrafficOperatorId")) match {case null => None; case n:Number => Some(n.intValue()); case _ => None}
          
              contractDate = JSONConversions.optionalDate(jobj.opt("ContractDate"))
          
              submittedById = jobj.optInt("SubmittedById")
          
              comments = JSONConversions.optional[String](jobj.opt("Comments"), null)
          
              groupCompanyId = (jobj.opt("GroupCompanyId")) match {case null => None; case n:Number => Some(n.intValue()); case _ => None}
          
              trafficHubId = (jobj.opt("TrafficHubId")) match {case null => None; case n:Number => Some(n.intValue()); case _ => None}
          
              creditDays = JSONConversions.optional[Int](jobj.opt("CreditDays"), 0)
          
              quotas = JSONConversions.optionalList(jobj.opt("Quotas"), x => (x) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.tradecapture.internal.refinedmetal.Quota.fromJson(o, cache))) })
          
              submittedDate = JSONConversions.optionalDatetime(jobj.opt("SubmittedDate"))
          
              state = (jobj.optString("State")) match { case null => null; case s: String => RefinedMetalTradeStateEnum.forName(s) }
          
              tolerance = JSONConversions.optionalReal(jobj.opt("Tolerance"))
          
              sourceSystem = (jobj.optString("SourceSystem")) match { case null => null; case s: String => RefinedMetalTradeSourceSystemEnum.forName(s) }
          
              titanId = (jobj.opt("TitanId")) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.edm.shared.types.TitanId.fromJson(o, cache))) }
          
              titanIdWorkaround = JSONConversions.optional[String](jobj.opt("TitanIdWorkaround"), null)
          
              businessId = JSONConversions.optional[String](jobj.opt("BusinessId"), null)
          
              version = (jobj.opt("Version")) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.tradecapture.internal.refinedmetal.Version.fromJson(o, cache))) }
          
              versionStartWorkaround = JSONConversions.optionalDatetime(jobj.opt("VersionStartWorkaround"))
          
              versionEndWorkaround = JSONConversions.optionalDatetime(jobj.opt("VersionEndWorkaround"))
          
              docInfo = JSONConversions.optionalList(jobj.opt("DocInfo"), x => (x) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.tradecapture.internal.refinedmetal.DocLangDetails.fromJson(o, cache))) })
          
              amendmentInfo = JSONConversions.optionalList(jobj.opt("AmendmentInfo"), x => (x) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.tradecapture.internal.refinedmetal.AmendmentLangDetails.fromJson(o, cache))) })
          
              docAmendmentsDisabled = JSONConversions.optional[Boolean](jobj.opt("DocAmendmentsDisabled"), false)
          
        
    }

  
}

object RefinedMetalTrade {
  def version = ModelVersion("1")
  def wireFormatVersion = ModelVersion("1.0")

  
        val jsonTypeName = "TradeCapture.Internal.RefinedMetal.RefinedMetalTrade"

    def fromJson(jobj : org.codehaus.jettison.json.JSONObject, cache: DeserialisationHelper = new DeserialisationHelper) : com.trafigura.tradecapture.internal.refinedmetal.RefinedMetalTrade = {
      val v = TypeHolder(jobj.optString("Type"))

      v.assertModelVersion(version, "com.trafigura.tradecapture.internal.refinedmetal.RefinedMetalTrade")
      v.assertWireFormatVersion(wireFormatVersion, "com.trafigura.tradecapture.internal.refinedmetal.RefinedMetalTrade")

      
        
            val result = new com.trafigura.tradecapture.internal.refinedmetal.RefinedMetalTrade()
            result.loadJson(jobj, cache)
            result
        
      
    }

  

  
  val CommentLength = 4000
  

  
    def apply(oid: Int = 0, directionId: scala.Option[Int] = None, audit: com.trafigura.tradecapture.internal.auditing.Audit = null, neptuneId: String = null, metalId: scala.Option[Int] = None, ctptyHolder: com.trafigura.tradecapture.internal.refinedmetal.CounterpartyAndTypeHolder = null, traderId: scala.Option[Int] = None, trafficOperatorId: scala.Option[Int] = None, contractDate: org.joda.time.LocalDate = null, submittedById: Int = 0, comments: String = null, groupCompanyId: scala.Option[Int] = None, trafficHubId: scala.Option[Int] = None, creditDays: Int = 0, quotas: List[com.trafigura.tradecapture.internal.refinedmetal.Quota] = null, submittedDate: org.joda.time.DateTime = null, state: RefinedMetalTradeStateEnum = null, tolerance: Double = 0.0, sourceSystem: RefinedMetalTradeSourceSystemEnum = null, titanId: com.trafigura.edm.shared.types.TitanId = null, titanIdWorkaround: String = null, businessId: String = null, version: com.trafigura.tradecapture.internal.refinedmetal.Version = null, versionStartWorkaround: org.joda.time.DateTime = null, versionEndWorkaround: org.joda.time.DateTime = null, docInfo: List[com.trafigura.tradecapture.internal.refinedmetal.DocLangDetails] = null, amendmentInfo: List[com.trafigura.tradecapture.internal.refinedmetal.AmendmentLangDetails] = null, docAmendmentsDisabled: Boolean = false) = {
      val res = new com.trafigura.tradecapture.internal.refinedmetal.RefinedMetalTrade
      
        res.oid = oid
      
        res.directionId = directionId
      
        res.audit = audit
      
        res.neptuneId = neptuneId
      
        res.metalId = metalId
      
        res.ctptyHolder = ctptyHolder
      
        res.traderId = traderId
      
        res.trafficOperatorId = trafficOperatorId
      
        res.contractDate = contractDate
      
        res.submittedById = submittedById
      
        res.comments = comments
      
        res.groupCompanyId = groupCompanyId
      
        res.trafficHubId = trafficHubId
      
        res.creditDays = creditDays
      
        res.quotas = quotas
      
        res.submittedDate = submittedDate
      
        res.state = state
      
        res.tolerance = tolerance
      
        res.sourceSystem = sourceSystem
      
        res.titanId = titanId
      
        res.titanIdWorkaround = titanIdWorkaround
      
        res.businessId = businessId
      
        res.version = version
      
        res.versionStartWorkaround = versionStartWorkaround
      
        res.versionEndWorkaround = versionEndWorkaround
      
        res.docInfo = docInfo
      
        res.amendmentInfo = amendmentInfo
      
        res.docAmendmentsDisabled = docAmendmentsDisabled
      
      res
    }
  
}
