/**
 * WARNING: This file was automatically generated by the Trading Hub tooling version 2.15.
 * Any manual changes may be overwritten and lost!
 */


// Generated from model_object_scala.erb

package com.trafigura.tradecapture.internal.refinedmetal





import com.trafigura.tradinghub.support._
import scala.collection.JavaConversions._




 class SummaryDocumentQuotaParameters extends com.trafigura.tradinghub.support.ModelObject  {
  


  
    

var ordinal:Int = 0
    
    
    

var quantity:scala.Option[Double] = None
    
    
    

var uom:String = null
    
    
    

var deliveryMonth:String = null
    
    
    

var deliveryYear:String = null
    
    
    

var shipmentMonth:String = null
    
    
    

var shipmentYear:String = null
    
    
    

var vatInvoiceDate:org.joda.time.LocalDate = null
    
    
    

var vatInvoiceType:SummaryDocumentQuotaParametersVatInvoiceTypeEnum = null
    
    
    

var qpTypeId:Int = 0
    
    
    

var presentedDocumentName:String = null
    
    
    

var presentedDocumentIsCopy:Boolean = false
    
    
    

var numberOfDeferredCreditDays:Int = 0
    
    
    

var pricingSpecParams:List[com.trafigura.tradecapture.internal.refinedmetal.DocumentPricingSpecParams] = null
    
    





  override def equals(o: Any) = o match {
    case r: AnyRef =>
        if (o.isInstanceOf[com.trafigura.tradecapture.internal.refinedmetal.SummaryDocumentQuotaParameters]) {
            val that = r.asInstanceOf[com.trafigura.tradecapture.internal.refinedmetal.SummaryDocumentQuotaParameters]
            that.canEqual(this) && this.deliveryMonth == that.deliveryMonth && this.deliveryYear == that.deliveryYear && this.numberOfDeferredCreditDays == that.numberOfDeferredCreditDays && this.ordinal == that.ordinal && this.presentedDocumentIsCopy == that.presentedDocumentIsCopy && this.presentedDocumentName == that.presentedDocumentName && this.pricingSpecParams == that.pricingSpecParams && this.qpTypeId == that.qpTypeId && this.quantity == that.quantity && this.shipmentMonth == that.shipmentMonth && this.shipmentYear == that.shipmentYear && this.uom == that.uom && this.vatInvoiceDate == that.vatInvoiceDate && this.vatInvoiceType == that.vatInvoiceType &&  true
        }
        else false
    case _ => false
  }

  override def canEqual(that : Any) = that.isInstanceOf[com.trafigura.tradecapture.internal.refinedmetal.SummaryDocumentQuotaParameters]

  override def hashCode = {
    (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 *  1
    ) +
         (if (deliveryMonth == null) 0 else deliveryMonth.hashCode) 
    ) +
         (if (deliveryYear == null) 0 else deliveryYear.hashCode) 
    ) +
         numberOfDeferredCreditDays.hashCode
        
    ) +
         ordinal.hashCode
        
    ) +
         presentedDocumentIsCopy.hashCode
        
    ) +
         (if (presentedDocumentName == null) 0 else presentedDocumentName.hashCode) 
    ) +
         (if (pricingSpecParams == null) 0 else pricingSpecParams.hashCode) 
    ) +
         qpTypeId.hashCode
        
    ) +
         (if (quantity == null) 0 else quantity.hashCode) 
    ) +
         (if (shipmentMonth == null) 0 else shipmentMonth.hashCode) 
    ) +
         (if (shipmentYear == null) 0 else shipmentYear.hashCode) 
    ) +
         (if (uom == null) 0 else uom.hashCode) 
    ) +
         (if (vatInvoiceDate == null) 0 else vatInvoiceDate.hashCode) 
    ) +
         (if (vatInvoiceType == null) 0 else vatInvoiceType.hashCode) 
    
  }

  override def toString = {
    "{com.trafigura.tradecapture.internal.refinedmetal.SummaryDocumentQuotaParameters: " + "" + "deliveryMonth = " + deliveryMonth + ", " + "deliveryYear = " + deliveryYear + ", " + "numberOfDeferredCreditDays = " + numberOfDeferredCreditDays + ", " + "ordinal = " + ordinal + ", " + "presentedDocumentIsCopy = " + presentedDocumentIsCopy + ", " + "presentedDocumentName = " + presentedDocumentName + ", " + "pricingSpecParams = " + pricingSpecParams + ", " + "qpTypeId = " + qpTypeId + ", " + "quantity = " + quantity + ", " + "shipmentMonth = " + shipmentMonth + ", " + "shipmentYear = " + shipmentYear + ", " + "uom = " + uom + ", " + "vatInvoiceDate = " + vatInvoiceDate + ", " + "vatInvoiceType = " + vatInvoiceType +  "}"
  }


  
         def toJson() : org.codehaus.jettison.json.JSONObject = {
      toJson(new SerialisationHelper)
    }

     def toJson(differentiator: SerialisationHelper) : org.codehaus.jettison.json.JSONObject = {
        var result = new org.codehaus.jettison.json.JSONObject();

        result.put("_node", differentiator.idFor(this))

        result.put("Type", "TradeCapture.Internal.RefinedMetal.SummaryDocumentQuotaParameters@1@1.0")
        
          
          
          
          
            result.putOpt("Ordinal", this.ordinal);
          
        
          
          
          
          if(this.quantity != None) {
            result.putOpt("Quantity", this.quantity.getOrElse(null));
          }
        
          
          
          
          
            result.putOpt("Uom", this.uom);
          
        
          
          
          
          
            result.putOpt("DeliveryMonth", this.deliveryMonth);
          
        
          
          
          
          
            result.putOpt("DeliveryYear", this.deliveryYear);
          
        
          
          
          
          
            result.putOpt("ShipmentMonth", this.shipmentMonth);
          
        
          
          
          
          
            result.putOpt("ShipmentYear", this.shipmentYear);
          
        
          
          
          
          
            result.putOpt("VatInvoiceDate", JSONConversions.optionalDateToJSON(this.vatInvoiceDate));
          
        
          
          
          
          
            result.putOpt("VatInvoiceType", (this.vatInvoiceType) match { case null => null; case o => o.toJson });
          
        
          
          
          
          
            result.putOpt("QpTypeId", this.qpTypeId);
          
        
          
          
          
          
            result.putOpt("PresentedDocumentName", this.presentedDocumentName);
          
        
          
          
          
          
            result.putOpt("PresentedDocumentIsCopy", this.presentedDocumentIsCopy);
          
        
          
          
          
          
            result.putOpt("NumberOfDeferredCreditDays", this.numberOfDeferredCreditDays);
          
        
          
          
          
          
            result.putOpt("PricingSpecParams", new org.codehaus.jettison.json.JSONArray(if(this.pricingSpecParams == null) new java.util.ArrayList() else java.util.Arrays.asList(this.pricingSpecParams.map(t => (t) match { case null => null; case o => o.toJson(differentiator) }).toArray: _*)));
          
        
        return result;
    }

     def loadJson(jobj : org.codehaus.jettison.json.JSONObject, cache: DeserialisationHelper) = {
        
        
          
              ordinal = JSONConversions.optional[Int](jobj.opt("Ordinal"), 0)
          
              quantity = (jobj.opt("Quantity")) match {case null => None; case n:Number => Some(n.doubleValue()); case _ => None}
          
              uom = JSONConversions.optional[String](jobj.opt("Uom"), null)
          
              deliveryMonth = JSONConversions.optional[String](jobj.opt("DeliveryMonth"), null)
          
              deliveryYear = JSONConversions.optional[String](jobj.opt("DeliveryYear"), null)
          
              shipmentMonth = JSONConversions.optional[String](jobj.opt("ShipmentMonth"), null)
          
              shipmentYear = JSONConversions.optional[String](jobj.opt("ShipmentYear"), null)
          
              vatInvoiceDate = JSONConversions.optionalDate(jobj.opt("VatInvoiceDate"))
          
              vatInvoiceType = (jobj.optString("VatInvoiceType")) match { case null => null; case s: String => SummaryDocumentQuotaParametersVatInvoiceTypeEnum.forName(s) }
          
              qpTypeId = JSONConversions.optional[Int](jobj.opt("QpTypeId"), 0)
          
              presentedDocumentName = JSONConversions.optional[String](jobj.opt("PresentedDocumentName"), null)
          
              presentedDocumentIsCopy = JSONConversions.optional[Boolean](jobj.opt("PresentedDocumentIsCopy"), false)
          
              numberOfDeferredCreditDays = JSONConversions.optional[Int](jobj.opt("NumberOfDeferredCreditDays"), 0)
          
              pricingSpecParams = JSONConversions.optionalList(jobj.opt("PricingSpecParams"), x => (x) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.tradecapture.internal.refinedmetal.DocumentPricingSpecParams.fromJson(o, cache))) })
          
        
    }

  
}

object SummaryDocumentQuotaParameters {
  def version = ModelVersion("1")
  def wireFormatVersion = ModelVersion("1.0")

  
        val jsonTypeName = "TradeCapture.Internal.RefinedMetal.SummaryDocumentQuotaParameters"

    def fromJson(jobj : org.codehaus.jettison.json.JSONObject, cache: DeserialisationHelper = new DeserialisationHelper) : com.trafigura.tradecapture.internal.refinedmetal.SummaryDocumentQuotaParameters = {
      val v = TypeHolder(jobj.optString("Type"))

      v.assertModelVersion(version, "com.trafigura.tradecapture.internal.refinedmetal.SummaryDocumentQuotaParameters")
      v.assertWireFormatVersion(wireFormatVersion, "com.trafigura.tradecapture.internal.refinedmetal.SummaryDocumentQuotaParameters")

      
        
            val result = new com.trafigura.tradecapture.internal.refinedmetal.SummaryDocumentQuotaParameters()
            result.loadJson(jobj, cache)
            result
        
      
    }

  

  

  
    def apply(ordinal: Int = 0, quantity: scala.Option[Double] = None, uom: String = null, deliveryMonth: String = null, deliveryYear: String = null, shipmentMonth: String = null, shipmentYear: String = null, vatInvoiceDate: org.joda.time.LocalDate = null, vatInvoiceType: SummaryDocumentQuotaParametersVatInvoiceTypeEnum = null, qpTypeId: Int = 0, presentedDocumentName: String = null, presentedDocumentIsCopy: Boolean = false, numberOfDeferredCreditDays: Int = 0, pricingSpecParams: List[com.trafigura.tradecapture.internal.refinedmetal.DocumentPricingSpecParams] = null) = {
      val res = new com.trafigura.tradecapture.internal.refinedmetal.SummaryDocumentQuotaParameters
      
        res.ordinal = ordinal
      
        res.quantity = quantity
      
        res.uom = uom
      
        res.deliveryMonth = deliveryMonth
      
        res.deliveryYear = deliveryYear
      
        res.shipmentMonth = shipmentMonth
      
        res.shipmentYear = shipmentYear
      
        res.vatInvoiceDate = vatInvoiceDate
      
        res.vatInvoiceType = vatInvoiceType
      
        res.qpTypeId = qpTypeId
      
        res.presentedDocumentName = presentedDocumentName
      
        res.presentedDocumentIsCopy = presentedDocumentIsCopy
      
        res.numberOfDeferredCreditDays = numberOfDeferredCreditDays
      
        res.pricingSpecParams = pricingSpecParams
      
      res
    }
  
}
