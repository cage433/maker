/**
 * WARNING: This file was automatically generated by the Trading Hub tooling version 2.15.
 * Any manual changes may be overwritten and lost!
 */


// Generated from model_service_json.rb

package com.trafigura.tradecapture.internal.refinedmetaltradeservice

import com.trafigura.tradecapture.internal.refinedmetal._
import com.trafigura.tradecapture.internal.refinedmetaltradeservice._
import com.trafigura.edm.shared.types._

import org.codehaus.jettison.json.JSONObject
import com.trafigura.tradinghub.support._

// JSON support for GetTrades

object GetTradesJSON extends JSONServiceDispatcher[GetTrades] {
  def serviceName = "TradeCapture.Internal.RefinedMetalTradeService.GetTrades"

  def decodeOperationName(jsonName:String) = {
    jsonName match {
      case "GetAll" => "GetAll"
      case "GetByOid" => "GetByOid"
      case "GetByTitanId" => "GetByTitanId"
      case "GetByTitanIdWithVersions" => "GetByTitanIdWithVersions"
      case "GetVersion" => "GetVersion"
      case "GetVersions" => "GetVersions"
      case "GetByNeptuneId" => "GetByNeptuneId"
      case "GetBySearchPattern" => "GetBySearchPattern"
      case "Get" => "Get"
      
    }
  }

  def parseParameters(operation:String, params: JSONObject) = {
    operation match {
      
      case "GetAll" =>
        
          Map()
        
      
      case "GetByOid" =>
        
          val cache = new DeserialisationHelper
          Map("oid" -> (JSONConversions.optional[Int](params.opt("Oid"), 0)))
        
      
      case "GetByTitanId" =>
        
          val cache = new DeserialisationHelper
          Map("titanId" -> ((params.opt("TitanId")) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.edm.shared.types.TitanId.fromJson(o, cache))) }))
        
      
      case "GetByTitanIdWithVersions" =>
        
          val cache = new DeserialisationHelper
          Map("titanId" -> ((params.opt("TitanId")) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.edm.shared.types.TitanId.fromJson(o, cache))) }))
        
      
      case "GetVersion" =>
        
          val cache = new DeserialisationHelper
          Map("titanId" -> ((params.opt("TitanId")) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.edm.shared.types.TitanId.fromJson(o, cache))) }), "asOf" -> (JSONConversions.optionalDatetime(params.opt("AsOf"))))
        
      
      case "GetVersions" =>
        
          val cache = new DeserialisationHelper
          Map("titanId" -> ((params.opt("TitanId")) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.edm.shared.types.TitanId.fromJson(o, cache))) }))
        
      
      case "GetByNeptuneId" =>
        
          val cache = new DeserialisationHelper
          Map("neptuneId" -> (JSONConversions.optional[String](params.opt("NeptuneId"), null)))
        
      
      case "GetBySearchPattern" =>
        
          val cache = new DeserialisationHelper
          Map("neptuneId" -> (JSONConversions.optional[String](params.opt("NeptuneId"), null)))
        
      
      case "Get" =>
        
          val cache = new DeserialisationHelper
          Map("titanIDSmuggledAsOid" -> (JSONConversions.optional[Int](params.opt("TitanIDSmuggledAsOid"), 0)))
        
      
    }
  }

  def invoke(target: GetTrades, operation: String, params: Map[String, Any]): Any = {
    operation match {
      
      case "GetAll" =>
        target.getAll()
      
      case "GetByOid" =>
        target.getByOid(params("oid").asInstanceOf[Int])
      
      case "GetByTitanId" =>
        target.getByTitanId(params("titanId").asInstanceOf[com.trafigura.edm.shared.types.TitanId])
      
      case "GetByTitanIdWithVersions" =>
        target.getByTitanIdWithVersions(params("titanId").asInstanceOf[com.trafigura.edm.shared.types.TitanId])
      
      case "GetVersion" =>
        target.getVersion(params("titanId").asInstanceOf[com.trafigura.edm.shared.types.TitanId], params("asOf").asInstanceOf[org.joda.time.DateTime])
      
      case "GetVersions" =>
        target.getVersions(params("titanId").asInstanceOf[com.trafigura.edm.shared.types.TitanId])
      
      case "GetByNeptuneId" =>
        target.getByNeptuneId(params("neptuneId").asInstanceOf[String])
      
      case "GetBySearchPattern" =>
        target.getBySearchPattern(params("neptuneId").asInstanceOf[String])
      
      case "Get" =>
        target.get(params("titanIDSmuggledAsOid").asInstanceOf[Int])
      
    }
  }

  def addResponse(operation:String, jsonResponse:JSONObject, response:Any) = {
    val differentiator = new SerialisationHelper
    operation match {
      
      case "GetAll" =>
        jsonResponse.putOpt("result", new org.codehaus.jettison.json.JSONArray(if(response.asInstanceOf[List[com.trafigura.tradecapture.internal.refinedmetal.RefinedMetalTrade]] == null) new java.util.ArrayList() else java.util.Arrays.asList(response.asInstanceOf[List[com.trafigura.tradecapture.internal.refinedmetal.RefinedMetalTrade]].map(t => (t) match { case null => null; case o => o.toJson(differentiator) }).toArray: _*)))
      
      case "GetByOid" =>
        jsonResponse.putOpt("result", (response.asInstanceOf[com.trafigura.tradecapture.internal.refinedmetal.RefinedMetalTrade]) match { case null => null; case o => o.toJson(differentiator) })
      
      case "GetByTitanId" =>
        jsonResponse.putOpt("result", (response.asInstanceOf[com.trafigura.tradecapture.internal.refinedmetal.RefinedMetalTrade]) match { case null => null; case o => o.toJson(differentiator) })
      
      case "GetByTitanIdWithVersions" =>
        jsonResponse.putOpt("result", (response.asInstanceOf[com.trafigura.tradecapture.internal.refinedmetaltradeservice.GetTradeWithVersionsResult]) match { case null => null; case o => o.toJson(differentiator) })
      
      case "GetVersion" =>
        jsonResponse.putOpt("result", (response.asInstanceOf[com.trafigura.tradecapture.internal.refinedmetal.RefinedMetalTrade]) match { case null => null; case o => o.toJson(differentiator) })
      
      case "GetVersions" =>
        jsonResponse.putOpt("result", new org.codehaus.jettison.json.JSONArray(if(response.asInstanceOf[List[com.trafigura.tradecapture.internal.refinedmetal.RefinedMetalTrade]] == null) new java.util.ArrayList() else java.util.Arrays.asList(response.asInstanceOf[List[com.trafigura.tradecapture.internal.refinedmetal.RefinedMetalTrade]].map(t => (t) match { case null => null; case o => o.toJson(differentiator) }).toArray: _*)))
      
      case "GetByNeptuneId" =>
        jsonResponse.putOpt("result", (response.asInstanceOf[com.trafigura.tradecapture.internal.refinedmetal.RefinedMetalTrade]) match { case null => null; case o => o.toJson(differentiator) })
      
      case "GetBySearchPattern" =>
        jsonResponse.putOpt("result", (response.asInstanceOf[com.trafigura.tradecapture.internal.refinedmetaltradeservice.SearchResult]) match { case null => null; case o => o.toJson(differentiator) })
      
      case "Get" =>
        jsonResponse.putOpt("result", (response.asInstanceOf[com.trafigura.tradecapture.internal.refinedmetal.RefinedMetalTrade]) match { case null => null; case o => o.toJson(differentiator) })
      
    }
  }

  
  def serializeGetAll(): JSONObject = {
    val differentiator = new SerialisationHelper
    val params = new JSONObject
    
    params
  }
  
  def serializeGetByOid(oid: Int): JSONObject = {
    val differentiator = new SerialisationHelper
    val params = new JSONObject
    
      params.putOpt("Oid", oid)
    
    params
  }
  
  def serializeGetByTitanId(titanId: com.trafigura.edm.shared.types.TitanId): JSONObject = {
    val differentiator = new SerialisationHelper
    val params = new JSONObject
    
      params.putOpt("TitanId", (titanId) match { case null => null; case o => o.toJson(differentiator) })
    
    params
  }
  
  def serializeGetByTitanIdWithVersions(titanId: com.trafigura.edm.shared.types.TitanId): JSONObject = {
    val differentiator = new SerialisationHelper
    val params = new JSONObject
    
      params.putOpt("TitanId", (titanId) match { case null => null; case o => o.toJson(differentiator) })
    
    params
  }
  
  def serializeGetVersion(titanId: com.trafigura.edm.shared.types.TitanId, asOf: org.joda.time.DateTime): JSONObject = {
    val differentiator = new SerialisationHelper
    val params = new JSONObject
    
      params.putOpt("TitanId", (titanId) match { case null => null; case o => o.toJson(differentiator) })
    
      params.putOpt("AsOf", JSONConversions.optionalDatetimeToJSON(asOf))
    
    params
  }
  
  def serializeGetVersions(titanId: com.trafigura.edm.shared.types.TitanId): JSONObject = {
    val differentiator = new SerialisationHelper
    val params = new JSONObject
    
      params.putOpt("TitanId", (titanId) match { case null => null; case o => o.toJson(differentiator) })
    
    params
  }
  
  def serializeGetByNeptuneId(neptuneId: String): JSONObject = {
    val differentiator = new SerialisationHelper
    val params = new JSONObject
    
      params.putOpt("NeptuneId", neptuneId)
    
    params
  }
  
  def serializeGetBySearchPattern(neptuneId: String): JSONObject = {
    val differentiator = new SerialisationHelper
    val params = new JSONObject
    
      params.putOpt("NeptuneId", neptuneId)
    
    params
  }
  
  def serializeGet(titanIDSmuggledAsOid: Int): JSONObject = {
    val differentiator = new SerialisationHelper
    val params = new JSONObject
    
      params.putOpt("TitanIDSmuggledAsOid", titanIDSmuggledAsOid)
    
    params
  }
  

  class Proxy(val handler: (String, JSONObject) => JSONObject) extends GetTrades {
  
    def getAll(): List[com.trafigura.tradecapture.internal.refinedmetal.RefinedMetalTrade] = {
        val request = new JSONObject
        request.put("method", "GetAll")
        
        var routing = null
        val response = handler(routing, request)
        if (response == null) {
          null.asInstanceOf[List[com.trafigura.tradecapture.internal.refinedmetal.RefinedMetalTrade]]   // Doesn't work well with primitive types, but we should only see null in cases like discover anyway
        } else {
          val cache = new DeserialisationHelper
          JSONConversions.optionalList(response.opt("result"), x => (x) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.tradecapture.internal.refinedmetal.RefinedMetalTrade.fromJson(o, cache))) })
        }
    }
  
    def getByOid(oid: Int): com.trafigura.tradecapture.internal.refinedmetal.RefinedMetalTrade = {
        val request = new JSONObject
        request.put("method", "GetByOid")
        
        request.put("params", serializeGetByOid(oid))
        
        var routing = null
        val response = handler(routing, request)
        if (response == null) {
          null.asInstanceOf[com.trafigura.tradecapture.internal.refinedmetal.RefinedMetalTrade]   // Doesn't work well with primitive types, but we should only see null in cases like discover anyway
        } else {
          val cache = new DeserialisationHelper
          (response.opt("result")) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.tradecapture.internal.refinedmetal.RefinedMetalTrade.fromJson(o, cache))) }
        }
    }
  
    def getByTitanId(titanId: com.trafigura.edm.shared.types.TitanId): com.trafigura.tradecapture.internal.refinedmetal.RefinedMetalTrade = {
        val request = new JSONObject
        request.put("method", "GetByTitanId")
        
        request.put("params", serializeGetByTitanId(titanId))
        
        var routing = null
        val response = handler(routing, request)
        if (response == null) {
          null.asInstanceOf[com.trafigura.tradecapture.internal.refinedmetal.RefinedMetalTrade]   // Doesn't work well with primitive types, but we should only see null in cases like discover anyway
        } else {
          val cache = new DeserialisationHelper
          (response.opt("result")) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.tradecapture.internal.refinedmetal.RefinedMetalTrade.fromJson(o, cache))) }
        }
    }
  
    def getByTitanIdWithVersions(titanId: com.trafigura.edm.shared.types.TitanId): com.trafigura.tradecapture.internal.refinedmetaltradeservice.GetTradeWithVersionsResult = {
        val request = new JSONObject
        request.put("method", "GetByTitanIdWithVersions")
        
        request.put("params", serializeGetByTitanIdWithVersions(titanId))
        
        var routing = null
        val response = handler(routing, request)
        if (response == null) {
          null.asInstanceOf[com.trafigura.tradecapture.internal.refinedmetaltradeservice.GetTradeWithVersionsResult]   // Doesn't work well with primitive types, but we should only see null in cases like discover anyway
        } else {
          val cache = new DeserialisationHelper
          (response.opt("result")) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.tradecapture.internal.refinedmetaltradeservice.GetTradeWithVersionsResult.fromJson(o, cache))) }
        }
    }
  
    def getVersion(titanId: com.trafigura.edm.shared.types.TitanId, asOf: org.joda.time.DateTime): com.trafigura.tradecapture.internal.refinedmetal.RefinedMetalTrade = {
        val request = new JSONObject
        request.put("method", "GetVersion")
        
        request.put("params", serializeGetVersion(titanId, asOf))
        
        var routing = null
        val response = handler(routing, request)
        if (response == null) {
          null.asInstanceOf[com.trafigura.tradecapture.internal.refinedmetal.RefinedMetalTrade]   // Doesn't work well with primitive types, but we should only see null in cases like discover anyway
        } else {
          val cache = new DeserialisationHelper
          (response.opt("result")) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.tradecapture.internal.refinedmetal.RefinedMetalTrade.fromJson(o, cache))) }
        }
    }
  
    def getVersions(titanId: com.trafigura.edm.shared.types.TitanId): List[com.trafigura.tradecapture.internal.refinedmetal.RefinedMetalTrade] = {
        val request = new JSONObject
        request.put("method", "GetVersions")
        
        request.put("params", serializeGetVersions(titanId))
        
        var routing = null
        val response = handler(routing, request)
        if (response == null) {
          null.asInstanceOf[List[com.trafigura.tradecapture.internal.refinedmetal.RefinedMetalTrade]]   // Doesn't work well with primitive types, but we should only see null in cases like discover anyway
        } else {
          val cache = new DeserialisationHelper
          JSONConversions.optionalList(response.opt("result"), x => (x) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.tradecapture.internal.refinedmetal.RefinedMetalTrade.fromJson(o, cache))) })
        }
    }
  
    def getByNeptuneId(neptuneId: String): com.trafigura.tradecapture.internal.refinedmetal.RefinedMetalTrade = {
        val request = new JSONObject
        request.put("method", "GetByNeptuneId")
        
        request.put("params", serializeGetByNeptuneId(neptuneId))
        
        var routing = null
        val response = handler(routing, request)
        if (response == null) {
          null.asInstanceOf[com.trafigura.tradecapture.internal.refinedmetal.RefinedMetalTrade]   // Doesn't work well with primitive types, but we should only see null in cases like discover anyway
        } else {
          val cache = new DeserialisationHelper
          (response.opt("result")) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.tradecapture.internal.refinedmetal.RefinedMetalTrade.fromJson(o, cache))) }
        }
    }
  
    def getBySearchPattern(neptuneId: String): com.trafigura.tradecapture.internal.refinedmetaltradeservice.SearchResult = {
        val request = new JSONObject
        request.put("method", "GetBySearchPattern")
        
        request.put("params", serializeGetBySearchPattern(neptuneId))
        
        var routing = null
        val response = handler(routing, request)
        if (response == null) {
          null.asInstanceOf[com.trafigura.tradecapture.internal.refinedmetaltradeservice.SearchResult]   // Doesn't work well with primitive types, but we should only see null in cases like discover anyway
        } else {
          val cache = new DeserialisationHelper
          (response.opt("result")) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.tradecapture.internal.refinedmetaltradeservice.SearchResult.fromJson(o, cache))) }
        }
    }
  
    def get(titanIDSmuggledAsOid: Int): com.trafigura.tradecapture.internal.refinedmetal.RefinedMetalTrade = {
        val request = new JSONObject
        request.put("method", "Get")
        
        request.put("params", serializeGet(titanIDSmuggledAsOid))
        
        var routing = null
        val response = handler(routing, request)
        if (response == null) {
          null.asInstanceOf[com.trafigura.tradecapture.internal.refinedmetal.RefinedMetalTrade]   // Doesn't work well with primitive types, but we should only see null in cases like discover anyway
        } else {
          val cache = new DeserialisationHelper
          (response.opt("result")) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.tradecapture.internal.refinedmetal.RefinedMetalTrade.fromJson(o, cache))) }
        }
    }
  
  }
}

