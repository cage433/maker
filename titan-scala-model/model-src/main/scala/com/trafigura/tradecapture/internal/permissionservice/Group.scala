/**
 * WARNING: This file was automatically generated by the Trading Hub tooling version 2.15.
 * Any manual changes may be overwritten and lost!
 */


// Generated from model_object_scala.erb

package com.trafigura.tradecapture.internal.permissionservice





import com.trafigura.tradinghub.support._
import scala.collection.JavaConversions._



/**
 group entity
 */


 class Group extends com.trafigura.tradinghub.support.ModelObject  {
  


  
    

var oid:Int = 0
    
    
    
    /**
     , :business_key => true
     */

var name:String = null
    
    
    

var description:String = null
    
    
    

var disabled:Boolean = false
    
    
    

var deleted:Boolean = false
    
    





  override def equals(o: Any) = o match {
    case r: AnyRef =>
        if (o.isInstanceOf[com.trafigura.tradecapture.internal.permissionservice.Group]) {
            val that = r.asInstanceOf[com.trafigura.tradecapture.internal.permissionservice.Group]
            that.canEqual(this) && this.deleted == that.deleted && this.description == that.description && this.disabled == that.disabled && this.name == that.name && this.oid == that.oid &&  true
        }
        else false
    case _ => false
  }

  override def canEqual(that : Any) = that.isInstanceOf[com.trafigura.tradecapture.internal.permissionservice.Group]

  override def hashCode = {
    (41 * (41 * (41 * (41 * (41 *  1
    ) +
         deleted.hashCode
        
    ) +
         (if (description == null) 0 else description.hashCode) 
    ) +
         disabled.hashCode
        
    ) +
         (if (name == null) 0 else name.hashCode) 
    ) +
         oid.hashCode
        
    
  }

  override def toString = {
    "{com.trafigura.tradecapture.internal.permissionservice.Group: " + "" + "deleted = " + deleted + ", " + "description = " + description + ", " + "disabled = " + disabled + ", " + "name = " + name + ", " + "oid = " + oid +  "}"
  }


  
         def toJson() : org.codehaus.jettison.json.JSONObject = {
      toJson(new SerialisationHelper)
    }

     def toJson(differentiator: SerialisationHelper) : org.codehaus.jettison.json.JSONObject = {
        var result = new org.codehaus.jettison.json.JSONObject();

        result.put("_node", differentiator.idFor(this))

        result.put("Type", "TradeCapture.Internal.PermissionService.Group@1@1.0")
        
          
          
          
          
            result.putOpt("Oid", this.oid);
          
        
          
          
          
          
            result.putOpt("Name", this.name);
          
        
          
          
          
          
            result.putOpt("Description", this.description);
          
        
          
          
          
          
            result.putOpt("Disabled", this.disabled);
          
        
          
          
          
          
            result.putOpt("Deleted", this.deleted);
          
        
        return result;
    }

     def loadJson(jobj : org.codehaus.jettison.json.JSONObject, cache: DeserialisationHelper) = {
        
        
          
              oid = JSONConversions.optional[Int](jobj.opt("Oid"), 0)
          
              name = JSONConversions.optional[String](jobj.opt("Name"), null)
          
              description = JSONConversions.optional[String](jobj.opt("Description"), null)
          
              disabled = JSONConversions.optional[Boolean](jobj.opt("Disabled"), false)
          
              deleted = JSONConversions.optional[Boolean](jobj.opt("Deleted"), false)
          
        
    }

  
}

object Group {
  def version = ModelVersion("1")
  def wireFormatVersion = ModelVersion("1.0")

  
        val jsonTypeName = "TradeCapture.Internal.PermissionService.Group"

    def fromJson(jobj : org.codehaus.jettison.json.JSONObject, cache: DeserialisationHelper = new DeserialisationHelper) : com.trafigura.tradecapture.internal.permissionservice.Group = {
      val v = TypeHolder(jobj.optString("Type"))

      v.assertModelVersion(version, "com.trafigura.tradecapture.internal.permissionservice.Group")
      v.assertWireFormatVersion(wireFormatVersion, "com.trafigura.tradecapture.internal.permissionservice.Group")

      
        
            val result = new com.trafigura.tradecapture.internal.permissionservice.Group()
            result.loadJson(jobj, cache)
            result
        
      
    }

  

  

  
    def apply(oid: Int = 0, name: String = null, description: String = null, disabled: Boolean = false, deleted: Boolean = false) = {
      val res = new com.trafigura.tradecapture.internal.permissionservice.Group
      
        res.oid = oid
      
        res.name = name
      
        res.description = description
      
        res.disabled = disabled
      
        res.deleted = deleted
      
      res
    }
  
}
