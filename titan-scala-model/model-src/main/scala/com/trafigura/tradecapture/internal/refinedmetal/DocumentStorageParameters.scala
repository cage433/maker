/**
 * WARNING: This file was automatically generated by the Trading Hub tooling version 2.15.
 * Any manual changes may be overwritten and lost!
 */


// Generated from model_object_scala.erb

package com.trafigura.tradecapture.internal.refinedmetal





import com.trafigura.tradinghub.support._
import scala.collection.JavaConversions._



/**
 returned by the trade repository for Murdoch/Thunderhead to generate trade summary document
 */


 class DocumentStorageParameters extends com.trafigura.tradinghub.support.ModelObject  {
  


  
    

var groupCompanyCode:String = null
    
    
    

var purchaseOrSale:String = null
    
    
    

var languageCode:String = null
    
    
    

var counterparty:String = null
    
    
    

var trafficHub:String = null
    
    
    

var metal:String = null
    
    
    

var trader:String = null
    
    
    

var neptuneId:String = null
    
    
    

var contractNumber:String = null
    
    
    

var titanId:String = null
    
    
    

var oid:Int = 0
    
    





  override def equals(o: Any) = o match {
    case r: AnyRef =>
        if (o.isInstanceOf[com.trafigura.tradecapture.internal.refinedmetal.DocumentStorageParameters]) {
            val that = r.asInstanceOf[com.trafigura.tradecapture.internal.refinedmetal.DocumentStorageParameters]
            that.canEqual(this) && this.contractNumber == that.contractNumber && this.counterparty == that.counterparty && this.groupCompanyCode == that.groupCompanyCode && this.languageCode == that.languageCode && this.metal == that.metal && this.neptuneId == that.neptuneId && this.oid == that.oid && this.purchaseOrSale == that.purchaseOrSale && this.titanId == that.titanId && this.trader == that.trader && this.trafficHub == that.trafficHub &&  true
        }
        else false
    case _ => false
  }

  override def canEqual(that : Any) = that.isInstanceOf[com.trafigura.tradecapture.internal.refinedmetal.DocumentStorageParameters]

  override def hashCode = {
    (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 *  1
    ) +
         (if (contractNumber == null) 0 else contractNumber.hashCode) 
    ) +
         (if (counterparty == null) 0 else counterparty.hashCode) 
    ) +
         (if (groupCompanyCode == null) 0 else groupCompanyCode.hashCode) 
    ) +
         (if (languageCode == null) 0 else languageCode.hashCode) 
    ) +
         (if (metal == null) 0 else metal.hashCode) 
    ) +
         (if (neptuneId == null) 0 else neptuneId.hashCode) 
    ) +
         oid.hashCode
        
    ) +
         (if (purchaseOrSale == null) 0 else purchaseOrSale.hashCode) 
    ) +
         (if (titanId == null) 0 else titanId.hashCode) 
    ) +
         (if (trader == null) 0 else trader.hashCode) 
    ) +
         (if (trafficHub == null) 0 else trafficHub.hashCode) 
    
  }

  override def toString = {
    "{com.trafigura.tradecapture.internal.refinedmetal.DocumentStorageParameters: " + "" + "contractNumber = " + contractNumber + ", " + "counterparty = " + counterparty + ", " + "groupCompanyCode = " + groupCompanyCode + ", " + "languageCode = " + languageCode + ", " + "metal = " + metal + ", " + "neptuneId = " + neptuneId + ", " + "oid = " + oid + ", " + "purchaseOrSale = " + purchaseOrSale + ", " + "titanId = " + titanId + ", " + "trader = " + trader + ", " + "trafficHub = " + trafficHub +  "}"
  }


  
         def toJson() : org.codehaus.jettison.json.JSONObject = {
      toJson(new SerialisationHelper)
    }

     def toJson(differentiator: SerialisationHelper) : org.codehaus.jettison.json.JSONObject = {
        var result = new org.codehaus.jettison.json.JSONObject();

        result.put("_node", differentiator.idFor(this))

        result.put("Type", "TradeCapture.Internal.RefinedMetal.DocumentStorageParameters@1@1.0")
        
          
          
          
          
            result.putOpt("GroupCompanyCode", this.groupCompanyCode);
          
        
          
          
          
          
            result.putOpt("PurchaseOrSale", this.purchaseOrSale);
          
        
          
          
          
          
            result.putOpt("LanguageCode", this.languageCode);
          
        
          
          
          
          
            result.putOpt("Counterparty", this.counterparty);
          
        
          
          
          
          
            result.putOpt("TrafficHub", this.trafficHub);
          
        
          
          
          
          
            result.putOpt("Metal", this.metal);
          
        
          
          
          
          
            result.putOpt("Trader", this.trader);
          
        
          
          
          
          
            result.putOpt("NeptuneId", this.neptuneId);
          
        
          
          
          
          
            result.putOpt("ContractNumber", this.contractNumber);
          
        
          
          
          
          
            result.putOpt("TitanId", this.titanId);
          
        
          
          
          
          
            result.putOpt("Oid", this.oid);
          
        
        return result;
    }

     def loadJson(jobj : org.codehaus.jettison.json.JSONObject, cache: DeserialisationHelper) = {
        
        
          
              groupCompanyCode = JSONConversions.optional[String](jobj.opt("GroupCompanyCode"), null)
          
              purchaseOrSale = JSONConversions.optional[String](jobj.opt("PurchaseOrSale"), null)
          
              languageCode = JSONConversions.optional[String](jobj.opt("LanguageCode"), null)
          
              counterparty = JSONConversions.optional[String](jobj.opt("Counterparty"), null)
          
              trafficHub = JSONConversions.optional[String](jobj.opt("TrafficHub"), null)
          
              metal = JSONConversions.optional[String](jobj.opt("Metal"), null)
          
              trader = JSONConversions.optional[String](jobj.opt("Trader"), null)
          
              neptuneId = JSONConversions.optional[String](jobj.opt("NeptuneId"), null)
          
              contractNumber = JSONConversions.optional[String](jobj.opt("ContractNumber"), null)
          
              titanId = JSONConversions.optional[String](jobj.opt("TitanId"), null)
          
              oid = JSONConversions.optional[Int](jobj.opt("Oid"), 0)
          
        
    }

  
}

object DocumentStorageParameters {
  def version = ModelVersion("1")
  def wireFormatVersion = ModelVersion("1.0")

  
        val jsonTypeName = "TradeCapture.Internal.RefinedMetal.DocumentStorageParameters"

    def fromJson(jobj : org.codehaus.jettison.json.JSONObject, cache: DeserialisationHelper = new DeserialisationHelper) : com.trafigura.tradecapture.internal.refinedmetal.DocumentStorageParameters = {
      val v = TypeHolder(jobj.optString("Type"))

      v.assertModelVersion(version, "com.trafigura.tradecapture.internal.refinedmetal.DocumentStorageParameters")
      v.assertWireFormatVersion(wireFormatVersion, "com.trafigura.tradecapture.internal.refinedmetal.DocumentStorageParameters")

      
        
            val result = new com.trafigura.tradecapture.internal.refinedmetal.DocumentStorageParameters()
            result.loadJson(jobj, cache)
            result
        
      
    }

  

  

  
    def apply(groupCompanyCode: String = null, purchaseOrSale: String = null, languageCode: String = null, counterparty: String = null, trafficHub: String = null, metal: String = null, trader: String = null, neptuneId: String = null, contractNumber: String = null, titanId: String = null, oid: Int = 0) = {
      val res = new com.trafigura.tradecapture.internal.refinedmetal.DocumentStorageParameters
      
        res.groupCompanyCode = groupCompanyCode
      
        res.purchaseOrSale = purchaseOrSale
      
        res.languageCode = languageCode
      
        res.counterparty = counterparty
      
        res.trafficHub = trafficHub
      
        res.metal = metal
      
        res.trader = trader
      
        res.neptuneId = neptuneId
      
        res.contractNumber = contractNumber
      
        res.titanId = titanId
      
        res.oid = oid
      
      res
    }
  
}
