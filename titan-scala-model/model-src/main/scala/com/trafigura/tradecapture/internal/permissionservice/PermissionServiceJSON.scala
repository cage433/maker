/**
 * WARNING: This file was automatically generated by the Trading Hub tooling version 2.15.
 * Any manual changes may be overwritten and lost!
 */


// Generated from model_service_json.rb

package com.trafigura.tradecapture.internal.permissionservice

import com.trafigura.tradecapture.internal.permissionservice._

import org.codehaus.jettison.json.JSONObject
import com.trafigura.tradinghub.support._

// JSON support for PermissionService

object PermissionServiceJSON extends JSONServiceDispatcher[PermissionService] {
  def serviceName = "TradeCapture.Internal.PermissionService.PermissionService"

  def decodeOperationName(jsonName:String) = {
    jsonName match {
      case "GetAll" => "GetAll"
      case "GetAllUser" => "GetAllUser"
      case "GetEffective" => "GetEffective"
      case "CheckPermission" => "CheckPermission"
      case "CheckPermissionForRequester" => "CheckPermissionForRequester"
      case "Create" => "Create"
      case "Delete" => "Delete"
      
    }
  }

  def parseParameters(operation:String, params: JSONObject) = {
    operation match {
      
      case "GetAll" =>
        
          Map()
        
      
      case "GetAllUser" =>
        
          val cache = new DeserialisationHelper
          Map("sid" -> (JSONConversions.optional[String](params.opt("Sid"), null)))
        
      
      case "GetEffective" =>
        
          val cache = new DeserialisationHelper
          Map("sid" -> (JSONConversions.optional[String](params.opt("Sid"), null)), "requiredPermissions" -> (JSONConversions.optionalList(params.opt("RequiredPermissions"), x => (x) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.tradecapture.internal.permissionservice.Permission.fromJson(o, cache))) })))
        
      
      case "CheckPermission" =>
        
          val cache = new DeserialisationHelper
          Map("sid" -> (JSONConversions.optional[String](params.opt("Sid"), null)), "requiredPermissions" -> (JSONConversions.optionalList(params.opt("RequiredPermissions"), x => (x) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.tradecapture.internal.permissionservice.Permission.fromJson(o, cache))) })))
        
      
      case "CheckPermissionForRequester" =>
        
          val cache = new DeserialisationHelper
          Map("requiredPermissions" -> (JSONConversions.optionalList(params.opt("RequiredPermissions"), x => (x) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.tradecapture.internal.permissionservice.Permission.fromJson(o, cache))) })))
        
      
      case "Create" =>
        
          val cache = new DeserialisationHelper
          Map("permission" -> ((params.opt("Permission")) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.tradecapture.internal.permissionservice.Permission.fromJson(o, cache))) }))
        
      
      case "Delete" =>
        
          val cache = new DeserialisationHelper
          Map("permission" -> ((params.opt("Permission")) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.tradecapture.internal.permissionservice.Permission.fromJson(o, cache))) }))
        
      
    }
  }

  def invoke(target: PermissionService, operation: String, params: Map[String, Any]): Any = {
    operation match {
      
      case "GetAll" =>
        target.getAll()
      
      case "GetAllUser" =>
        target.getAllUser(params("sid").asInstanceOf[String])
      
      case "GetEffective" =>
        target.getEffective(params("sid").asInstanceOf[String], params("requiredPermissions").asInstanceOf[List[com.trafigura.tradecapture.internal.permissionservice.Permission]])
      
      case "CheckPermission" =>
        target.checkPermission(params("sid").asInstanceOf[String], params("requiredPermissions").asInstanceOf[List[com.trafigura.tradecapture.internal.permissionservice.Permission]])
      
      case "CheckPermissionForRequester" =>
        target.checkPermissionForRequester(params("requiredPermissions").asInstanceOf[List[com.trafigura.tradecapture.internal.permissionservice.Permission]])
      
      case "Create" =>
        target.create(params("permission").asInstanceOf[com.trafigura.tradecapture.internal.permissionservice.Permission])
      
      case "Delete" =>
        target.delete(params("permission").asInstanceOf[com.trafigura.tradecapture.internal.permissionservice.Permission])
      
    }
  }

  def addResponse(operation:String, jsonResponse:JSONObject, response:Any) = {
    val differentiator = new SerialisationHelper
    operation match {
      
      case "GetAll" =>
        jsonResponse.putOpt("result", new org.codehaus.jettison.json.JSONArray(if(response.asInstanceOf[List[com.trafigura.tradecapture.internal.permissionservice.Permission]] == null) new java.util.ArrayList() else java.util.Arrays.asList(response.asInstanceOf[List[com.trafigura.tradecapture.internal.permissionservice.Permission]].map(t => (t) match { case null => null; case o => o.toJson(differentiator) }).toArray: _*)))
      
      case "GetAllUser" =>
        jsonResponse.putOpt("result", new org.codehaus.jettison.json.JSONArray(if(response.asInstanceOf[List[com.trafigura.tradecapture.internal.permissionservice.Permission]] == null) new java.util.ArrayList() else java.util.Arrays.asList(response.asInstanceOf[List[com.trafigura.tradecapture.internal.permissionservice.Permission]].map(t => (t) match { case null => null; case o => o.toJson(differentiator) }).toArray: _*)))
      
      case "GetEffective" =>
        jsonResponse.putOpt("result", new org.codehaus.jettison.json.JSONArray(if(response.asInstanceOf[List[com.trafigura.tradecapture.internal.permissionservice.Permission]] == null) new java.util.ArrayList() else java.util.Arrays.asList(response.asInstanceOf[List[com.trafigura.tradecapture.internal.permissionservice.Permission]].map(t => (t) match { case null => null; case o => o.toJson(differentiator) }).toArray: _*)))
      
      case "CheckPermission" =>
        jsonResponse.putOpt("result", response.asInstanceOf[Boolean])
      
      case "CheckPermissionForRequester" =>
        jsonResponse.putOpt("result", response.asInstanceOf[Boolean])
      
      case "Create" =>
        jsonResponse.putOpt("result", (response.asInstanceOf[com.trafigura.tradecapture.internal.permissionservice.Permission]) match { case null => null; case o => o.toJson(differentiator) })
      
      case "Delete" =>
        jsonResponse.putOpt("result", response.asInstanceOf[Boolean])
      
    }
  }

  
  def serializeGetAll(): JSONObject = {
    val differentiator = new SerialisationHelper
    val params = new JSONObject
    
    params
  }
  
  def serializeGetAllUser(sid: String): JSONObject = {
    val differentiator = new SerialisationHelper
    val params = new JSONObject
    
      params.putOpt("Sid", sid)
    
    params
  }
  
  def serializeGetEffective(sid: String, requiredPermissions: List[com.trafigura.tradecapture.internal.permissionservice.Permission]): JSONObject = {
    val differentiator = new SerialisationHelper
    val params = new JSONObject
    
      params.putOpt("Sid", sid)
    
      params.putOpt("RequiredPermissions", new org.codehaus.jettison.json.JSONArray(if(requiredPermissions == null) new java.util.ArrayList() else java.util.Arrays.asList(requiredPermissions.map(t => (t) match { case null => null; case o => o.toJson(differentiator) }).toArray: _*)))
    
    params
  }
  
  def serializeCheckPermission(sid: String, requiredPermissions: List[com.trafigura.tradecapture.internal.permissionservice.Permission]): JSONObject = {
    val differentiator = new SerialisationHelper
    val params = new JSONObject
    
      params.putOpt("Sid", sid)
    
      params.putOpt("RequiredPermissions", new org.codehaus.jettison.json.JSONArray(if(requiredPermissions == null) new java.util.ArrayList() else java.util.Arrays.asList(requiredPermissions.map(t => (t) match { case null => null; case o => o.toJson(differentiator) }).toArray: _*)))
    
    params
  }
  
  def serializeCheckPermissionForRequester(requiredPermissions: List[com.trafigura.tradecapture.internal.permissionservice.Permission]): JSONObject = {
    val differentiator = new SerialisationHelper
    val params = new JSONObject
    
      params.putOpt("RequiredPermissions", new org.codehaus.jettison.json.JSONArray(if(requiredPermissions == null) new java.util.ArrayList() else java.util.Arrays.asList(requiredPermissions.map(t => (t) match { case null => null; case o => o.toJson(differentiator) }).toArray: _*)))
    
    params
  }
  
  def serializeCreate(permission: com.trafigura.tradecapture.internal.permissionservice.Permission): JSONObject = {
    val differentiator = new SerialisationHelper
    val params = new JSONObject
    
      params.putOpt("Permission", (permission) match { case null => null; case o => o.toJson(differentiator) })
    
    params
  }
  
  def serializeDelete(permission: com.trafigura.tradecapture.internal.permissionservice.Permission): JSONObject = {
    val differentiator = new SerialisationHelper
    val params = new JSONObject
    
      params.putOpt("Permission", (permission) match { case null => null; case o => o.toJson(differentiator) })
    
    params
  }
  

  class Proxy(val handler: (String, JSONObject) => JSONObject) extends PermissionService {
  
    def getAll(): List[com.trafigura.tradecapture.internal.permissionservice.Permission] = {
        val request = new JSONObject
        request.put("method", "GetAll")
        
        var routing = null
        val response = handler(routing, request)
        if (response == null) {
          null.asInstanceOf[List[com.trafigura.tradecapture.internal.permissionservice.Permission]]   // Doesn't work well with primitive types, but we should only see null in cases like discover anyway
        } else {
          val cache = new DeserialisationHelper
          JSONConversions.optionalList(response.opt("result"), x => (x) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.tradecapture.internal.permissionservice.Permission.fromJson(o, cache))) })
        }
    }
  
    def getAllUser(sid: String): List[com.trafigura.tradecapture.internal.permissionservice.Permission] = {
        val request = new JSONObject
        request.put("method", "GetAllUser")
        
        request.put("params", serializeGetAllUser(sid))
        
        var routing = null
        val response = handler(routing, request)
        if (response == null) {
          null.asInstanceOf[List[com.trafigura.tradecapture.internal.permissionservice.Permission]]   // Doesn't work well with primitive types, but we should only see null in cases like discover anyway
        } else {
          val cache = new DeserialisationHelper
          JSONConversions.optionalList(response.opt("result"), x => (x) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.tradecapture.internal.permissionservice.Permission.fromJson(o, cache))) })
        }
    }
  
    def getEffective(sid: String, requiredPermissions: List[com.trafigura.tradecapture.internal.permissionservice.Permission]): List[com.trafigura.tradecapture.internal.permissionservice.Permission] = {
        val request = new JSONObject
        request.put("method", "GetEffective")
        
        request.put("params", serializeGetEffective(sid, requiredPermissions))
        
        var routing = null
        val response = handler(routing, request)
        if (response == null) {
          null.asInstanceOf[List[com.trafigura.tradecapture.internal.permissionservice.Permission]]   // Doesn't work well with primitive types, but we should only see null in cases like discover anyway
        } else {
          val cache = new DeserialisationHelper
          JSONConversions.optionalList(response.opt("result"), x => (x) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.tradecapture.internal.permissionservice.Permission.fromJson(o, cache))) })
        }
    }
  
    def checkPermission(sid: String, requiredPermissions: List[com.trafigura.tradecapture.internal.permissionservice.Permission]): Boolean = {
        val request = new JSONObject
        request.put("method", "CheckPermission")
        
        request.put("params", serializeCheckPermission(sid, requiredPermissions))
        
        var routing = null
        val response = handler(routing, request)
        if (response == null) {
          null.asInstanceOf[Boolean]   // Doesn't work well with primitive types, but we should only see null in cases like discover anyway
        } else {
          val cache = new DeserialisationHelper
          JSONConversions.optional[Boolean](response.opt("result"), false)
        }
    }
  
    def checkPermissionForRequester(requiredPermissions: List[com.trafigura.tradecapture.internal.permissionservice.Permission]): Boolean = {
        val request = new JSONObject
        request.put("method", "CheckPermissionForRequester")
        
        request.put("params", serializeCheckPermissionForRequester(requiredPermissions))
        
        var routing = null
        val response = handler(routing, request)
        if (response == null) {
          null.asInstanceOf[Boolean]   // Doesn't work well with primitive types, but we should only see null in cases like discover anyway
        } else {
          val cache = new DeserialisationHelper
          JSONConversions.optional[Boolean](response.opt("result"), false)
        }
    }
  
    def create(permission: com.trafigura.tradecapture.internal.permissionservice.Permission): com.trafigura.tradecapture.internal.permissionservice.Permission = {
        val request = new JSONObject
        request.put("method", "Create")
        
        request.put("params", serializeCreate(permission))
        
        var routing = null
        val response = handler(routing, request)
        if (response == null) {
          null.asInstanceOf[com.trafigura.tradecapture.internal.permissionservice.Permission]   // Doesn't work well with primitive types, but we should only see null in cases like discover anyway
        } else {
          val cache = new DeserialisationHelper
          (response.opt("result")) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.tradecapture.internal.permissionservice.Permission.fromJson(o, cache))) }
        }
    }
  
    def delete(permission: com.trafigura.tradecapture.internal.permissionservice.Permission): Boolean = {
        val request = new JSONObject
        request.put("method", "Delete")
        
        request.put("params", serializeDelete(permission))
        
        var routing = null
        val response = handler(routing, request)
        if (response == null) {
          null.asInstanceOf[Boolean]   // Doesn't work well with primitive types, but we should only see null in cases like discover anyway
        } else {
          val cache = new DeserialisationHelper
          JSONConversions.optional[Boolean](response.opt("result"), false)
        }
    }
  
  }
}

