/**
 * WARNING: This file was automatically generated by the Trading Hub tooling version 2.15.
 * Any manual changes may be overwritten and lost!
 */


// Generated from model_object_scala.erb

package com.trafigura.tradecapture.internal.refinedmetal





import com.trafigura.tradinghub.support._
import scala.collection.JavaConversions._




 class RefinedMetalTradeLite extends com.trafigura.tradinghub.support.ModelObject  {
  


  
    

var oid:Int = 0
    
    
    

var tradeOID:Int = 0
    
    
    

var neptuneId:String = null
    
    
    

var nonKYCCounterparty:Boolean = false
    
    
    

var counterpartyId:scala.Option[Int] = None
    
    
    

var traderId:scala.Option[Int] = None
    
    
    

var trafficOperatorId:scala.Option[Int] = None
    
    
    

var directionId:scala.Option[Int] = None
    
    
    

var contractDate:org.joda.time.LocalDate = null
    
    
    

var submittedById:Int = 0
    
    
    

var quotas:Int = 0
    
    
    

var comments:String = null
    
    
    

var groupCompanyId:scala.Option[Int] = None
    
    
    

var metalId:scala.Option[Int] = None
    
    
    

var totalQty:scala.Option[Double] = None
    
    
    

var tolerance:Double = 0.0
    
    
    

var tradeState:String = null
    
    
    

var trafficHubId:scala.Option[Int] = None
    
    
    

var sourceSystem:String = null
    
    
    

var auditModifiedById:scala.Option[Int] = None
    
    
    

var submittedDate:org.joda.time.DateTime = null
    
    
    

var version:com.trafigura.tradecapture.internal.refinedmetal.Version = null
    
    
    

var versionStartWorkaround:org.joda.time.DateTime = null
    
    
    

var versionEndWorkaround:org.joda.time.DateTime = null
    
    
    

var titanId:String = null
    
    
    

var businessId:String = null
    
    
    

var docAmendmentsDisabled:Boolean = false
    
    
    

var docVeVer:org.joda.time.DateTime = null
    
    
    

var docCnVer:org.joda.time.DateTime = null
    
    





  override def equals(o: Any) = o match {
    case r: AnyRef =>
        if (o.isInstanceOf[com.trafigura.tradecapture.internal.refinedmetal.RefinedMetalTradeLite]) {
            val that = r.asInstanceOf[com.trafigura.tradecapture.internal.refinedmetal.RefinedMetalTradeLite]
            that.canEqual(this) && this.auditModifiedById == that.auditModifiedById && this.businessId == that.businessId && this.comments == that.comments && this.contractDate == that.contractDate && this.counterpartyId == that.counterpartyId && this.directionId == that.directionId && this.docAmendmentsDisabled == that.docAmendmentsDisabled && this.docCnVer == that.docCnVer && this.docVeVer == that.docVeVer && this.groupCompanyId == that.groupCompanyId && this.metalId == that.metalId && this.neptuneId == that.neptuneId && this.nonKYCCounterparty == that.nonKYCCounterparty && this.oid == that.oid && this.quotas == that.quotas && this.sourceSystem == that.sourceSystem && this.submittedById == that.submittedById && this.submittedDate == that.submittedDate && this.titanId == that.titanId && this.tolerance == that.tolerance && this.totalQty == that.totalQty && this.tradeOID == that.tradeOID && this.tradeState == that.tradeState && this.traderId == that.traderId && this.trafficHubId == that.trafficHubId && this.trafficOperatorId == that.trafficOperatorId && this.version == that.version && this.versionEndWorkaround == that.versionEndWorkaround && this.versionStartWorkaround == that.versionStartWorkaround &&  true
        }
        else false
    case _ => false
  }

  override def canEqual(that : Any) = that.isInstanceOf[com.trafigura.tradecapture.internal.refinedmetal.RefinedMetalTradeLite]

  override def hashCode = {
    (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 *  1
    ) +
         (if (auditModifiedById == null) 0 else auditModifiedById.hashCode) 
    ) +
         (if (businessId == null) 0 else businessId.hashCode) 
    ) +
         (if (comments == null) 0 else comments.hashCode) 
    ) +
         (if (contractDate == null) 0 else contractDate.hashCode) 
    ) +
         (if (counterpartyId == null) 0 else counterpartyId.hashCode) 
    ) +
         (if (directionId == null) 0 else directionId.hashCode) 
    ) +
         docAmendmentsDisabled.hashCode
        
    ) +
         (if (docCnVer == null) 0 else docCnVer.hashCode) 
    ) +
         (if (docVeVer == null) 0 else docVeVer.hashCode) 
    ) +
         (if (groupCompanyId == null) 0 else groupCompanyId.hashCode) 
    ) +
         (if (metalId == null) 0 else metalId.hashCode) 
    ) +
         (if (neptuneId == null) 0 else neptuneId.hashCode) 
    ) +
         nonKYCCounterparty.hashCode
        
    ) +
         oid.hashCode
        
    ) +
         quotas.hashCode
        
    ) +
         (if (sourceSystem == null) 0 else sourceSystem.hashCode) 
    ) +
         submittedById.hashCode
        
    ) +
         (if (submittedDate == null) 0 else submittedDate.hashCode) 
    ) +
         (if (titanId == null) 0 else titanId.hashCode) 
    ) +
         tolerance.hashCode
        
    ) +
         (if (totalQty == null) 0 else totalQty.hashCode) 
    ) +
         tradeOID.hashCode
        
    ) +
         (if (tradeState == null) 0 else tradeState.hashCode) 
    ) +
         (if (traderId == null) 0 else traderId.hashCode) 
    ) +
         (if (trafficHubId == null) 0 else trafficHubId.hashCode) 
    ) +
         (if (trafficOperatorId == null) 0 else trafficOperatorId.hashCode) 
    ) +
         (if (version == null) 0 else version.hashCode) 
    ) +
         (if (versionEndWorkaround == null) 0 else versionEndWorkaround.hashCode) 
    ) +
         (if (versionStartWorkaround == null) 0 else versionStartWorkaround.hashCode) 
    
  }

  override def toString = {
    "{com.trafigura.tradecapture.internal.refinedmetal.RefinedMetalTradeLite: " + "" + "auditModifiedById = " + auditModifiedById + ", " + "businessId = " + businessId + ", " + "comments = " + comments + ", " + "contractDate = " + contractDate + ", " + "counterpartyId = " + counterpartyId + ", " + "directionId = " + directionId + ", " + "docAmendmentsDisabled = " + docAmendmentsDisabled + ", " + "docCnVer = " + docCnVer + ", " + "docVeVer = " + docVeVer + ", " + "groupCompanyId = " + groupCompanyId + ", " + "metalId = " + metalId + ", " + "neptuneId = " + neptuneId + ", " + "nonKYCCounterparty = " + nonKYCCounterparty + ", " + "oid = " + oid + ", " + "quotas = " + quotas + ", " + "sourceSystem = " + sourceSystem + ", " + "submittedById = " + submittedById + ", " + "submittedDate = " + submittedDate + ", " + "titanId = " + titanId + ", " + "tolerance = " + tolerance + ", " + "totalQty = " + totalQty + ", " + "tradeOID = " + tradeOID + ", " + "tradeState = " + tradeState + ", " + "traderId = " + traderId + ", " + "trafficHubId = " + trafficHubId + ", " + "trafficOperatorId = " + trafficOperatorId + ", " + "version = " + version + ", " + "versionEndWorkaround = " + versionEndWorkaround + ", " + "versionStartWorkaround = " + versionStartWorkaround +  "}"
  }


  
         def toJson() : org.codehaus.jettison.json.JSONObject = {
      toJson(new SerialisationHelper)
    }

     def toJson(differentiator: SerialisationHelper) : org.codehaus.jettison.json.JSONObject = {
        var result = new org.codehaus.jettison.json.JSONObject();

        result.put("_node", differentiator.idFor(this))

        result.put("Type", "TradeCapture.Internal.RefinedMetal.RefinedMetalTradeLite@1@1.0")
        
          
          
          
          
            result.putOpt("Oid", this.oid);
          
        
          
          
          
          
            result.putOpt("TradeOID", this.tradeOID);
          
        
          
          
          
          
            result.putOpt("NeptuneId", this.neptuneId);
          
        
          
          
          
          
            result.putOpt("NonKYCCounterparty", this.nonKYCCounterparty);
          
        
          
          
          
          
            result.putOpt("CounterpartyId", this.counterpartyId.getOrElse(null));
          
        
          
          
          
          if(this.traderId != None) {
            result.putOpt("TraderId", (this.traderId.get));
          }
        
          
          
          
          if(this.trafficOperatorId != None) {
            result.putOpt("TrafficOperatorId", (this.trafficOperatorId.get));
          }
        
          
          
          
          if(this.directionId != None) {
            result.putOpt("DirectionId", (this.directionId.get));
          }
        
          
          
          
          
            result.putOpt("ContractDate", JSONConversions.optionalDateToJSON(this.contractDate));
          
        
          
          
          
          
            result.putOpt("SubmittedById", this.submittedById);
          
        
          
          
          
          
            result.putOpt("Quotas", this.quotas);
          
        
          
          
          
          
            result.putOpt("Comments", this.comments);
          
        
          
          
          
          
            result.putOpt("GroupCompanyId", this.groupCompanyId.getOrElse(null));
          
        
          
          
          
          
            result.putOpt("MetalId", this.metalId.getOrElse(null));
          
        
          
          
          
          if(this.totalQty != None) {
            result.putOpt("TotalQty", this.totalQty.getOrElse(null));
          }
        
          
          
          
          
            result.putOpt("Tolerance", this.tolerance);
          
        
          
          
          
          
            result.putOpt("TradeState", this.tradeState);
          
        
          
          
          
          
            result.putOpt("TrafficHubId", this.trafficHubId.getOrElse(null));
          
        
          
          
          
          
            result.putOpt("SourceSystem", this.sourceSystem);
          
        
          
          
          
          if(this.auditModifiedById != None) {
            result.putOpt("AuditModifiedById", (this.auditModifiedById.get));
          }
        
          
          
          
          
            result.putOpt("SubmittedDate", JSONConversions.optionalDatetimeToJSON(this.submittedDate));
          
        
          
          
          
          
            result.putOpt("Version", (this.version) match { case null => null; case o => o.toJson(differentiator) });
          
        
          
          
          
          
            result.putOpt("VersionStartWorkaround", JSONConversions.optionalDatetimeToJSON(this.versionStartWorkaround));
          
        
          
          
          
          
            result.putOpt("VersionEndWorkaround", JSONConversions.optionalDatetimeToJSON(this.versionEndWorkaround));
          
        
          
          
          
          
            result.putOpt("TitanId", this.titanId);
          
        
          
          
          
          
            result.putOpt("BusinessId", this.businessId);
          
        
          
          
          
          
            result.putOpt("DocAmendmentsDisabled", this.docAmendmentsDisabled);
          
        
          
          
          
          
            result.putOpt("DocVeVer", JSONConversions.optionalDatetimeToJSON(this.docVeVer));
          
        
          
          
          
          
            result.putOpt("DocCnVer", JSONConversions.optionalDatetimeToJSON(this.docCnVer));
          
        
        return result;
    }

     def loadJson(jobj : org.codehaus.jettison.json.JSONObject, cache: DeserialisationHelper) = {
        
        
          
              oid = JSONConversions.optional[Int](jobj.opt("Oid"), 0)
          
              tradeOID = JSONConversions.optional[Int](jobj.opt("TradeOID"), 0)
          
              neptuneId = JSONConversions.optional[String](jobj.opt("NeptuneId"), null)
          
              nonKYCCounterparty = JSONConversions.optional[Boolean](jobj.opt("NonKYCCounterparty"), false)
          
              counterpartyId = (jobj.opt("CounterpartyId")) match {case null => None; case n:Number => Some(n.intValue()); case _ => None}
          
              traderId = (jobj.opt("TraderId")) match {case null => None; case n:Number => Some(n.intValue()); case _ => None}
          
              trafficOperatorId = (jobj.opt("TrafficOperatorId")) match {case null => None; case n:Number => Some(n.intValue()); case _ => None}
          
              directionId = (jobj.opt("DirectionId")) match {case null => None; case n:Number => Some(n.intValue()); case _ => None}
          
              contractDate = JSONConversions.optionalDate(jobj.opt("ContractDate"))
          
              submittedById = jobj.optInt("SubmittedById")
          
              quotas = JSONConversions.optional[Int](jobj.opt("Quotas"), 0)
          
              comments = JSONConversions.optional[String](jobj.opt("Comments"), null)
          
              groupCompanyId = (jobj.opt("GroupCompanyId")) match {case null => None; case n:Number => Some(n.intValue()); case _ => None}
          
              metalId = (jobj.opt("MetalId")) match {case null => None; case n:Number => Some(n.intValue()); case _ => None}
          
              totalQty = (jobj.opt("TotalQty")) match {case null => None; case n:Number => Some(n.doubleValue()); case _ => None}
          
              tolerance = JSONConversions.optionalReal(jobj.opt("Tolerance"))
          
              tradeState = JSONConversions.optional[String](jobj.opt("TradeState"), null)
          
              trafficHubId = (jobj.opt("TrafficHubId")) match {case null => None; case n:Number => Some(n.intValue()); case _ => None}
          
              sourceSystem = JSONConversions.optional[String](jobj.opt("SourceSystem"), null)
          
              auditModifiedById = (jobj.opt("AuditModifiedById")) match {case null => None; case n:Number => Some(n.intValue()); case _ => None}
          
              submittedDate = JSONConversions.optionalDatetime(jobj.opt("SubmittedDate"))
          
              version = (jobj.opt("Version")) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.tradecapture.internal.refinedmetal.Version.fromJson(o, cache))) }
          
              versionStartWorkaround = JSONConversions.optionalDatetime(jobj.opt("VersionStartWorkaround"))
          
              versionEndWorkaround = JSONConversions.optionalDatetime(jobj.opt("VersionEndWorkaround"))
          
              titanId = JSONConversions.optional[String](jobj.opt("TitanId"), null)
          
              businessId = JSONConversions.optional[String](jobj.opt("BusinessId"), null)
          
              docAmendmentsDisabled = JSONConversions.optional[Boolean](jobj.opt("DocAmendmentsDisabled"), false)
          
              docVeVer = JSONConversions.optionalDatetime(jobj.opt("DocVeVer"))
          
              docCnVer = JSONConversions.optionalDatetime(jobj.opt("DocCnVer"))
          
        
    }

  
}

object RefinedMetalTradeLite {
  def version = ModelVersion("1")
  def wireFormatVersion = ModelVersion("1.0")

  
        val jsonTypeName = "TradeCapture.Internal.RefinedMetal.RefinedMetalTradeLite"

    def fromJson(jobj : org.codehaus.jettison.json.JSONObject, cache: DeserialisationHelper = new DeserialisationHelper) : com.trafigura.tradecapture.internal.refinedmetal.RefinedMetalTradeLite = {
      val v = TypeHolder(jobj.optString("Type"))

      v.assertModelVersion(version, "com.trafigura.tradecapture.internal.refinedmetal.RefinedMetalTradeLite")
      v.assertWireFormatVersion(wireFormatVersion, "com.trafigura.tradecapture.internal.refinedmetal.RefinedMetalTradeLite")

      
        
            val result = new com.trafigura.tradecapture.internal.refinedmetal.RefinedMetalTradeLite()
            result.loadJson(jobj, cache)
            result
        
      
    }

  

  

  
    def apply(oid: Int = 0, tradeOID: Int = 0, neptuneId: String = null, nonKYCCounterparty: Boolean = false, counterpartyId: scala.Option[Int] = None, traderId: scala.Option[Int] = None, trafficOperatorId: scala.Option[Int] = None, directionId: scala.Option[Int] = None, contractDate: org.joda.time.LocalDate = null, submittedById: Int = 0, quotas: Int = 0, comments: String = null, groupCompanyId: scala.Option[Int] = None, metalId: scala.Option[Int] = None, totalQty: scala.Option[Double] = None, tolerance: Double = 0.0, tradeState: String = null, trafficHubId: scala.Option[Int] = None, sourceSystem: String = null, auditModifiedById: scala.Option[Int] = None, submittedDate: org.joda.time.DateTime = null, version: com.trafigura.tradecapture.internal.refinedmetal.Version = null, versionStartWorkaround: org.joda.time.DateTime = null, versionEndWorkaround: org.joda.time.DateTime = null, titanId: String = null, businessId: String = null, docAmendmentsDisabled: Boolean = false, docVeVer: org.joda.time.DateTime = null, docCnVer: org.joda.time.DateTime = null) = {
      val res = new com.trafigura.tradecapture.internal.refinedmetal.RefinedMetalTradeLite
      
        res.oid = oid
      
        res.tradeOID = tradeOID
      
        res.neptuneId = neptuneId
      
        res.nonKYCCounterparty = nonKYCCounterparty
      
        res.counterpartyId = counterpartyId
      
        res.traderId = traderId
      
        res.trafficOperatorId = trafficOperatorId
      
        res.directionId = directionId
      
        res.contractDate = contractDate
      
        res.submittedById = submittedById
      
        res.quotas = quotas
      
        res.comments = comments
      
        res.groupCompanyId = groupCompanyId
      
        res.metalId = metalId
      
        res.totalQty = totalQty
      
        res.tolerance = tolerance
      
        res.tradeState = tradeState
      
        res.trafficHubId = trafficHubId
      
        res.sourceSystem = sourceSystem
      
        res.auditModifiedById = auditModifiedById
      
        res.submittedDate = submittedDate
      
        res.version = version
      
        res.versionStartWorkaround = versionStartWorkaround
      
        res.versionEndWorkaround = versionEndWorkaround
      
        res.titanId = titanId
      
        res.businessId = businessId
      
        res.docAmendmentsDisabled = docAmendmentsDisabled
      
        res.docVeVer = docVeVer
      
        res.docCnVer = docCnVer
      
      res
    }
  
}
