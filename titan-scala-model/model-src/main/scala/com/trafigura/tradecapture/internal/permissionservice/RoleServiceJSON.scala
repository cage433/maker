/**
 * WARNING: This file was automatically generated by the Trading Hub tooling version 2.15.
 * Any manual changes may be overwritten and lost!
 */


// Generated from model_service_json.rb

package com.trafigura.tradecapture.internal.permissionservice

import com.trafigura.tradecapture.internal.permissionservice._

import org.codehaus.jettison.json.JSONObject
import com.trafigura.tradinghub.support._

// JSON support for RoleService

object RoleServiceJSON extends JSONServiceDispatcher[RoleService] {
  def serviceName = "TradeCapture.Internal.PermissionService.RoleService"

  def decodeOperationName(jsonName:String) = {
    jsonName match {
      case "Create" => "Create"
      case "Get" => "Get"
      case "GetAll" => "GetAll"
      case "Update" => "Update"
      case "Delete" => "Delete"
      case "GetRoleGroups" => "GetRoleGroups"
      case "AddPermissionRole" => "AddPermissionRole"
      case "RemovePermissionRole" => "RemovePermissionRole"
      case "GetRoleUsers" => "GetRoleUsers"
      case "GetDirectRoleUsers" => "GetDirectRoleUsers"
      
    }
  }

  def parseParameters(operation:String, params: JSONObject) = {
    operation match {
      
      case "Create" =>
        
          val cache = new DeserialisationHelper
          Map("role" -> ((params.opt("Role")) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.tradecapture.internal.permissionservice.Role.fromJson(o, cache))) }))
        
      
      case "Get" =>
        
          val cache = new DeserialisationHelper
          Map("oid" -> (JSONConversions.optional[Int](params.opt("Oid"), 0)))
        
      
      case "GetAll" =>
        
          Map()
        
      
      case "Update" =>
        
          val cache = new DeserialisationHelper
          Map("role" -> ((params.opt("Role")) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.tradecapture.internal.permissionservice.Role.fromJson(o, cache))) }))
        
      
      case "Delete" =>
        
          val cache = new DeserialisationHelper
          Map("oid" -> (JSONConversions.optional[Int](params.opt("Oid"), 0)))
        
      
      case "GetRoleGroups" =>
        
          val cache = new DeserialisationHelper
          Map("oid" -> (JSONConversions.optional[Int](params.opt("Oid"), 0)))
        
      
      case "AddPermissionRole" =>
        
          val cache = new DeserialisationHelper
          Map("permission" -> ((params.opt("Permission")) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.tradecapture.internal.permissionservice.Permission.fromJson(o, cache))) }), "role" -> ((params.opt("Role")) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.tradecapture.internal.permissionservice.Role.fromJson(o, cache))) }))
        
      
      case "RemovePermissionRole" =>
        
          val cache = new DeserialisationHelper
          Map("permission" -> ((params.opt("Permission")) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.tradecapture.internal.permissionservice.Permission.fromJson(o, cache))) }), "role" -> ((params.opt("Role")) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.tradecapture.internal.permissionservice.Role.fromJson(o, cache))) }))
        
      
      case "GetRoleUsers" =>
        
          val cache = new DeserialisationHelper
          Map("oid" -> (JSONConversions.optional[Int](params.opt("Oid"), 0)))
        
      
      case "GetDirectRoleUsers" =>
        
          val cache = new DeserialisationHelper
          Map("oid" -> (JSONConversions.optional[Int](params.opt("Oid"), 0)))
        
      
    }
  }

  def invoke(target: RoleService, operation: String, params: Map[String, Any]): Any = {
    operation match {
      
      case "Create" =>
        target.create(params("role").asInstanceOf[com.trafigura.tradecapture.internal.permissionservice.Role])
      
      case "Get" =>
        target.get(params("oid").asInstanceOf[Int])
      
      case "GetAll" =>
        target.getAll()
      
      case "Update" =>
        target.update(params("role").asInstanceOf[com.trafigura.tradecapture.internal.permissionservice.Role])
      
      case "Delete" =>
        target.delete(params("oid").asInstanceOf[Int])
      
      case "GetRoleGroups" =>
        target.getRoleGroups(params("oid").asInstanceOf[Int])
      
      case "AddPermissionRole" =>
        target.addPermissionRole(params("permission").asInstanceOf[com.trafigura.tradecapture.internal.permissionservice.Permission], params("role").asInstanceOf[com.trafigura.tradecapture.internal.permissionservice.Role])
      
      case "RemovePermissionRole" =>
        target.removePermissionRole(params("permission").asInstanceOf[com.trafigura.tradecapture.internal.permissionservice.Permission], params("role").asInstanceOf[com.trafigura.tradecapture.internal.permissionservice.Role])
      
      case "GetRoleUsers" =>
        target.getRoleUsers(params("oid").asInstanceOf[Int])
      
      case "GetDirectRoleUsers" =>
        target.getDirectRoleUsers(params("oid").asInstanceOf[Int])
      
    }
  }

  def addResponse(operation:String, jsonResponse:JSONObject, response:Any) = {
    val differentiator = new SerialisationHelper
    operation match {
      
      case "Create" =>
        jsonResponse.putOpt("result", (response.asInstanceOf[com.trafigura.tradecapture.internal.permissionservice.PermissionResult]) match { case null => null; case o => o.toJson(differentiator) })
      
      case "Get" =>
        jsonResponse.putOpt("result", (response.asInstanceOf[com.trafigura.tradecapture.internal.permissionservice.Role]) match { case null => null; case o => o.toJson(differentiator) })
      
      case "GetAll" =>
        jsonResponse.putOpt("result", new org.codehaus.jettison.json.JSONArray(if(response.asInstanceOf[List[com.trafigura.tradecapture.internal.permissionservice.Role]] == null) new java.util.ArrayList() else java.util.Arrays.asList(response.asInstanceOf[List[com.trafigura.tradecapture.internal.permissionservice.Role]].map(t => (t) match { case null => null; case o => o.toJson(differentiator) }).toArray: _*)))
      
      case "Update" =>
        jsonResponse.putOpt("result", (response.asInstanceOf[com.trafigura.tradecapture.internal.permissionservice.PermissionResult]) match { case null => null; case o => o.toJson(differentiator) })
      
      case "Delete" =>
        jsonResponse.putOpt("result", response.asInstanceOf[Boolean])
      
      case "GetRoleGroups" =>
        jsonResponse.putOpt("result", new org.codehaus.jettison.json.JSONArray(if(response.asInstanceOf[List[com.trafigura.tradecapture.internal.permissionservice.Group]] == null) new java.util.ArrayList() else java.util.Arrays.asList(response.asInstanceOf[List[com.trafigura.tradecapture.internal.permissionservice.Group]].map(t => (t) match { case null => null; case o => o.toJson(differentiator) }).toArray: _*)))
      
      case "AddPermissionRole" =>
        jsonResponse.putOpt("result", (response.asInstanceOf[com.trafigura.tradecapture.internal.permissionservice.PermissionRole]) match { case null => null; case o => o.toJson(differentiator) })
      
      case "RemovePermissionRole" =>
        jsonResponse.putOpt("result", response.asInstanceOf[Boolean])
      
      case "GetRoleUsers" =>
        jsonResponse.putOpt("result", new org.codehaus.jettison.json.JSONArray(if(response.asInstanceOf[List[com.trafigura.tradecapture.internal.permissionservice.User]] == null) new java.util.ArrayList() else java.util.Arrays.asList(response.asInstanceOf[List[com.trafigura.tradecapture.internal.permissionservice.User]].map(t => (t) match { case null => null; case o => o.toJson(differentiator) }).toArray: _*)))
      
      case "GetDirectRoleUsers" =>
        jsonResponse.putOpt("result", new org.codehaus.jettison.json.JSONArray(if(response.asInstanceOf[List[com.trafigura.tradecapture.internal.permissionservice.User]] == null) new java.util.ArrayList() else java.util.Arrays.asList(response.asInstanceOf[List[com.trafigura.tradecapture.internal.permissionservice.User]].map(t => (t) match { case null => null; case o => o.toJson(differentiator) }).toArray: _*)))
      
    }
  }

  
  def serializeCreate(role: com.trafigura.tradecapture.internal.permissionservice.Role): JSONObject = {
    val differentiator = new SerialisationHelper
    val params = new JSONObject
    
      params.putOpt("Role", (role) match { case null => null; case o => o.toJson(differentiator) })
    
    params
  }
  
  def serializeGet(oid: Int): JSONObject = {
    val differentiator = new SerialisationHelper
    val params = new JSONObject
    
      params.putOpt("Oid", oid)
    
    params
  }
  
  def serializeGetAll(): JSONObject = {
    val differentiator = new SerialisationHelper
    val params = new JSONObject
    
    params
  }
  
  def serializeUpdate(role: com.trafigura.tradecapture.internal.permissionservice.Role): JSONObject = {
    val differentiator = new SerialisationHelper
    val params = new JSONObject
    
      params.putOpt("Role", (role) match { case null => null; case o => o.toJson(differentiator) })
    
    params
  }
  
  def serializeDelete(oid: Int): JSONObject = {
    val differentiator = new SerialisationHelper
    val params = new JSONObject
    
      params.putOpt("Oid", oid)
    
    params
  }
  
  def serializeGetRoleGroups(oid: Int): JSONObject = {
    val differentiator = new SerialisationHelper
    val params = new JSONObject
    
      params.putOpt("Oid", oid)
    
    params
  }
  
  def serializeAddPermissionRole(permission: com.trafigura.tradecapture.internal.permissionservice.Permission, role: com.trafigura.tradecapture.internal.permissionservice.Role): JSONObject = {
    val differentiator = new SerialisationHelper
    val params = new JSONObject
    
      params.putOpt("Permission", (permission) match { case null => null; case o => o.toJson(differentiator) })
    
      params.putOpt("Role", (role) match { case null => null; case o => o.toJson(differentiator) })
    
    params
  }
  
  def serializeRemovePermissionRole(permission: com.trafigura.tradecapture.internal.permissionservice.Permission, role: com.trafigura.tradecapture.internal.permissionservice.Role): JSONObject = {
    val differentiator = new SerialisationHelper
    val params = new JSONObject
    
      params.putOpt("Permission", (permission) match { case null => null; case o => o.toJson(differentiator) })
    
      params.putOpt("Role", (role) match { case null => null; case o => o.toJson(differentiator) })
    
    params
  }
  
  def serializeGetRoleUsers(oid: Int): JSONObject = {
    val differentiator = new SerialisationHelper
    val params = new JSONObject
    
      params.putOpt("Oid", oid)
    
    params
  }
  
  def serializeGetDirectRoleUsers(oid: Int): JSONObject = {
    val differentiator = new SerialisationHelper
    val params = new JSONObject
    
      params.putOpt("Oid", oid)
    
    params
  }
  

  class Proxy(val handler: (String, JSONObject) => JSONObject) extends RoleService {
  
    def create(role: com.trafigura.tradecapture.internal.permissionservice.Role): com.trafigura.tradecapture.internal.permissionservice.PermissionResult = {
        val request = new JSONObject
        request.put("method", "Create")
        
        request.put("params", serializeCreate(role))
        
        var routing = null
        val response = handler(routing, request)
        if (response == null) {
          null.asInstanceOf[com.trafigura.tradecapture.internal.permissionservice.PermissionResult]   // Doesn't work well with primitive types, but we should only see null in cases like discover anyway
        } else {
          val cache = new DeserialisationHelper
          (response.opt("result")) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.tradecapture.internal.permissionservice.PermissionResult.fromJson(o, cache))) }
        }
    }
  
    def get(oid: Int): com.trafigura.tradecapture.internal.permissionservice.Role = {
        val request = new JSONObject
        request.put("method", "Get")
        
        request.put("params", serializeGet(oid))
        
        var routing = null
        val response = handler(routing, request)
        if (response == null) {
          null.asInstanceOf[com.trafigura.tradecapture.internal.permissionservice.Role]   // Doesn't work well with primitive types, but we should only see null in cases like discover anyway
        } else {
          val cache = new DeserialisationHelper
          (response.opt("result")) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.tradecapture.internal.permissionservice.Role.fromJson(o, cache))) }
        }
    }
  
    def getAll(): List[com.trafigura.tradecapture.internal.permissionservice.Role] = {
        val request = new JSONObject
        request.put("method", "GetAll")
        
        var routing = null
        val response = handler(routing, request)
        if (response == null) {
          null.asInstanceOf[List[com.trafigura.tradecapture.internal.permissionservice.Role]]   // Doesn't work well with primitive types, but we should only see null in cases like discover anyway
        } else {
          val cache = new DeserialisationHelper
          JSONConversions.optionalList(response.opt("result"), x => (x) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.tradecapture.internal.permissionservice.Role.fromJson(o, cache))) })
        }
    }
  
    def update(role: com.trafigura.tradecapture.internal.permissionservice.Role): com.trafigura.tradecapture.internal.permissionservice.PermissionResult = {
        val request = new JSONObject
        request.put("method", "Update")
        
        request.put("params", serializeUpdate(role))
        
        var routing = null
        val response = handler(routing, request)
        if (response == null) {
          null.asInstanceOf[com.trafigura.tradecapture.internal.permissionservice.PermissionResult]   // Doesn't work well with primitive types, but we should only see null in cases like discover anyway
        } else {
          val cache = new DeserialisationHelper
          (response.opt("result")) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.tradecapture.internal.permissionservice.PermissionResult.fromJson(o, cache))) }
        }
    }
  
    def delete(oid: Int): Boolean = {
        val request = new JSONObject
        request.put("method", "Delete")
        
        request.put("params", serializeDelete(oid))
        
        var routing = null
        val response = handler(routing, request)
        if (response == null) {
          null.asInstanceOf[Boolean]   // Doesn't work well with primitive types, but we should only see null in cases like discover anyway
        } else {
          val cache = new DeserialisationHelper
          JSONConversions.optional[Boolean](response.opt("result"), false)
        }
    }
  
    def getRoleGroups(oid: Int): List[com.trafigura.tradecapture.internal.permissionservice.Group] = {
        val request = new JSONObject
        request.put("method", "GetRoleGroups")
        
        request.put("params", serializeGetRoleGroups(oid))
        
        var routing = null
        val response = handler(routing, request)
        if (response == null) {
          null.asInstanceOf[List[com.trafigura.tradecapture.internal.permissionservice.Group]]   // Doesn't work well with primitive types, but we should only see null in cases like discover anyway
        } else {
          val cache = new DeserialisationHelper
          JSONConversions.optionalList(response.opt("result"), x => (x) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.tradecapture.internal.permissionservice.Group.fromJson(o, cache))) })
        }
    }
  
    def addPermissionRole(permission: com.trafigura.tradecapture.internal.permissionservice.Permission, role: com.trafigura.tradecapture.internal.permissionservice.Role): com.trafigura.tradecapture.internal.permissionservice.PermissionRole = {
        val request = new JSONObject
        request.put("method", "AddPermissionRole")
        
        request.put("params", serializeAddPermissionRole(permission, role))
        
        var routing = null
        val response = handler(routing, request)
        if (response == null) {
          null.asInstanceOf[com.trafigura.tradecapture.internal.permissionservice.PermissionRole]   // Doesn't work well with primitive types, but we should only see null in cases like discover anyway
        } else {
          val cache = new DeserialisationHelper
          (response.opt("result")) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.tradecapture.internal.permissionservice.PermissionRole.fromJson(o, cache))) }
        }
    }
  
    def removePermissionRole(permission: com.trafigura.tradecapture.internal.permissionservice.Permission, role: com.trafigura.tradecapture.internal.permissionservice.Role): Boolean = {
        val request = new JSONObject
        request.put("method", "RemovePermissionRole")
        
        request.put("params", serializeRemovePermissionRole(permission, role))
        
        var routing = null
        val response = handler(routing, request)
        if (response == null) {
          null.asInstanceOf[Boolean]   // Doesn't work well with primitive types, but we should only see null in cases like discover anyway
        } else {
          val cache = new DeserialisationHelper
          JSONConversions.optional[Boolean](response.opt("result"), false)
        }
    }
  
    def getRoleUsers(oid: Int): List[com.trafigura.tradecapture.internal.permissionservice.User] = {
        val request = new JSONObject
        request.put("method", "GetRoleUsers")
        
        request.put("params", serializeGetRoleUsers(oid))
        
        var routing = null
        val response = handler(routing, request)
        if (response == null) {
          null.asInstanceOf[List[com.trafigura.tradecapture.internal.permissionservice.User]]   // Doesn't work well with primitive types, but we should only see null in cases like discover anyway
        } else {
          val cache = new DeserialisationHelper
          JSONConversions.optionalList(response.opt("result"), x => (x) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.tradecapture.internal.permissionservice.User.fromJson(o, cache))) })
        }
    }
  
    def getDirectRoleUsers(oid: Int): List[com.trafigura.tradecapture.internal.permissionservice.User] = {
        val request = new JSONObject
        request.put("method", "GetDirectRoleUsers")
        
        request.put("params", serializeGetDirectRoleUsers(oid))
        
        var routing = null
        val response = handler(routing, request)
        if (response == null) {
          null.asInstanceOf[List[com.trafigura.tradecapture.internal.permissionservice.User]]   // Doesn't work well with primitive types, but we should only see null in cases like discover anyway
        } else {
          val cache = new DeserialisationHelper
          JSONConversions.optionalList(response.opt("result"), x => (x) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.tradecapture.internal.permissionservice.User.fromJson(o, cache))) })
        }
    }
  
  }
}

