/**
 * WARNING: This file was automatically generated by the Trading Hub tooling version 2.15.
 * Any manual changes may be overwritten and lost!
 */


// Generated from model_object_scala.erb

package com.trafigura.tradecapture.internal.refinedmetal





import com.trafigura.tradinghub.support._
import scala.collection.JavaConversions._




 class Quota extends com.trafigura.tradinghub.support.ModelObject  {
  


  
    

var oid:Int = 0
    
    
    

var quotaNumber:Int = 0
    
    
    

var quotaName:String = null
    
    
    

var quantity:com.trafigura.tradecapture.internal.refinedmetal.Quantity = null
    
    
    

var quality:com.trafigura.tradecapture.internal.refinedmetal.Quality = null
    
    
    

var contractualLocationId:scala.Option[Int] = None
    
    
    

var contractualTermsId:scala.Option[Int] = None
    
    
    

var securityTermsId:scala.Option[Int] = None
    
    
    

var paymentTermsId:scala.Option[Int] = None
    
    
    

var qpTypeId:scala.Option[Int] = None
    
    
    

var marketId:scala.Option[Int] = None
    
    
    

var currencyId:scala.Option[Int] = None
    
    
    

var shipment:org.joda.time.LocalDate = null
    
    
    

var expectedSales:org.joda.time.LocalDate = null
    
    
    

var premium:com.trafigura.tradecapture.internal.refinedmetal.Quantity = null
    
    
    

var premiumCcyId:scala.Option[Int] = None
    
    
    

var materialGradeComments:String = null
    
    
    

var premiumComments:String = null
    
    
    

var destinationLocationId:scala.Option[Int] = None
    
    
    

var destinationTermsId:scala.Option[Int] = None
    
    
    

var fxPricing:Boolean = false
    
    
    

var pricingOffsetId:scala.Option[Int] = None
    
    
    

var pricingSpecs:List[com.trafigura.edm.fpc.PricingSpec] = null
    
    
    

var vatInvoiceDate:org.joda.time.LocalDate = null
    
    
    

var vatInvoiceType:QuotaVatInvoiceTypeEnum = null
    
    
    

var deferredCreditDays:scala.Option[Int] = None
    
    
    

var paySp:com.trafigura.tradecapture.internal.refinedmetal.PaymentSpec = null
    
    
    

var index:QuotaIndexEnum = null
    
    





  override def equals(o: Any) = o match {
    case r: AnyRef =>
        if (o.isInstanceOf[com.trafigura.tradecapture.internal.refinedmetal.Quota]) {
            val that = r.asInstanceOf[com.trafigura.tradecapture.internal.refinedmetal.Quota]
            that.canEqual(this) && this.contractualLocationId == that.contractualLocationId && this.contractualTermsId == that.contractualTermsId && this.currencyId == that.currencyId && this.deferredCreditDays == that.deferredCreditDays && this.destinationLocationId == that.destinationLocationId && this.destinationTermsId == that.destinationTermsId && this.expectedSales == that.expectedSales && this.fxPricing == that.fxPricing && this.index == that.index && this.marketId == that.marketId && this.materialGradeComments == that.materialGradeComments && this.oid == that.oid && this.paySp == that.paySp && this.paymentTermsId == that.paymentTermsId && this.premium == that.premium && this.premiumCcyId == that.premiumCcyId && this.premiumComments == that.premiumComments && this.pricingOffsetId == that.pricingOffsetId && this.pricingSpecs == that.pricingSpecs && this.qpTypeId == that.qpTypeId && this.quality == that.quality && this.quantity == that.quantity && this.quotaName == that.quotaName && this.quotaNumber == that.quotaNumber && this.securityTermsId == that.securityTermsId && this.shipment == that.shipment && this.vatInvoiceDate == that.vatInvoiceDate && this.vatInvoiceType == that.vatInvoiceType &&  true
        }
        else false
    case _ => false
  }

  override def canEqual(that : Any) = that.isInstanceOf[com.trafigura.tradecapture.internal.refinedmetal.Quota]

  override def hashCode = {
    (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 * (41 *  1
    ) +
         (if (contractualLocationId == null) 0 else contractualLocationId.hashCode) 
    ) +
         (if (contractualTermsId == null) 0 else contractualTermsId.hashCode) 
    ) +
         (if (currencyId == null) 0 else currencyId.hashCode) 
    ) +
         (if (deferredCreditDays == null) 0 else deferredCreditDays.hashCode) 
    ) +
         (if (destinationLocationId == null) 0 else destinationLocationId.hashCode) 
    ) +
         (if (destinationTermsId == null) 0 else destinationTermsId.hashCode) 
    ) +
         (if (expectedSales == null) 0 else expectedSales.hashCode) 
    ) +
         fxPricing.hashCode
        
    ) +
         (if (index == null) 0 else index.hashCode) 
    ) +
         (if (marketId == null) 0 else marketId.hashCode) 
    ) +
         (if (materialGradeComments == null) 0 else materialGradeComments.hashCode) 
    ) +
         oid.hashCode
        
    ) +
         (if (paySp == null) 0 else paySp.hashCode) 
    ) +
         (if (paymentTermsId == null) 0 else paymentTermsId.hashCode) 
    ) +
         (if (premium == null) 0 else premium.hashCode) 
    ) +
         (if (premiumCcyId == null) 0 else premiumCcyId.hashCode) 
    ) +
         (if (premiumComments == null) 0 else premiumComments.hashCode) 
    ) +
         (if (pricingOffsetId == null) 0 else pricingOffsetId.hashCode) 
    ) +
         (if (pricingSpecs == null) 0 else pricingSpecs.hashCode) 
    ) +
         (if (qpTypeId == null) 0 else qpTypeId.hashCode) 
    ) +
         (if (quality == null) 0 else quality.hashCode) 
    ) +
         (if (quantity == null) 0 else quantity.hashCode) 
    ) +
         (if (quotaName == null) 0 else quotaName.hashCode) 
    ) +
         quotaNumber.hashCode
        
    ) +
         (if (securityTermsId == null) 0 else securityTermsId.hashCode) 
    ) +
         (if (shipment == null) 0 else shipment.hashCode) 
    ) +
         (if (vatInvoiceDate == null) 0 else vatInvoiceDate.hashCode) 
    ) +
         (if (vatInvoiceType == null) 0 else vatInvoiceType.hashCode) 
    
  }

  override def toString = {
    "{com.trafigura.tradecapture.internal.refinedmetal.Quota: " + "" + "contractualLocationId = " + contractualLocationId + ", " + "contractualTermsId = " + contractualTermsId + ", " + "currencyId = " + currencyId + ", " + "deferredCreditDays = " + deferredCreditDays + ", " + "destinationLocationId = " + destinationLocationId + ", " + "destinationTermsId = " + destinationTermsId + ", " + "expectedSales = " + expectedSales + ", " + "fxPricing = " + fxPricing + ", " + "index = " + index + ", " + "marketId = " + marketId + ", " + "materialGradeComments = " + materialGradeComments + ", " + "oid = " + oid + ", " + "paySp = " + paySp + ", " + "paymentTermsId = " + paymentTermsId + ", " + "premium = " + premium + ", " + "premiumCcyId = " + premiumCcyId + ", " + "premiumComments = " + premiumComments + ", " + "pricingOffsetId = " + pricingOffsetId + ", " + "pricingSpecs = " + pricingSpecs + ", " + "qpTypeId = " + qpTypeId + ", " + "quality = " + quality + ", " + "quantity = " + quantity + ", " + "quotaName = " + quotaName + ", " + "quotaNumber = " + quotaNumber + ", " + "securityTermsId = " + securityTermsId + ", " + "shipment = " + shipment + ", " + "vatInvoiceDate = " + vatInvoiceDate + ", " + "vatInvoiceType = " + vatInvoiceType +  "}"
  }


  
         def toJson() : org.codehaus.jettison.json.JSONObject = {
      toJson(new SerialisationHelper)
    }

     def toJson(differentiator: SerialisationHelper) : org.codehaus.jettison.json.JSONObject = {
        var result = new org.codehaus.jettison.json.JSONObject();

        result.put("_node", differentiator.idFor(this))

        result.put("Type", "TradeCapture.Internal.RefinedMetal.Quota@1@1.0")
        
          
          
          
          
            result.putOpt("Oid", this.oid);
          
        
          
          
          
          
            result.putOpt("QuotaNumber", this.quotaNumber);
          
        
          
          
          
          
            result.putOpt("QuotaName", this.quotaName);
          
        
          
          
          
          
            result.putOpt("Quantity", (this.quantity) match { case null => null; case o => o.toJson(differentiator) });
          
        
          
          
          
          
            result.putOpt("Quality", (this.quality) match { case null => null; case o => o.toJson(differentiator) });
          
        
          
          
          
          if(this.contractualLocationId != None) {
            result.putOpt("ContractualLocationId", (this.contractualLocationId.get));
          }
        
          
          
          
          if(this.contractualTermsId != None) {
            result.putOpt("ContractualTermsId", (this.contractualTermsId.get));
          }
        
          
          
          
          if(this.securityTermsId != None) {
            result.putOpt("SecurityTermsId", (this.securityTermsId.get));
          }
        
          
          
          
          if(this.paymentTermsId != None) {
            result.putOpt("PaymentTermsId", (this.paymentTermsId.get));
          }
        
          
          
          
          if(this.qpTypeId != None) {
            result.putOpt("QpTypeId", (this.qpTypeId.get));
          }
        
          
          
          
          if(this.marketId != None) {
            result.putOpt("MarketId", (this.marketId.get));
          }
        
          
          
          
          if(this.currencyId != None) {
            result.putOpt("CurrencyId", (this.currencyId.get));
          }
        
          
          
          
          
            result.putOpt("Shipment", JSONConversions.optionalMonthYearToJSON(this.shipment));
          
        
          
          
          
          
            result.putOpt("ExpectedSales", JSONConversions.optionalMonthYearToJSON(this.expectedSales));
          
        
          
          
          
          
            result.putOpt("Premium", (this.premium) match { case null => null; case o => o.toJson(differentiator) });
          
        
          
          
          
          if(this.premiumCcyId != None) {
            result.putOpt("PremiumCcyId", (this.premiumCcyId.get));
          }
        
          
          
          
          
            result.putOpt("MaterialGradeComments", this.materialGradeComments);
          
        
          
          
          
          
            result.putOpt("PremiumComments", this.premiumComments);
          
        
          
          
          
          if(this.destinationLocationId != None) {
            result.putOpt("DestinationLocationId", (this.destinationLocationId.get));
          }
        
          
          
          
          if(this.destinationTermsId != None) {
            result.putOpt("DestinationTermsId", (this.destinationTermsId.get));
          }
        
          
          
          
          
            result.putOpt("FxPricing", this.fxPricing);
          
        
          
          
          
          if(this.pricingOffsetId != None) {
            result.putOpt("PricingOffsetId", (this.pricingOffsetId.get));
          }
        
          
          
          
          
            result.putOpt("PricingSpecs", new org.codehaus.jettison.json.JSONArray(if(this.pricingSpecs == null) new java.util.ArrayList() else java.util.Arrays.asList(this.pricingSpecs.map(t => (t) match { case null => null; case o => o.toJson(differentiator) }).toArray: _*)));
          
        
          
          
          
          
            result.putOpt("VatInvoiceDate", JSONConversions.optionalDateToJSON(this.vatInvoiceDate));
          
        
          
          
          
          
            result.putOpt("VatInvoiceType", (this.vatInvoiceType) match { case null => null; case o => o.toJson });
          
        
          
          
          
          
            result.putOpt("DeferredCreditDays", this.deferredCreditDays.getOrElse(null));
          
        
          
          
          
          
            result.putOpt("PaySp", (this.paySp) match { case null => null; case o => o.toJson(differentiator) });
          
        
          
          
          
          
            result.putOpt("Index", (this.index) match { case null => null; case o => o.toJson });
          
        
        return result;
    }

     def loadJson(jobj : org.codehaus.jettison.json.JSONObject, cache: DeserialisationHelper) = {
        
        
          
              oid = JSONConversions.optional[Int](jobj.opt("Oid"), 0)
          
              quotaNumber = JSONConversions.optional[Int](jobj.opt("QuotaNumber"), 0)
          
              quotaName = JSONConversions.optional[String](jobj.opt("QuotaName"), null)
          
              quantity = (jobj.opt("Quantity")) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.tradecapture.internal.refinedmetal.Quantity.fromJson(o, cache))) }
          
              quality = (jobj.opt("Quality")) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.tradecapture.internal.refinedmetal.Quality.fromJson(o, cache))) }
          
              contractualLocationId = (jobj.opt("ContractualLocationId")) match {case null => None; case n:Number => Some(n.intValue()); case _ => None}
          
              contractualTermsId = (jobj.opt("ContractualTermsId")) match {case null => None; case n:Number => Some(n.intValue()); case _ => None}
          
              securityTermsId = (jobj.opt("SecurityTermsId")) match {case null => None; case n:Number => Some(n.intValue()); case _ => None}
          
              paymentTermsId = (jobj.opt("PaymentTermsId")) match {case null => None; case n:Number => Some(n.intValue()); case _ => None}
          
              qpTypeId = (jobj.opt("QpTypeId")) match {case null => None; case n:Number => Some(n.intValue()); case _ => None}
          
              marketId = (jobj.opt("MarketId")) match {case null => None; case n:Number => Some(n.intValue()); case _ => None}
          
              currencyId = (jobj.opt("CurrencyId")) match {case null => None; case n:Number => Some(n.intValue()); case _ => None}
          
              shipment = JSONConversions.optionalMonthYear(jobj.opt("Shipment"))
          
              expectedSales = JSONConversions.optionalMonthYear(jobj.opt("ExpectedSales"))
          
              premium = (jobj.opt("Premium")) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.tradecapture.internal.refinedmetal.Quantity.fromJson(o, cache))) }
          
              premiumCcyId = (jobj.opt("PremiumCcyId")) match {case null => None; case n:Number => Some(n.intValue()); case _ => None}
          
              materialGradeComments = JSONConversions.optional[String](jobj.opt("MaterialGradeComments"), null)
          
              premiumComments = JSONConversions.optional[String](jobj.opt("PremiumComments"), null)
          
              destinationLocationId = (jobj.opt("DestinationLocationId")) match {case null => None; case n:Number => Some(n.intValue()); case _ => None}
          
              destinationTermsId = (jobj.opt("DestinationTermsId")) match {case null => None; case n:Number => Some(n.intValue()); case _ => None}
          
              fxPricing = JSONConversions.optional[Boolean](jobj.opt("FxPricing"), false)
          
              pricingOffsetId = (jobj.opt("PricingOffsetId")) match {case null => None; case n:Number => Some(n.intValue()); case _ => None}
          
              pricingSpecs = JSONConversions.optionalList(jobj.opt("PricingSpecs"), x => (x) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.edm.fpc.PricingSpec.fromJson(o, cache))) })
          
              vatInvoiceDate = JSONConversions.optionalDate(jobj.opt("VatInvoiceDate"))
          
              vatInvoiceType = (jobj.optString("VatInvoiceType")) match { case null => null; case s: String => QuotaVatInvoiceTypeEnum.forName(s) }
          
              deferredCreditDays = (jobj.opt("DeferredCreditDays")) match {case null => None; case n:Number => Some(n.intValue()); case _ => None}
          
              paySp = (jobj.opt("PaySp")) match { case null => null; case o: org.codehaus.jettison.json.JSONObject => cache.objectFor(o).getOrElse(cache.seen(o, com.trafigura.tradecapture.internal.refinedmetal.PaymentSpec.fromJson(o, cache))) }
          
              index = (jobj.optString("Index")) match { case null => null; case s: String => QuotaIndexEnum.forName(s) }
          
        
    }

  
}

object Quota {
  def version = ModelVersion("1")
  def wireFormatVersion = ModelVersion("1.0")

  
        val jsonTypeName = "TradeCapture.Internal.RefinedMetal.Quota"

    def fromJson(jobj : org.codehaus.jettison.json.JSONObject, cache: DeserialisationHelper = new DeserialisationHelper) : com.trafigura.tradecapture.internal.refinedmetal.Quota = {
      val v = TypeHolder(jobj.optString("Type"))

      v.assertModelVersion(version, "com.trafigura.tradecapture.internal.refinedmetal.Quota")
      v.assertWireFormatVersion(wireFormatVersion, "com.trafigura.tradecapture.internal.refinedmetal.Quota")

      
        
            val result = new com.trafigura.tradecapture.internal.refinedmetal.Quota()
            result.loadJson(jobj, cache)
            result
        
      
    }

  

  
  val MaterialGradeCommentLength = 255
  
  val PremiumCommentLength = 255
  

  
    def apply(oid: Int = 0, quotaNumber: Int = 0, quotaName: String = null, quantity: com.trafigura.tradecapture.internal.refinedmetal.Quantity = null, quality: com.trafigura.tradecapture.internal.refinedmetal.Quality = null, contractualLocationId: scala.Option[Int] = None, contractualTermsId: scala.Option[Int] = None, securityTermsId: scala.Option[Int] = None, paymentTermsId: scala.Option[Int] = None, qpTypeId: scala.Option[Int] = None, marketId: scala.Option[Int] = None, currencyId: scala.Option[Int] = None, shipment: org.joda.time.LocalDate = null, expectedSales: org.joda.time.LocalDate = null, premium: com.trafigura.tradecapture.internal.refinedmetal.Quantity = null, premiumCcyId: scala.Option[Int] = None, materialGradeComments: String = null, premiumComments: String = null, destinationLocationId: scala.Option[Int] = None, destinationTermsId: scala.Option[Int] = None, fxPricing: Boolean = false, pricingOffsetId: scala.Option[Int] = None, pricingSpecs: List[com.trafigura.edm.fpc.PricingSpec] = null, vatInvoiceDate: org.joda.time.LocalDate = null, vatInvoiceType: QuotaVatInvoiceTypeEnum = null, deferredCreditDays: scala.Option[Int] = None, paySp: com.trafigura.tradecapture.internal.refinedmetal.PaymentSpec = null, index: QuotaIndexEnum = null) = {
      val res = new com.trafigura.tradecapture.internal.refinedmetal.Quota
      
        res.oid = oid
      
        res.quotaNumber = quotaNumber
      
        res.quotaName = quotaName
      
        res.quantity = quantity
      
        res.quality = quality
      
        res.contractualLocationId = contractualLocationId
      
        res.contractualTermsId = contractualTermsId
      
        res.securityTermsId = securityTermsId
      
        res.paymentTermsId = paymentTermsId
      
        res.qpTypeId = qpTypeId
      
        res.marketId = marketId
      
        res.currencyId = currencyId
      
        res.shipment = shipment
      
        res.expectedSales = expectedSales
      
        res.premium = premium
      
        res.premiumCcyId = premiumCcyId
      
        res.materialGradeComments = materialGradeComments
      
        res.premiumComments = premiumComments
      
        res.destinationLocationId = destinationLocationId
      
        res.destinationTermsId = destinationTermsId
      
        res.fxPricing = fxPricing
      
        res.pricingOffsetId = pricingOffsetId
      
        res.pricingSpecs = pricingSpecs
      
        res.vatInvoiceDate = vatInvoiceDate
      
        res.vatInvoiceType = vatInvoiceType
      
        res.deferredCreditDays = deferredCreditDays
      
        res.paySp = paySp
      
        res.index = index
      
      res
    }
  
}
