<?xml version="1.0"?>
<doc>
    <assembly>
        <name>protobuf-net.Extensions</name>
    </assembly>
    <members>
        <member name="T:ProtoBuf.Caching.ByteSegmentComparer">
            <summary>
            A comparer (for dictionary use) that can compare segments of buffers; the
            intent being to avoid having to encode/decode strings
            </summary>
            <remarks>It is the responsibility of the consuming code not to mutate
            the byte[] in a dictionary</remarks>
        </member>
        <member name="T:ProtoBuf.Caching.Enyim.NetTranscoder">
            <summary>
            Acts as a transcoder compatible with the "enyim" client, swapping
            BinaryFormatter for protobuf-net's Serializer
            </summary>
        </member>
        <member name="T:ProtoBuf.ServiceModel.Client.ProtoClientExtensions">
            <summary>
            Provides extension methods for interacting with RPC via expressions, rather than
            code-generation or reflection.
            </summary>
        </member>
        <member name="M:ProtoBuf.ServiceModel.Client.ProtoClientExtensions.Invoke``2(ProtoBuf.ServiceModel.Client.ProtoClient{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}})">
            <summary>
            Performs a synchronous RPC operation on the given service.
            </summary>
            <typeparam name="TService">The service being used.</typeparam>
            <typeparam name="TResult">The result of the RPC call.</typeparam>
            <param name="client">The client to use to invoke the RPC call.</param>
            <param name="operation">An expression indicating the operation to perform.</param>
            <returns>The value of the RPC call.</returns>
        </member>
        <member name="M:ProtoBuf.ServiceModel.Client.ProtoClientExtensions.Invoke``1(ProtoBuf.ServiceModel.Client.ProtoClient{``0},System.Linq.Expressions.Expression{System.Action{``0}})">
            <summary>
            Performs a synchronous RPC operation on the given service.
            </summary>
            <typeparam name="TService">The service being used.</typeparam>
            <param name="client">The client to use to invoke the RPC call.</param>
            <param name="operation">An expression indicating the operation to perform.</param>
        </member>
        <member name="M:ProtoBuf.ServiceModel.Client.ProtoClientExtensions.InvokeAsync``2(ProtoBuf.ServiceModel.Client.ProtoClient{``0},System.Linq.Expressions.Expression{System.Func{``0,``1}},System.Action{System.Func{``1}})">
            <summary>
            Performs an asynchronous RPC operation on the given service.
            </summary>
            <typeparam name="TService">The service being used.</typeparam>
            <typeparam name="TResult">The result of the RPC call.</typeparam>
            <param name="client">The client to use to invoke the RPC call.</param>
            <param name="operation">An expression indicating the operation to perform.</param>
            <param name="callback">A delegate that is invoked when the operation is complete. The
            callback is additionally given an `Action` that can be invoked to obtain the return
            value of the call, or to raise any exception
            associated with the call.</param>
        </member>
        <member name="M:ProtoBuf.ServiceModel.Client.ProtoClientExtensions.InvokeAsync``1(ProtoBuf.ServiceModel.Client.ProtoClient{``0},System.Linq.Expressions.Expression{System.Action{``0}},System.Action{System.Action})">
            <summary>
            Performs an asynchronous RPC operation on the given service.
            </summary>
            <typeparam name="TService">The service being used.</typeparam>
            <param name="client">The client to use to invoke the RPC call.</param>
            <param name="operation">An expression indicating the operation to perform.</param>
            <param name="callback">A delegate that is invoked when the operation is complete. The
            callback is additionally given an `Action` that can be invoked to raise any exception
            associated with the call.</param>
        </member>
        <member name="M:ProtoBuf.ServiceModel.Client.ProtoClientExtensions.TryResolveField(System.Linq.Expressions.Expression,System.Reflection.FieldInfo@,System.Object@)">
            <summary>
            Checks that the expression is a field-based member-access operation; if so, it attempts
            to resolve the instance hosting the field. This is used as the basis of by-ref arguments.
            </summary>
        </member>
    </members>
</doc>
