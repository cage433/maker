package maker.project

import java.io.{ File, FileWriter, Writer }
import maker.MakerProps
import maker.utils.Zip
import org.apache.commons.io.FileUtils
import org.apache.tools.ant.taskdefs.GUnzip

class EnsimeGenerator(props: MakerProps) {
  def generateModules(out: File, modules: List[Module]): Unit = {
    val writer = new FileWriter(out)
    try {
      writer.append(
        """;; Generated by Maker
          |
          |(
          |  :subprojects (
          |""".stripMargin)

      modules.foreach(appendModule(writer, _))

      writer.append(
        """  )
          |)
          |""".stripMargin)
    } finally writer.close()
  }

  private def appendModule(writer: Writer, module: Module): Unit = {
    writer.append("    (\n")
    writer.append("      :name \"" + module.name + "\"\n")
    writer.append("      :module-name \"" + module.name + "\"\n")

    // TODO: compiler flags

    writer.append("      :depends-on-modules (\n")
    module.immediateUpstreamModules.foreach { dep =>
      writer.append("        \"" + dep.name + "\"\n")
    }
    writer.append("      )\n")

    writer.append("      :compile-deps (")
    module.managedJars.foreach { dep =>
      writer.append("        \"" + dep.getAbsolutePath + "\"\n")
    }
    writer.append("      )\n")

    // hack until src jars are supported
    if (module.managedLibSourceDir.exists) {
      FileUtils.deleteDirectory(module.managedLibSourceDirDir)
      module.managedLibSourceDirDir.mkdirs()
      writer.append("      :reference-source-roots (\n")
      module.managedLibSourceDir.list.filter(_.endsWith(".jar")).foreach { dep =>
        val from = new File(module.managedLibSourceDir, dep)
        val to = new File(module.managedLibSourceDirDir, dep)
        println("extracting " + from + " into " + to)
        Zip.unzip(from, to)
        writer.append("        \"" + to.getAbsolutePath + "\"\n")
      }
      writer.append("      )\n")
    }

    // TODO: sources for java and scala standard libraries

    writer.append("      :source-roots (\n")
    writer.append("        \"" + module.sourceDir.getAbsolutePath + "\"\n")
    writer.append("        \"" + module.testSourceDir.getAbsolutePath + "\"\n")
    writer.append("      )\n")

    writer.append("      :target \"" + module.outputDir.getAbsolutePath + "\"\n")
    writer.append("      :test-target \"" + module.testOutputFile.getAbsolutePath + "\"\n")

    writer.append("    )\n")
  }
}
